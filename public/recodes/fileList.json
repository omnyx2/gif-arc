[
  {
    "filename": "2fe1a33a-994d-4eec-9b53-c65a77e1d3ee.json",
    "uuid": "2fe1a33a-994d-4eec-9b53-c65a77e1d3ee",
    "created": "2025-04-28 22:45:23",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0,0,0,2,2,0,0],\n        [0,0,1,1,0,0,0,0,0,0,0,2,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,0,0,0,0,0,0,0,4,4,0,0],\n        [0,0,3,3,0,0,0,0,0,0,0,4,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0,0,0,2,2,0,0],\n        [0,0,1,1,0,0,8,0,8,0,0,8,2,2,0],\n        [0,0,0,0,8,0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,8,0,0,8,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,0,0,0,0,0,0,0,4,4,0,0],\n        [0,0,3,3,0,0,0,0,0,0,0,4,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef transform(arr):\\n    # 1) 복사\\n    h, w = len(arr), len(arr[0])\\n    res = [row[:] for row in arr]\\n\\n    # 2) 모든 값별 좌표 수집\\n    from collections import defaultdict\\n    coords = defaultdict(list)\\n    for i in range(h):\\n        for j in range(w):\\n            v = arr[i][j]\\n            if v != 0:\\n                coords[v].append((i, j))\\n\\n    # 3) 중앙 블록 찾기 (가장 많은 픽셀)\\n    centreVal = max(coords.keys(), key=lambda k: len(coords[k]))\\n    centre_pixels = coords[centreVal]\\n    minr = min(i for i, j in centre_pixels)\\n    maxr = max(i for i, j in centre_pixels)\\n    minc = min(j for i, j in centre_pixels)\\n    maxc = max(j for i, j in centre_pixels)\\n    centre = ((minr + maxr)//2, (minc + maxc)//2)\\n\\n    lineVal = 8\\n    # 4) 주변 오브젝트마다 대각선 연결\\n    for v, cells in coords.items():\\n        if v == centreVal:\\n            continue\\n        rows = [i for i, j in cells]\\n        cols = [j for i, j in cells]\\n        minrv, maxrv = min(rows), max(rows)\\n        mincv, maxcv = min(cols), max(cols)\\n        # 중앙과 비교하여 연결 끝점 결정\\n        tr = minrv if (minrv+maxrv) < 2*centre[0] else maxrv\\n        tc = mincv if (mincv+maxcv) < 2*centre[1] else maxcv\\n        step_r = -1 if tr < centre[0] else 1\\n        step_c = -1 if tc < centre[1] else 1\\n        r, c = centre\\n        while True:\\n            r += step_r; c += step_c\\n            # 클러스터 경계에 닿으면 중단\\n            if ((step_r<0 and r<=minrv) or (step_r>0 and r>=maxrv)\\n                or (step_c<0 and c<=mincv) or (step_c>0 and c>=maxcv)):\\n                break\\n            if res[r][c] == 0:\\n                res[r][c] = lineVal\\n    return res\\n\\n# 실행 예시\\ninput_arr = \" + \\\nJSON.stringify_placeholder(\"task[0].input\") + \"\\n\" + \\\n`output = transform(input_arr)\\nprint(output)`\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,6,0,0,0,0],\n        [0,0,5,5,5,0,0,0,0,0,6,6,6,0,0],\n        [0,0,5,0,0,0,0,0,0,0,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,7,0,0,0,0,0,0,0,8,0,0,0,0],\n        [0,0,7,7,7,0,0,0,0,8,8,8,0,0,0],\n        [0,0,7,0,0,0,0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,6,0,0,0,0],\n        [0,0,5,5,5,0,0,0,0,0,6,6,6,0,0],\n        [0,0,5,0,0,8,0,0,8,0,6,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,9,9,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,8,0,0,8,0,0,0,0,0,0],\n        [0,0,7,0,0,0,0,0,0,0,8,0,0,0,0],\n        [0,0,7,7,7,0,0,0,0,8,8,8,0,0,0],\n        [0,0,7,0,0,0,0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef transform(arr):\\n    from collections import defaultdict\\n    h, w = len(arr), len(arr[0])\\n    res = [row[:] for row in arr]\\n    coords = defaultdict(list)\\n    for i in range(h):\\n        for j in range(w):\\n            v = arr[i][j]\\n            if v != 0:\\n                coords[v].append((i,j))\\n    # 중심 블록: 픽셀 수 최다\\n    centreVal = max(coords, key=lambda k: len(coords[k]))\\n    cels = coords[centreVal]\\n    minr = min(i for i,j in cels); maxr = max(i for i,j in cels)\\n    minc = min(j for i,j in cels); maxc = max(j for i,j in cels)\\n    centre = ((minr+maxr)//2, (minc+maxc)//2)\\n    lineVal = 8\\n    for v, cells in coords.items():\\n        if v == centreVal: continue\\n        rows = [i for i,j in cells]; cols = [j for i,j in cells]\\n        minrv, maxrv = min(rows), max(rows)\\n        mincv, maxcv = min(cols), max(cols)\\n        tr = minrv if (minrv+maxrv) < 2*centre[0] else maxrv\\n        tc = mincv if (mincv+maxcv) < 2*centre[1] else maxcv\\n        step_r = -1 if tr < centre[0] else 1\\n        step_c = -1 if tc < centre[1] else 1\\n        r, c = centre\\n        while True:\\n            r += step_r; c += step_c\\n            if ((step_r<0 and r<=minrv) or (step_r>0 and r>=maxrv)\\n                or (step_c<0 and c<=mincv) or (step_c>0 and c>=maxcv)):\\n                break\\n            if res[r][c] == 0:\\n                res[r][c] = lineVal\\n    return res\\n\\n# 실행 예시\\ninput_arr = \" + \\\nJSON.stringify_placeholder(\"task[1].input\") + \"\\n\" + \\\n`output = transform(input_arr)\\nprint(output)`\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4709cdfe-e8d5-49a8-88cf-33096f80c851.json",
    "uuid": "4709cdfe-e8d5-49a8-88cf-33096f80c851",
    "created": "2025-04-28 22:35:26",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [5,5,5,0,0,0,0,0,0,0,0,6],\n        [5,5,5,0,0,0,0,0,0,0,6,0],\n        [0,0,0,0,0,2,0,0,0,0,6,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0,0],\n        [2,1,1,1,1,1,1,1,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0,0,0,0],\n        [0,0,1,1,1,1,1,1,0,2,0,0],\n        [0,0,8,8,8,8,8,8,8,8,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [5,5,5,0,0,0,0,0,0,0,0,6],\n        [5,5,5,0,0,0,0,0,0,0,6,0],\n        [0,0,0,0,0,0,0,0,0,0,6,0],\n        [0,0,0,0,0,3,1,0,0,0,0,0],\n        [0,0,0,0,3,3,3,1,1,0,0,0],\n        [0,1,1,1,1,1,1,1,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0,0,0,0],\n        [0,0,1,1,1,1,1,1,0,0,0,0],\n        [0,0,8,8,8,8,8,8,8,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # Count markers (2)\\n    n = sum(cell==2 for row in grid for cell in row)\\n    # Replace all 2→0\\n    res = [[0 if cell==2 else cell for cell in row] for row in grid]\\n    # Fill first n ones with 3 in row-major order\\n    cnt = 0\\n    for i in range(len(res)):\\n        for j in range(len(res[0])):\\n            if res[i][j] == 1 and cnt < n:\\n                res[i][j] = 3\\n                cnt += 1\\n    return res\\n\\n# Example usage:\\n# output = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [5,5,5,0,0,2,0,0,0,0,0],\n        [5,5,5,0,2,0,0,2,0,0,0],\n        [0,0,0,0,1,1,2,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [2,0,1,1,1,1,1,1,1,8,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,1,1,2,2,1,1,1,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,6,6]\n      ],\n      \"output\": [\n        [5,5,5,0,0,0,0,0,0,0,0],\n        [5,5,5,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0,0],\n        [0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,1,1,1,1,1,1,1,8,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,1,1,0,0,1,1,1,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,6,6]\n      ],\n      \"code\": \"def transform(grid):\\n    n = sum(cell==2 for row in grid for cell in row)\\n    res = [[0 if cell==2 else cell for cell in row] for row in grid]\\n    cnt = 0\\n    for i in range(len(res)):\\n        for j in range(len(res[0])):\\n            if res[i][j] == 1 and cnt < n:\\n                res[i][j] = 3\\n                cnt += 1\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [8,2,8,0,8,0,8,0,8,0,8,0,8],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,7,0,7,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,1,1,2,1,1,1,0,0],\n        [0,0,0,0,0,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,1,1,1,1,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [8,0,8,0,8,0,8,0,8,0,8,0,8],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,7,0,7,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,3,1,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,1,1,0,1,1,1,0,0],\n        [0,0,0,0,0,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,1,1,1,1,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = sum(cell==2 for row in grid for cell in row)\\n    res = [[0 if cell==2 else cell for cell in row] for row in grid]\\n    cnt = 0\\n    for i in range(len(res)):\\n        for j in range(len(res[0])):\\n            if res[i][j] == 1 and cnt < n:\\n                res[i][j] = 3\\n                cnt += 1\\n    return res\"\n    },\n    {\n      \"input\": [\n        [8,0,8,0,8,0,8,0,8,2],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,2,1,1,1,0,0],\n        [1,1,1,1,1,1,1,1,0,0],\n        [0,1,1,2,1,1,1,1,1,1],\n        [0,0,1,1,1,1,1,1,1,0],\n        [7,7,7,0,0,0,0,0,0,0],\n        [7,7,7,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [8,0,8,0,8,0,8,0,8,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,0,1,1,1,0,0],\n        [1,1,1,1,1,1,1,1,0,0],\n        [0,1,1,0,1,1,1,1,1,1],\n        [0,0,1,1,1,1,1,1,1,0],\n        [7,7,7,0,0,0,0,0,0,0],\n        [7,7,7,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = sum(cell==2 for row in grid for cell in row)\\n    res = [[0 if cell==2 else cell for cell in row] for row in grid]\\n    cnt = 0\\n    for i in range(len(res)):\\n        for j in range(len(res[0])):\\n            if res[i][j] == 1 and cnt < n:\\n                res[i][j] = 3\\n                cnt += 1\\n    return res\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4e99f039-72e1-420b-b9a0-5808a533bb0e.json",
    "uuid": "4e99f039-72e1-420b-b9a0-5808a533bb0e",
    "created": "2025-04-28 22:36:24",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,3,0,0,3,4,0,0,4,5,0,0,5,6,0],\n        [0,0,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6],\n        [0,0,2,0,0,2,3,0,0,3,4,0,0,4,5,0,0,5,6,0],\n        [0,0,2,0,0,2,3,0,0,3,4,0,0,4,5,0,0,5,6,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid, dx=4, dy=0, n=4):\\\\n    H, W = len(grid), len(grid[0])\\\\n    out = [row[:] for row in grid]\\\\n    for k in range(1, n+1):\\\\n        val = 2 + k\\\\n        for r in range(H):\\\\n            for c in range(W):\\\\n                if grid[r][c] == 2:\\\\n                    rr, cc = r + dy*k, c + dx*k\\\\n                    if 0 <= rr < H and 0 <= cc < W and out[rr][cc] < val:\\\\n                        out[rr][cc] = val\\\\n    return out\\\\n# output = transform(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,0,0,3,3,0,0,4,4,0,0,5,5,0,0,6,6],\n        [0,0,0,2,2,0,0,3,3,0,0,4,4,0,0,5,5,0,0,6,0],\n        [0,0,0,0,2,2,0,0,3,3,0,0,4,4,0,0,5,5,0,0],\n        [0,0,0,0,0,2,2,0,0,3,3,0,0,4,4,0,0,5,5,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid, dx=4, dy=0, n=4):\\\\n    H, W = len(grid), len(grid[0])\\\\n    out = [row[:] for row in grid]\\\\n    for k in range(1, n+1):\\\\n        val = 2 + k\\\\n        for r in range(H):\\\\n            for c in range(W):\\\\n                if grid[r][c] == 2:\\\\n                    rr, cc = r + dy*k, c + dx*k\\\\n                    if 0 <= rr < H and 0 <= cc < W and out[rr][cc] < val:\\\\n                        out[rr][cc] = val\\\\n    return out\\\\n# output = transform(input)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4f4d9656-4d6f-48b1-9a1d-bddadd56a277.json",
    "uuid": "4f4d9656-4d6f-48b1-9a1d-bddadd56a277",
    "created": "2025-04-28 22:36:51",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,3,0,0,2,0,2,0,0,3,0],\n        [0,3,0,0,4,0,5,0,0,3,0],\n        [0,3,0,0,4,0,5,0,0,3,0],\n        [0,3,0,0,4,0,5,0,0,3,0],\n        [0,3,0,0,4,0,5,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [4,4,4,4,2,0,2,5,5,5,5],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"# Task A: shutter folding\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,3,3,3,3,3,3,3,3,3,0],\\n    [0,3,0,0,0,0,0,0,0,3,0],\\n    [0,3,0,0,2,0,2,0,0,3,0],\\n    [0,3,0,0,4,0,5,0,0,3,0],\\n    [0,3,0,0,4,0,5,0,0,3,0],\\n    [0,3,0,0,4,0,5,0,0,3,0],\\n    [0,3,0,0,4,0,5,0,0,3,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nrows, cols = len(grid), len(grid[0])\\nout = [row[:] for row in grid]\\npivots = [(r,c) for r in range(rows) for c in range(cols) if grid[r][c]==2]\\nfor pr, pc in pivots:\\n    seg_val = 4 if pc < cols//2 else 5\\n    seg = []\\n    r = pr + 1\\n    while r < rows and grid[r][pc] == seg_val:\\n        seg.append(r)\\n        r += 1\\n    for rr in seg:\\n        out[rr][pc] = 0\\n    if seg_val == 4:\\n        for i in range(len(seg)):\\n            out[pr][pc-1-i] = seg_val\\n    else:\\n        for i in range(len(seg)):\\n            out[pr][pc+1+i] = seg_val\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,7,7,7,7,7,7,7,7,7,0],\n        [0,7,0,0,0,0,0,0,0,7,0],\n        [0,7,0,0,0,0,0,0,0,7,0],\n        [0,7,0,0,2,0,2,0,0,7,0],\n        [0,7,0,0,4,0,5,0,0,7,0],\n        [0,7,0,0,4,0,5,0,0,7,0],\n        [0,7,0,0,4,0,5,0,0,7,0],\n        [0,7,7,7,7,7,7,7,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,7,7,7,4,7,5,7,7,7,0],\n        [0,7,0,0,4,0,5,0,0,7,0],\n        [0,7,0,0,4,0,5,0,0,7,0],\n        [0,7,0,0,2,0,2,0,0,7,0],\n        [0,7,0,0,0,0,0,0,0,7,0],\n        [0,7,0,0,0,0,0,0,0,7,0],\n        [0,7,0,0,0,0,0,0,0,7,0],\n        [0,7,7,7,7,7,7,7,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"# Task B: book pages unfold\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,7,7,7,7,7,7,7,7,7,0],\\n    [0,7,0,0,0,0,0,0,0,7,0],\\n    [0,7,0,0,0,0,0,0,0,7,0],\\n    [0,7,0,0,2,0,2,0,0,7,0],\\n    [0,7,0,0,4,0,5,0,0,7,0],\\n    [0,7,0,0,4,0,5,0,0,7,0],\\n    [0,7,0,0,4,0,5,0,0,7,0],\\n    [0,7,7,7,7,7,7,7,7,7,0],\\n    [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nrows, cols = len(grid), len(grid[0])\\nout = [row[:] for row in grid]\\npivots = [(5,4),(5,6)]\\nfor pr, pc in pivots:\\n    seg_val = grid[pr+1][pc]\\n    seg = []\\n    r = pr+1\\n    while r < rows and grid[r][pc] == seg_val:\\n        seg.append(r)\\n        r += 1\\n    for rr in seg:\\n        out[rr][pc] = 0\\n    for i in range(len(seg)):\\n        out[pr-1-i][pc] = seg_val\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,2,4,0,0,0,0,0,0,0,9],\n        [9,0,4,0,0,0,0,0,0,0,9],\n        [9,0,4,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,2,4,4,4,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"# Task C: door hinge open\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [9,9,9,9,9,9,9,9,9,9,9],\\n    [9,0,0,0,0,0,0,0,0,0,9],\\n    [9,0,0,0,0,0,0,0,0,0,9],\\n    [9,2,4,0,0,0,0,0,0,0,9],\\n    [9,0,4,0,0,0,0,0,0,0,9],\\n    [9,0,4,0,0,0,0,0,0,0,9],\\n    [9,0,0,0,0,0,0,0,0,0,9],\\n    [9,9,9,9,9,9,9,9,9,9,9],\\n    [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nrows, cols = len(grid), len(grid[0])\\nout = [row[:] for row in grid]\\n# find pivot\\nfor r in range(rows):\\n    for c in range(cols):\\n        if grid[r][c] == 2:\\n            pr, pc = r, c\\n# collect vertical door segment at column pc+1\\nseg_val = grid[pr][pc+1]\\nseg = []\\nr = pr\\nwhile r < rows and grid[r][pc+1] == seg_val:\\n    seg.append(r)\\n    r += 1\\nfor rr in seg:\\n    out[rr][pc+1] = 0\\n# rotate clockwise to the right\\nfor i in range(len(seg)):\\n    out[pr][pc+1+i] = seg_val\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,2,5,5,5,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"# Task D: seesaw tilt\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,4,4,4,2,5,5,5,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nrows, cols = len(grid), len(grid[0])\\nout = [row[:] for row in grid]\\n# find pivot\\nfor r in range(rows):\\n    for c in range(cols):\\n        if grid[r][c] == 2:\\n            pr, pc = r, c\\n# collect left beam\\nsegL = []\\nc = pc-1\\nwhile c >= 0 and grid[pr][c] == 4:\\n    segL.append(c)\\n    c -= 1\\n# collect right beam\\nsegR = []\\nc = pc+1\\nwhile c < cols and grid[pr][c] == 5:\\n    segR.append(c)\\n    c += 1\\n# remove beams\\nfor c in segL:\\n    out[pr][c] = 0\\nfor c in segR:\\n    out[pr][c] = 0\\n# rotate left up (CCW)\\nfor i in range(len(segL)):\\n    out[pr-1-i][pc] = 4\\n# rotate right down (CW)\\nfor i in range(len(segR)):\\n    out[pr+1+i][pc] = 5\\nprint(out)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "51ded2c8-8d6a-4480-8e09-9bf8f39e101f.json",
    "uuid": "51ded2c8-8d6a-4480-8e09-9bf8f39e101f",
    "created": "2025-04-28 22:42:02",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,5,4,4,4,5,0,6,0,0,9,0],\n        [0,5,4,4,4,5,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0,0,0],\n        [0,8,8,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,5,4,4,4,5,0,6,0,0,9,0],\n        [0,5,4,4,4,5,0,0,0,0,9,0],\n        [0,0,7,7,7,7,7,0,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0,0,0],\n        [0,8,8,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# A 규칙: 사람(1) 팔을 머리 위로 올려 Y자, 머리 바로 위에 말풍선(7) 5칸 배치\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # 복사\\n    out = [row[:] for row in grid]\\n    # 방문 배열\\n    visited = [[False]*W for _ in range(H)]\\n    dirs = [(1,0),(0,1),(-1,0),(0,-1)]\\n    # 연결요소 별로 사람 그룹 찾기\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j]==1 and not visited[i][j]:\\n                # BFS로 하나의 사람 영역 수집\\n                queue = [(i,j)]\\n                visited[i][j]=True\\n                comp = [(i,j)]\\n                for x,y in queue:\\n                    for dx,dy in dirs:\\n                        nx,ny = x+dx, y+dy\\n                        if 0<=nx<H and 0<=ny<W and grid[nx][ny]==1 and not visited[nx][ny]:\\n                            visited[nx][ny]=True\\n                            queue.append((nx,ny))\\n                            comp.append((nx,ny))\\n                # 머리 = comp에서 최소 행\\n                head_r = min(r for r,c in comp)\\n                head_cols = [c for r,c in comp if r==head_r]\\n                # 보통 한 개의 머리, 그 위치\\n                c0 = head_cols[0]\\n                # 1) 머리 자리 아래(기존)에서 팔과 머리, 가슴, 다리 제거\\n                for r,c in comp:\\n                    out[r][c] = 0\\n                # 2) Y자 팔: 머리 위치로 옮김\\n                out[head_r][c0-1] = 1\\n                out[head_r][c0+1] = 1\\n                # 3) 머리는 한 칸 아래\\n                out[head_r+1][c0] = 1\\n                # 4) 가슴, 다리 등 원본 comp의 상대적 위치는 아래로 1만큼 이동\\n                for r,c in comp:\\n                    if r>head_r:  # 머리 바로 아래 위치부터\\n                        dr = r - head_r\\n                        out[head_r+dr+1][c] = 1\\n                # 5) 말풍선: 머리 바로 위 행에 폭 5\\n                br = head_r-1\\n                for dc in range(-2,3):\\n                    out[br][c0+dc] = 7\\n    return out\\n```\\n    \"\n    },\n    {\n      \"input\": [\n        [6,0,9,9,9,0,0,0,0,0,0,0],\n        [0,0,9,9,9,0,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,1,1,1,0,0,1,1,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,0,3,3,0,0,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [6,0,9,9,9,0,0,0,0,0,0,0],\n        [0,0,9,9,9,0,0,0,0,8,0,0],\n        [0,0,7,7,7,7,7,7,7,7,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,1,1,1,0,1,1,1,0,0],\n        [0,0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,0,3,3,0,0,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# 위와 동일한 transform(grid) 함수를 사용합니다.\\n# (task 2도 A 규칙 그대로이므로, 동일한 코드로 처리할 수 있습니다.)\\n\\nout_grid = transform(input_grid)\\n```\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0,0,0],\n        [0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,2,0,0,0],\n        [0,2,2,2,2,2,2,2,2,0,0,0],\n        [0,0,3,3,0,0,3,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,8,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [9,9,9,9,9,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0,0,0,0],\n        [7,7,7,7,7,7,7,7,7,7,7,0],\n        [0,1,0,1,0,1,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0,0,0],\n        [0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,2,2,2,2,2,2,2,2,0,0,0],\n        [0,2,2,2,2,2,2,2,2,0,0,0],\n        [0,0,3,3,0,0,3,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,8,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# 동일한 transform(grid) 함수를 호출하여 처리합니다.\\nout_grid = transform(input_grid)\\n```\"\n    },\n    {\n      \"input\": [\n        [6,0,0,0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,4,4,4,5,0,0,0,0,0],\n        [0,0,5,4,4,4,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,8,8,8,0,0,0,0]\n      ],\n      \"output\": [\n        [6,0,0,0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,7,7,7,7,7,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,8,8,8,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# 동일한 transform(grid) 함수를 호출하여 처리합니다.\\nout_grid = transform(input_grid)\\n```\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "5b14fd00-46d6-43a8-90be-50f296ee0753.json",
    "uuid": "5b14fd00-46d6-43a8-90be-50f296ee0753",
    "created": "2025-04-28 22:33:04",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,0,0,0,0,0,9],\n        [0,0,0,1,0,0,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,0,0,5,0,0,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,9],\n        [0,0,0,8,0,0,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,0,0,4,0,0,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"code\": \"def solve(grid):\\n    # radius-2 ring positions (0-based)\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    # rotate clockwise by 1: new[i] = old[i-1]\\n    new_vals = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, new_vals):\\n        out[r][c] = v\\n    return out\\n\\n# Example usage:\\n# grid = <input array above>\\n# print(solve(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,8,9,2,0,0],\n        [0,7,9,0,9,3,0],\n        [0,0,6,9,4,0,0],\n        [0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,8,0,0,0],\n        [0,0,7,9,1,0,0],\n        [0,6,9,0,9,2,0],\n        [0,0,5,9,3,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    new_vals = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, new_vals):\\n        out[r][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,9,0,1,0,9,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,9,0,5,0,9,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,9,0,8,0,9,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,9,0,4,0,9,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    new_vals = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, new_vals):\\n        out[r][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [9,0,0,0,0,0,9],\n        [0,9,0,1,0,9,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,9,0,5,0,9,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,9],\n        [0,9,0,8,0,9,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,9,0,4,0,9,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    new_vals = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, new_vals):\\n        out[r][c] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "64846fbd-3653-4dc6-929f-548fa7c08432.json",
    "uuid": "64846fbd-3653-4dc6-929f-548fa7c08432",
    "created": "2025-04-28 22:30:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,3,2,3,0,0,0],\n        [0,0,3,2,1,2,3,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,3,2,3,0,0,0],\n        [0,0,3,2,1,2,3,0,0],\n        [0,0,0,3,2,3,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate180_or(grid):\\n    n=len(grid)\\n    m=len(grid[0])\\n    cx,cy=n//2,m//2\\n    out=[row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]!=0:\\n                ni,nj=2*cx-i,2*cy-j\\n                out[ni][nj]=max(out[ni][nj],grid[i][j])\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0,0,0,1,0],\n        [0,0,1,0,0,0,1,0,0,0,1,0,0],\n        [0,0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0,0,0,1,0],\n        [0,0,1,0,0,0,1,0,0,0,1,0,0],\n        [0,0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,1,0,0,0],\n        [0,0,1,0,0,0,1,0,0,0,1,0,0],\n        [0,1,0,0,0,0,1,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate180_or(grid):\\n    n=len(grid)\\n    m=len(grid[0])\\n    cx,cy=n//2,m//2\\n    out=[row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]!=0:\\n                ni,nj=2*cx-i,2*cy-j\\n                out[ni][nj]=max(out[ni][nj],grid[i][j])\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,0,1,1,1,0,0,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,1,1,0,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate180_or(grid):\\n    n=len(grid)\\n    m=len(grid[0])\\n    cx,cy=n//2,m//2\\n    out=[row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]!=0:\\n                ni,nj=2*cx-i,2*cy-j\\n                out[ni][nj]=max(out[ni][nj],grid[i][j])\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,1,1,1,1,1],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,1,1,1,1,1],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate180_or(grid):\\n    n=len(grid)\\n    m=len(grid[0])\\n    cx,cy=n//2,m//2\\n    out=[row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]!=0:\\n                ni,nj=2*cx-i,2*cy-j\\n                out[ni][nj]=max(out[ni][nj],grid[i][j])\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "6b8f7bc2-93ed-43b5-8c80-44c3c1bdd5dd.json",
    "uuid": "6b8f7bc2-93ed-43b5-8c80-44c3c1bdd5dd",
    "created": "2025-04-28 22:31:50",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,2,0,0,0,0,0],\n                [0,0,0,0,5,1,3,0,0,0,0],\n                [0,0,0,0,0,4,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,5,0,0,0,0,0,2,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,1,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,4,0,0,0,0,0,3,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid, delta):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    cx, cy = n//2, m//2\\n    out[cx][cy] = grid[cx][cy]\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v not in (0,1):\\n                dr, dc = i-cx, j-cy\\n                r0 = max(abs(dr), abs(dc))\\n                r = r0 + delta\\n                # cardinal to diagonal mapping\\n                if dr<0 and dc==0:\\n                    dr2, dc2 = -r, +r\\n                elif dr==0 and dc>0:\\n                    dr2, dc2 = +r, +r\\n                elif dr>0 and dc==0:\\n                    dr2, dc2 = +r, -r\\n                elif dr==0 and dc<0:\\n                    dr2, dc2 = -r, -r\\n                else:\\n                    continue\\n                out[cx+dr2][cy+dc2] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = \" + \" \" + str([\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,2,0,0,0,0,0],\\n                [0,0,0,0,5,1,3,0,0,0,0],\\n                [0,0,0,0,0,4,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0]\\n            ]) + \"\\nprint(transform(input_grid, 2))\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,2,0,0,0,0,0],\n                [0,0,0,0,5,1,3,0,0,0,0],\n                [0,0,0,0,0,4,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,2,0,0,0],\n                [0,0,5,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,1,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,3,0,0],\n                [0,0,0,4,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid, delta):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    cx, cy = n//2, m//2\\n    out[cx][cy] = grid[cx][cy]\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v not in (0,1):\\n                dr, dc = i-cx, j-cy\\n                r0 = max(abs(dr), abs(dc))\\n                r = r0 + delta\\n                if dr<0 and dc==0:\\n                    dr2, dc2 = -r, +r\\n                elif dr==0 and dc>0:\\n                    dr2, dc2 = +r, +r\\n                elif dr>0 and dc==0:\\n                    dr2, dc2 = +r, -r\\n                elif dr==0 and dc<0:\\n                    dr2, dc2 = -r, -r\\n                else:\\n                    continue\\n                out[cx+dr2][cy+dc2] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = \" + \" \" + str([\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,2,0,0,0,0,0],\\n                [0,0,0,0,5,1,3,0,0,0,0],\\n                [0,0,0,0,0,4,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0],\\n                [0,0,0,0,0,0,0,0,0,0,0]\\n            ]) + \"\\nprint(transform(input_grid, 1))\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "6c3f7820-7a95-4141-a499-6c9ba62673e4.json",
    "uuid": "6c3f7820-7a95-4141-a499-6c9ba62673e4",
    "created": "2025-04-28 22:20:37",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [3,1,2,4,5,6,7,8,1],\n        [2,3,5,6,7,8,1,4,2],\n        [4,5,3,7,8,1,2,6,4],\n        [6,7,8,3,1,2,4,5,6],\n        [5,6,7,8,3,4,7,8,5],\n        [8,4,1,2,5,3,6,7,8],\n        [7,8,6,5,4,1,3,2,7],\n        [1,2,4,6,5,7,1,3,2],\n        [2,1,5,4,6,7,8,1,3]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,0,0,0],\n        [0,9,0,0,0,0,0,0,0],\n        [0,0,9,0,0,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,9]\n      ],\n      \"code\": \"def transform(grid):\\n    return [[9 if cell == 3 else 0 for cell in row] for row in grid]\"\n    },\n    {\n      \"input\": [\n        [3,6,6,4,5,7,2,8,1],\n        [1,3,7,2,8,4,6,5,1],\n        [2,4,3,6,1,8,7,2,5],\n        [8,5,1,3,2,4,6,7,2],\n        [4,7,2,5,3,6,8,1,4],\n        [7,2,8,1,4,3,5,6,7],\n        [5,1,4,8,6,2,3,7,5],\n        [2,8,5,7,1,4,6,3,2],\n        [6,4,7,2,8,5,1,6,3]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,0,0,0],\n        [0,9,0,0,0,0,0,0,0],\n        [0,0,9,0,0,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,9]\n      ],\n      \"code\": \"def transform(grid):\\n    return [[9 if cell == 3 else 0 for cell in row] for row in grid]\"\n    },\n    {\n      \"input\": [\n        [3,2,1,2,1,2,1,2,1],\n        [1,3,2,1,2,1,2,1,2],\n        [2,1,3,2,1,2,1,2,1],\n        [1,2,1,3,2,1,2,1,2],\n        [2,1,2,1,3,2,1,2,1],\n        [1,2,1,2,1,3,2,1,2],\n        [2,1,2,1,2,1,3,2,1],\n        [1,2,1,2,1,2,1,3,2],\n        [2,1,2,1,2,1,2,1,3]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,0,0,0],\n        [0,9,0,0,0,0,0,0,0],\n        [0,0,9,0,0,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,9]\n      ],\n      \"code\": \"def transform(grid):\\n    return [[9 if cell == 3 else 0 for cell in row] for row in grid]\"\n    },\n    {\n      \"input\": [\n        [3,4,5,6,7,4,5,6,7],\n        [4,3,6,7,4,5,6,7,4],\n        [5,6,3,4,5,6,7,4,5],\n        [6,7,4,3,6,7,4,5,6],\n        [7,4,5,6,3,4,5,6,7],\n        [4,5,6,7,4,3,6,7,4],\n        [5,6,7,4,5,6,3,4,5],\n        [6,7,4,5,6,7,4,3,6],\n        [7,4,5,6,7,4,5,6,3]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,0,0,0],\n        [0,9,0,0,0,0,0,0,0],\n        [0,0,9,0,0,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,9]\n      ],\n      \"code\": \"def transform(grid):\\n    return [[9 if cell == 3 else 0 for cell in row] for row in grid]\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "5193c6f0-e0da-471b-b0ca-ee27f7555eb0.json",
    "uuid": "5193c6f0-e0da-471b-b0ca-ee27f7555eb0",
    "created": "2025-04-28 22:33:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,3,0,0,5,0,0,0,0,0,0,0,4,0,0],\n        [0,0,3,0,0,5,0,0,6,6,0,0,0,4,0,0],\n        [3,3,3,0,0,0,6,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0],\n        [0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,3,0,0,5,0,0,0,0,0,0,0,4,0,0],\n        [0,0,3,0,0,5,0,0,6,6,0,0,0,4,0,0],\n        [3,3,3,0,0,0,6,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0],\n        [0,0,0,0,0,0,0,0,8,0,0,2,2,2,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    # 1인 좌표 수집\\n    ones = [(r,c) for r in range(R) for c in range(C) if grid[r][c]==1]\\n    # 중심 및 맨해튼 반지름 계산\\n    cr = sum(r for r,_ in ones)/len(ones)\\n    cc = sum(c for _,c in ones)/len(ones)\\n    rmax = max(abs(r-cr)+abs(c-cc) for r,c in ones)\\n    radius = int(rmax)\\n    # 막대가 있는 열 찾기\\n    bar_cols = sorted({c for r in range(R) for c in range(C) if grid[r][c]==2})\\n    # 복사 후 채우기\\n    out = [row[:] for row in grid]\\n    for c in bar_cols:\\n        for r in range(R-1, R-1-radius, -1):\\n            out[r][c] = 2\\n    return out\\n\\n# 사용 예\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,4,0,0,0,0,0,3,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,3,0,6,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,3,0,6,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,6,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,7,7,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,4,0,0,0,0,0,3,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,3,0,6,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,3,0,6,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,6,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,7,7,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    ones = [(r,c) for r in range(R) for c in range(C) if grid[r][c]==1]\\n    cr = sum(r for r,_ in ones)/len(ones)\\n    cc = sum(c for _,c in ones)/len(ones)\\n    rmax = max(abs(r-cr)+abs(c-cc) for r,c in ones)\\n    radius = int(rmax)\\n    bar_cols = sorted({c for r in range(R) for c in range(C) if grid[r][c]==2})\\n    out = [row[:] for row in grid]\\n    for c in bar_cols:\\n        for r in range(R-1, R-1-radius, -1):\\n            out[r][c] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,6,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,3,0,3,0,0,0,0,7,0,0,0,0],\n        [0,0,0,0,6,0,0,0,3,3,3,0,0,0,0,7,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,7,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,7,7,7,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,1,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,2,2,2,2],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2]\n      ],\n      \"output\": [\n        [0,0,0,0,6,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,3,0,3,0,0,0,0,7,0,0,0,0],\n        [0,0,0,0,6,0,0,0,3,3,3,0,0,0,0,7,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,7,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,7,7,7,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,1,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,2,2,2,2],\n        [0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,2,2,2,2],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    ones = [(r,c) for r in range(R) for c in range(C) if grid[r][c]==1]\\n    cr = sum(r for r,_ in ones)/len(ones)\\n    cc = sum(c for _,c in ones)/len(ones)\\n    rmax = max(abs(r-cr)+abs(c-cc) for r,c in ones)\\n    radius = int(rmax)\\n    bar_cols = sorted({c for r in range(R) for c in range(C) if grid[r][c]==2})\\n    out = [row[:] for row in grid]\\n    for c in bar_cols:\\n        for r in range(R-1, R-1-radius, -1):\\n            out[r][c] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,3,3,3,0,0,0,0,4,0,0,0,0],\n        [0,0,0,0,0,3,0,3,0,5,0,0,4,0,8,0,0],\n        [0,0,0,0,0,3,3,3,0,0,0,0,4,0,8,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,2,0,2,0,7,7,0],\n        [0,6,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,3,3,3,0,2,2,2,4,0,0,0,0],\n        [0,0,0,0,0,3,0,3,0,5,0,0,4,0,8,0,0],\n        [0,0,0,0,0,3,3,3,0,0,0,0,4,0,8,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,2,0,2,0,7,7,0],\n        [0,6,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    ones = [(r,c) for r in range(R) for c in range(C) if grid[r][c]==1]\\n    cr = sum(r for r,_ in ones)/len(ones)\\n    cc = sum(c for _,c in ones)/len(ones)\\n    rmax = max(abs(r-cr)+abs(c-cc) for r,c in ones)\\n    radius = int(rmax)\\n    bar_cols = sorted({c for r in range(R) for c in range(C) if grid[r][c]==2})\\n    out = [row[:] for row in grid]\\n    for c in bar_cols:\\n        for r in range(R-1, R-1-radius, -1):\\n            out[r][c] = 2\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "7b98b11f-afa0-4ca4-abef-af35d1f06560.json",
    "uuid": "7b98b11f-afa0-4ca4-abef-af35d1f06560",
    "created": "2025-04-28 22:36:10",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,8,9,2,0,0],\n        [0,7,9,9,9,3,0],\n        [0,0,6,9,4,0,0],\n        [0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,8,0,0,0],\n        [0,0,7,9,1,0,0],\n        [0,6,9,9,9,2,0],\n        [0,0,5,9,3,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    # 맨해튼 거리=2인 링의 좌표 순서\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    # 한 칸 시계방향 회전: 마지막 값을 맨 앞으로\\n    shifted = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, shifted):\\n        out[r][c] = v\\n    return out\\n\\n# 예시 실행\\nres = solve(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,0,0,5,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,8,0,0,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,0,0,4,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    shifted = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, shifted):\\n        out[r][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [9,0,0,0,0,0,9],\n        [0,0,0,1,0,0,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,0,0,5,0,0,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"output\": [\n        [9,0,0,0,0,0,9],\n        [0,0,0,8,0,0,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,0,0,4,0,0,0],\n        [9,0,0,0,0,0,9]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    shifted = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, shifted):\\n        out[r][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [9,9,0,0,0,0,0],\n        [9,9,0,1,0,0,0],\n        [0,0,8,0,2,0,0],\n        [0,7,0,0,0,3,0],\n        [0,0,6,0,4,0,0],\n        [0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [9,9,0,0,0,0,0],\n        [9,9,0,8,0,0,0],\n        [0,0,7,0,1,0,0],\n        [0,6,0,0,0,2,0],\n        [0,0,5,0,3,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    shifted = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, shifted):\\n        out[r][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,8,9,2,0,0],\n        [0,7,0,9,0,3,0],\n        [0,0,6,9,4,0,0],\n        [0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,8,0,0,0],\n        [0,0,7,9,1,0,0],\n        [0,6,0,9,0,2,0],\n        [0,0,5,9,3,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    ring = [(1,3),(2,4),(3,5),(4,4),(5,3),(4,2),(3,1),(2,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    shifted = vals[-1:] + vals[:-1]\\n    for (r,c),v in zip(ring, shifted):\\n        out[r][c] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "83a2bae8-22f9-4256-add1-db4eecf8eaa0.json",
    "uuid": "83a2bae8-22f9-4256-add1-db4eecf8eaa0",
    "created": "2025-04-28 22:36:31",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,2,2,2,2,2,2,2,2,2,0,0,1],\n        [1,0,0,0,2,2,2,2,2,2,2,2,2,0,0,1],\n        [1,0,0,0,2,2,2,2,2,2,2,2,2,0,0,1],\n        [1,0,0,0,2,1,1,1,1,1,2,2,2,0,0,1],\n        [1,0,0,0,2,1,2,2,2,1,0,0,2,0,0,1],\n        [1,0,0,0,2,1,2,2,2,1,0,0,2,0,0,1],\n        [1,0,0,0,2,1,1,1,1,1,2,2,2,0,0,1],\n        [1,0,0,0,2,2,2,2,2,2,2,2,2,0,0,1],\n        [1,0,0,0,2,2,2,2,2,2,2,2,2,0,0,1],\n        [1,0,0,0,2,1,2,2,2,1,0,0,2,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"import copy\\n\\ndef get_components(grid):\\n    h,w=len(grid),len(grid[0])\\n    vis=[[False]*w for _ in range(h)]\\n    comps=[]\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j]==1 and not vis[i][j]:\\n                pts=[]\\n                stack=[(i,j)]\\n                vis[i][j]=True\\n                while stack:\\n                    x,y=stack.pop()\\n                    pts.append((x,y))\\n                    for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                        nx,ny=x+dx,y+dy\\n                        if 0<=nx<h and 0<=ny<w and not vis[nx][ny] and grid[nx][ny]==1:\\n                            vis[nx][ny]=True\\n                            stack.append((nx,ny))\\n                comps.append(pts)\\n    return comps\\n\\ndef subdivide(grid):\\n    h,w=len(grid),len(grid[0])\\n    out=copy.deepcopy(grid)\\n    for comp in get_components(grid):\\n        is_,js=zip(*comp)\\n        min_i,max_i=min(is_),max(is_)\\n        min_j,max_j=min(js),max(js)\\n        H=max_i-min_i+1; W=max_j-min_j+1\\n        rows=[min_i+H//4, min_i+H//2, min_i+3*H//4]\\n        cols=[min_j+W//4, min_j+W//2, min_j+3*W//4]\\n        for r in rows:\\n            for c in range(min_j, max_j+1):\\n                if out[r][c]==0:\\n                    out[r][c]=2\\n        for c in cols:\\n            for r in range(min_i, max_i+1):\\n                if out[r][c]==0:\\n                    out[r][c]=2\\n    return out\\n\\ngrid = \" + str([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]) + \"\\nres = subdivide(grid)\\nprint(res)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,2,1,0,2,0,0,0,0,0,0,0],\n        [1,2,2,2,2,2,1,2,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef get_components(grid):\\n    h,w=len(grid),len(grid[0])\\n    vis=[[False]*w for _ in range(h)]\\n    comps=[]\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j]==1 and not vis[i][j]:\\n                pts=[]\\n                stack=[(i,j)]\\n                vis[i][j]=True\\n                while stack:\\n                    x,y=stack.pop()\\n                    pts.append((x,y))\\n                    for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                        nx,ny=x+dx,y+dy\\n                        if 0<=nx<h and 0<=ny<w and not vis[nx][ny] and grid[nx][ny]==1:\\n                            vis[nx][ny]=True\\n                            stack.append((nx,ny))\\n                comps.append(pts)\\n    return comps\\n\\ndef subdivide(grid):\\n    h,w=len(grid),len(grid[0])\\n    out=copy.deepcopy(grid)\\n    for comp in get_components(grid):\\n        is_,js=zip(*comp)\\n        mi,Ma=min(is_),max(is_)\\n        mj,Mj=min(js),max(js)\\n        H, W = Ma-mi+1, Mj-mj+1\\n        rows=[mi+H//4, mi+H//2, mi+3*H//4]\\n        cols=[mj+W//4, mj+W//2, mj+3*W//4]\\n        for r in rows:\\n            for c in range(mj, Mj+1):\\n                if out[r][c]==0: out[r][c]=2\\n        for c in cols:\\n            for r in range(mi, Ma+1):\\n                if out[r][c]==0: out[r][c]=2\\n    return out\\n\\ngrid = \" + str([\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    ]) + \"\\nres = subdivide(grid)\\nprint(res)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1]\n      ],\n      \"output\": [\n        [0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0,2,2,2,2,0,0,1]\n      ],\n      \"code\": \"import copy\\n\\ndef get_components(grid):\\n    h,w=len(grid),len(grid[0])\\n    vis=[[False]*w for _ in range(h)]\\n    comps=[]\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j]==1 and not vis[i][j]:\\n                pts=[]\\n                stack=[(i,j)]\\n                vis[i][j]=True\\n                while stack:\\n                    x,y=stack.pop()\\n                    pts.append((x,y))\\n                    for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                        nx,ny=x+dx,y+dy\\n                        if 0<=nx<h and 0<=ny<w and not vis[nx][ny] and grid[nx][ny]==1:\\n                            vis[nx][ny]=True\\n                            stack.append((nx,ny))\\n                comps.append(pts)\\n    return comps\\n\\ndef subdivide(grid):\\n    h,w=len(grid),len(grid[0])\\n    out=copy.deepcopy(grid)\\n    for comp in get_components(grid):\\n        is_,js=zip(*comp)\\n        mi,Ma=min(is_),max(is_)\\n        mj,Mj=min(js),max(js)\\n        H, W = Ma-mi+1, Mj-mj+1\\n        rows=[mi+H//4, mi+H//2, mi+3*H//4]\\n        cols=[mj+W//4, mj+W//2, mj+3*W//4]\\n        for r in rows:\\n            for c in range(mj, Mj+1):\\n                if out[r][c]==0: out[r][c]=2\\n        for c in cols:\\n            for r in range(mi, Ma+1):\\n                if out[r][c]==0: out[r][c]=2\\n    return out\\n\\ngrid = \" + str([\n        [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],  \n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],  \n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],  \n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],  \n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],  \n        [1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1]\n    ]) + \"\\nres = subdivide(grid)\\nprint(res)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "955b77eb-87a0-4b46-b8b1-bf3ca3145c6d.json",
    "uuid": "955b77eb-87a0-4b46-b8b1-bf3ca3145c6d",
    "created": "2025-04-28 22:37:01",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [5,0,5,0],\n        [0,5,0,5],\n        [5,0,5,0]\n      ],\n      \"output\": [\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,5,0,5,0,5],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,0,0,0,5,0,5,0],\n        [0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,5,0,5,0,5],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,0,0,0,5,0,5,0],\n        [0,0,0,0,0,5,0,5,0,5,0,0,0,0,0,5,0,5,0,5],\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [5,0,5,0,5,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_star(grid):\\n    # 5×5 별 모양 패턴\\n    P = [\\n        [5,0,5,0,5],\\n        [0,5,0,5,0],\\n        [5,0,5,0,5],\\n        [0,5,0,5,0],\\n        [5,0,5,0,5]\\n    ]\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*(W*5) for _ in range(H*5)]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 5:\\n                for i in range(5):\\n                    for j in range(5):\\n                        out[r*5 + i][c*5 + j] = P[i][j]\\n    return out\\n\\n# 예시 실행\\n# print(transform_star(input))\"\n    },\n    {\n      \"input\": [\n        [0,5,0,5],\n        [5,0,5,0],\n        [0,5,0,5]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,5,0,5,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,5,0,5,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_ring(grid):\\n    # 5×5 링 패턴\\n    P = [\\n        [0,0,0,0,0],\\n        [0,5,5,5,0],\\n        [0,5,0,5,0],\\n        [0,5,5,5,0],\\n        [0,0,0,0,0]\\n    ]\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*(W*5) for _ in range(H*5)]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 5:\\n                for i in range(5):\\n                    for j in range(5):\\n                        out[r*5 + i][c*5 + j] = P[i][j]\\n    return out\\n\\n# print(transform_ring(input))\"\n    },\n    {\n      \"input\": [\n        [5,0,0,5],\n        [0,5,5,0],\n        [5,0,0,5]\n      ],\n      \"output\": [\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0],\n        [5,5,5,5,5,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,5,5,5,5,5,0,0,5,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,5,5,5,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0],\n        [5,5,5,5,5,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_diamond(grid):\\n    # 5×5 마름모 패턴\\n    P = [\\n        [0,0,5,0,0],\\n        [0,5,5,5,0],\\n        [5,5,5,5,5],\\n        [0,5,5,5,0],\\n        [0,0,5,0,0]\\n    ]\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*(W*5) for _ in range(H*5)]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 5:\\n                for i in range(5):\\n                    for j in range(5):\\n                        out[r*5 + i][c*5 + j] = P[i][j]\\n    return out\\n\\n# print(transform_diamond(input))\"\n    },\n    {\n      \"input\": [\n        [5,0,0,0],\n        [0,5,0,0],\n        [0,0,5,0]\n      ],\n      \"output\": [\n        [5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,5,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_x(grid):\\n    # 5×5 X자 패턴\\n    P = [\\n        [5,0,0,0,5],\\n        [0,5,0,5,0],\\n        [0,0,5,0,0],\\n        [0,5,0,5,0],\\n        [5,0,0,0,5]\\n    ]\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*(W*5) for _ in range(H*5)]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 5:\\n                for i in range(5):\\n                    for j in range(5):\\n                        out[r*5 + i][c*5 + j] = P[i][j]\\n    return out\\n\\n# print(transform_x(input))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "7a351d77-5ec6-492b-947e-3fc47ff92aee.json",
    "uuid": "7a351d77-5ec6-492b-947e-3fc47ff92aee",
    "created": "2025-04-28 22:38:16",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [0,0,5,5,5,0,0,0,0,0,0,0,0,0],\n                [0,5,5,5,5,5,0,0,0,0,0,0,0,0],\n                [5,5,5,5,5,5,5,0,0,0,0,0,0,0],\n                [0,5,5,5,5,5,0,0,0,0,0,0,0,0],\n                [0,0,5,5,5,0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,5,0,0,8,0,0,0,0,0,0,0],\n                [0,0,5,5,5,8,0,8,0,0,0,0,0,0],\n                [0,5,5,5,5,5,0,0,8,0,0,0,0,0],\n                [5,5,5,8,5,5,5,0,0,8,0,0,0,0],\n                [0,5,5,5,5,5,0,0,0,0,8,0,0,0],\n                [0,0,5,5,5,0,0,0,0,0,0,8,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,8,0]\n            ],\n            \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    # find all cells of the moving cluster marked 5\\n    coords = [(r,c) for r in range(h) for c in range(w) if grid[r][c] == 5]\\n    # center = integer average of coordinates\\n    r0 = sum(r for r,c in coords) // len(coords)\\n    c0 = sum(c for r,c in coords) // len(coords)\\n    dr, dc = -1, 1\\n    out = [row[:] for row in grid]\\n    r, c = r0, c0\\n    out[r][c] = 8\\n    while True:\\n        nr, nc = r + dr, c + dc\\n        if not (0 <= nr < h and 0 <= nc < w):\\n            break\\n        if grid[nr][nc] == 2:\\n            dr = -dr\\n        elif grid[nr][nc] == 3:\\n            dc = -dc\\n        r, c = r + dr, c + dc\\n        if not (0 <= r < h and 0 <= c < w):\\n            break\\n        out[r][c] = 8\\n    return out\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [5,5,5,5,5,5,5,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,3,3,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,0,2,2,2,2,2,2,2,2,2,0],\n                [0,0,0,5,0,0,8,0,0,0,0,0,0,0],\n                [0,0,0,5,0,8,0,8,0,0,0,0,0,0],\n                [0,0,0,5,8,0,0,0,8,0,0,0,0,0],\n                [5,5,5,8,5,5,5,0,0,8,0,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,8,0,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,8,0,0],\n                [0,0,0,5,0,0,0,0,0,0,0,0,8,0]\n            ],\n            \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    coords = [(r,c) for r in range(h) for c in range(w) if grid[r][c] == 5]\\n    r0 = sum(r for r,c in coords) // len(coords)\\n    c0 = sum(c for r,c in coords) // len(coords)\\n    dr, dc = -1, 1\\n    out = [row[:] for row in grid]\\n    r, c = r0, c0\\n    out[r][c] = 8\\n    while True:\\n        nr, nc = r + dr, c + dc\\n        if not (0 <= nr < h and 0 <= nc < w):\\n            break\\n        if grid[nr][nc] == 2:\\n            dr = -dr\\n        elif grid[nr][nc] == 3:\\n            dc = -dc\\n        r, c = r + dr, c + dc\\n        if not (0 <= r < h and 0 <= c < w):\\n            break\\n        out[r][c] = 8\\n    return out\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "9ce39155-4e76-46b6-9920-0e56b92867be.json",
    "uuid": "9ce39155-4e76-46b6-9920-0e56b92867be",
    "created": "2025-04-28 22:35:50",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,2,1,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,4,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,1,0,0,0,0],\n        [0,0,0,3,3,3,1,1,0,0,0],\n        [0,0,3,3,4,3,1,1,1,0,0],\n        [0,0,3,3,3,3,1,1,2,0,0],\n        [0,0,3,3,3,1,1,1,1,0,0],\n        [0,0,3,3,3,3,1,1,0,0,0],\n        [0,0,3,3,3,3,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate90(grid):\\n    N = len(grid)\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            out[c][N-1-r] = grid[r][c]\\n    return out\\n\\n# 예시 사용법:\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,3,3,3,0,0,0,0],\n        [0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,2,1,1,1,1,1,0,0],\n        [0,0,0,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,2,3,3,3,0,0,0,0],\n        [0,0,1,1,3,3,3,3,0,0,0],\n        [0,0,1,1,3,3,3,3,4,0,0],\n        [0,0,1,1,3,3,3,3,0,0,0],\n        [0,0,1,1,3,3,3,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate90(grid):\\n    N = len(grid)\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            out[c][N-1-r] = grid[r][c]\\n    return out\\n\\n# 예시 사용법:\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,4,3,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,4,0,0,0,1,1,0,0,0],\n        [0,0,3,3,3,1,1,1,2,0,0],\n        [0,0,0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,0,0,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate90(grid):\\n    N = len(grid)\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            out[c][N-1-r] = grid[r][c]\\n    return out\\n\\n# 예시 사용법:\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,1,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0],\n        [0,0,1,1,1,1,1,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,0,0,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate90(grid):\\n    N = len(grid)\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            out[c][N-1-r] = grid[r][c]\\n    return out\\n\\n# 예시 사용법:\\n# result = rotate90(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a5566d80-e4a0-4ca8-9ae9-c384fed5f246.json",
    "uuid": "a5566d80-e4a0-4ca8-9ae9-c384fed5f246",
    "created": "2025-04-28 22:43:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,3,2,2,2,0,0,0,1],\n        [1,0,0,3,0,2,0,0,0,0,1],\n        [1,0,0,3,0,2,0,0,0,0,1],\n        [1,0,0,3,0,2,0,0,0,0,1],\n        [1,0,0,3,0,2,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,3,3,3,3,3,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,2,2,2,2,2,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    n = len(grid)\\n    center = n // 2\\n    # initialize output\\n    result = [[0]*n for _ in range(n)]\\n    # copy fixed grid lines (value=1)\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                result[i][j] = 1\\n    # rotate all values >1\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v > 1:\\n                new_i = center - (j - center)\\n                new_j = center + (i - center)\\n                result[new_i][new_j] = v\\n    return result\\n\\n# example usage:\\n# output = rotate_ccw(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,2,0,0,0,0,1],\n        [1,0,0,3,3,2,0,0,0,0,1],\n        [1,0,0,3,0,2,2,2,0,0,1],\n        [1,0,0,3,0,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,3,3,3,0,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,2,2,2,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    n = len(grid)\\n    center = n // 2\\n    result = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                result[i][j] = 1\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v > 1:\\n                new_i = center - (j - center)\\n                new_j = center + (i - center)\\n                result[new_i][new_j] = v\\n    return result\"\n    },\n    {\n      \"input\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,2,2,2,0,0,3,0,1],\n        [1,0,0,0,2,0,0,3,3,3,1],\n        [1,0,0,0,2,0,0,0,3,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,2,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [1,0,0,0,0,1,2,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,3,3,3,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    n = len(grid)\\n    center = n // 2\\n    result = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                result[i][j] = 1\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v > 1:\\n                new_i = center - (j - center)\\n                new_j = center + (i - center)\\n                result[new_i][new_j] = v\\n    return result\"\n    },\n    {\n      \"input\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,2,2,2,2,2,0,0,1],\n        [1,0,0,2,2,2,2,2,0,0,1],\n        [1,0,0,2,2,2,2,2,0,0,1],\n        [1,0,0,0,0,1,0,0,3,0,1],\n        [1,0,0,0,0,1,0,0,3,0,1],\n        [1,0,0,0,0,1,0,0,3,0,1],\n        [1,0,0,0,0,1,0,0,3,0,1],\n        [1,0,0,0,0,1,0,0,3,0,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [1,0,0,0,0,2,2,2,0,0,1],\n        [3,3,3,3,3,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1],\n        [1,0,0,0,0,1,0,0,0,0,1]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    n = len(grid)\\n    center = n // 2\\n    result = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                result[i][j] = 1\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v > 1:\\n                new_i = center - (j - center)\\n                new_j = center + (i - center)\\n                result[new_i][new_j] = v\\n    return result\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "ae8211fa-9ca0-4cb2-8b26-9c87a599ef00.json",
    "uuid": "ae8211fa-9ca0-4cb2-8b26-9c87a599ef00",
    "created": "2025-04-28 22:42:32",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,2,0,0,0,0],\n        [0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,1,1,1,0,0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,9,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,3,3,0,0,0],\n        [0,0,0,0,4,0,0,0,3,3,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,4,0,0,1,0,0,0,0,0],\n        [0,0,0,4,0,0,0,1,0,0,0,0,0],\n        [0,0,4,0,0,0,0,1,0,0,0,0,0],\n        [0,4,0,0,0,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,3,0,0,0,2,2,0,0,0],\n        [0,0,0,3,3,0,2,2,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_90_clockwise(grid):\\n    n, m = len(grid), len(grid[0])\\n    # find center position of 9\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 9:\\n                cx, cy = i, j\\n    # prepare output filled with 0\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 9\\n    # rotate each nonzero non-center cell\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v != 0 and v != 9:\\n                dr, dc = i - cx, j - cy\\n                ni, nj = cx + dc, cy - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# example\\ninput_grid = \" + str([\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,2,0,0,0,0],\n        [0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,1,1,1,0,0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,9,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,3,3,0,0,0],\n        [0,0,0,0,4,0,0,0,3,3,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n    ]) + \"\\nprint(rotate_90_clockwise(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,3,3,3,9,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,4,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,3,0,1,1,0],\n        [0,0,0,0,3,0,1,1,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,9,2,2,2,2],\n        [0,0,4,0,0,0,0,0,0],\n        [0,4,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_90_clockwise(grid):\\n    n, m = len(grid), len(grid[0])\\n    # find center position of 9\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 9:\\n                cx, cy = i, j\\n    # prepare output filled with 0\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 9\\n    # rotate each nonzero non-center cell\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v != 0 and v != 9:\\n                dr, dc = i - cx, j - cy\\n                ni, nj = cx + dc, cy - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# example\\ninput_grid = \" + str([\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,3,3,3,9,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,4,0,0]\n    ]) + \"\\nprint(rotate_90_clockwise(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "c7fb0329-3e1a-40a3-850e-5f5e75545572.json",
    "uuid": "c7fb0329-3e1a-40a3-850e-5f5e75545572",
    "created": "2025-04-28 22:36:41",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    # find all support pixels (value==1)\\n    pts = [(r,c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c]==1]\\n    pts.sort(key=lambda x:(x[1],x[0]))\\n    mid = len(pts)//2\\n    left, right = pts[:mid], pts[mid:]\\n    # topmost in each cluster\\n    p1 = min(left, key=lambda x:x[0])\\n    p2 = min(right, key=lambda x:x[0])\\n    H = 5  # fixed arc height\\n    for t in range(1, H+1):\\n        r = p1[0] - t\\n        c1 = p1[1] + (t-1)\\n        c2 = p2[1] - (t-1)\\n        grid[r][c1] = 2\\n        grid[r][c2] = 2\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    pts = [(r,c) for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c]==1]\\n    pts.sort(key=lambda x:(x[1],x[0]))\\n    mid = len(pts)//2; left, right = pts[:mid], pts[mid:]\\n    p1 = min(left, key=lambda x:x[0]); p2 = min(right, key=lambda x:x[0])\\n    H = 5\\n    for t in range(1, H+1):\\n        r = p1[0] - t\\n        c1 = p1[1] + (t-1); c2 = p2[1] - (t-1)\\n        grid[r][c1] = 2; grid[r][c2] = 2\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "cf4a8c0c-49a9-4fb6-8922-587d1bcaef69.json",
    "uuid": "cf4a8c0c-49a9-4fb6-8922-587d1bcaef69",
    "created": "2025-04-28 22:29:25",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,2,0,2,0,0],\n        [0,2,0,2,0,2,0],\n        [2,0,0,0,0,0,2],\n        [0,2,0,0,0,2,0],\n        [0,0,2,0,2,0,0],\n        [0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0],\n        [0,0,2,2,2,2,0],\n        [0,0,2,2,2,2,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid, out_rows, out_cols):\\n    # 1) 행-우선으로 비0 픽셀들을 추출\\n    vals = [v for row in grid for v in row if v != 0]\\n    # 2) 출력 배열 초기화\\n    out = [[0]*out_cols for _ in range(out_rows)]\\n    # 3) 중심 좌표\\n    r0, c0 = out_rows//2, out_cols//2\\n    # 4) 시계방향 4방향 (오른→아래→왼쪽→위)\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    d = 0; step = 1; r, c = r0, c0; idx = 0\\n    # 5) 첫 픽셀 배치\\n    out[r][c] = vals[idx]; idx += 1\\n    # 6) 나선형 배치 반복\\n    while idx < len(vals):\\n        for _ in range(2):\\n            for __ in range(step):\\n                if idx >= len(vals): break\\n                dr, dc = dirs[d]\\n                r += dr; c += dc\\n                out[r][c] = vals[idx]; idx += 1\\n            d = (d + 1) % 4\\n        step += 1\\n    return out\\n\\n# usage example:\\ngrid = [[0,0,2,0,2,0,0], [0,2,0,2,0,2,0], [2,0,0,0,0,0,2], [0,2,0,0,0,2,0], [0,0,2,0,2,0,0], [0,0,0,2,0,0,0], [0,0,0,0,0,0,0]]\\nout = solve(grid, 7, 7)\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,3,0,0,0],\n        [0,0,3,3,3,0,0],\n        [0,3,3,3,3,3,0],\n        [0,0,3,3,3,0,0],\n        [0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,0],\n        [0,0,3,3,3,3,0],\n        [0,0,3,3,3,3,0],\n        [0,0,0,0,0,3,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid, out_rows, out_cols):\\n    vals = [v for row in grid for v in row if v != 0]\\n    out = [[0]*out_cols for _ in range(out_rows)]\\n    r0, c0 = out_rows//2, out_cols//2\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    d = 0; step = 1; r, c = r0, c0; idx = 0\\n    out[r][c] = vals[idx]; idx += 1\\n    while idx < len(vals):\\n        for _ in range(2):\\n            for __ in range(step):\\n                if idx >= len(vals): break\\n                dr, dc = dirs[d]\\n                r += dr; c += dc\\n                out[r][c] = vals[idx]; idx += 1\\n            d = (d + 1) % 4\\n        step += 1\\n    return out\\n\\n# usage example:\\ngrid = [[0,0,0,0,0,0,0], [0,0,0,3,0,0,0], [0,0,3,3,3,0,0], [0,3,3,3,3,3,0], [0,0,3,3,3,0,0], [0,0,0,3,0,0,0], [0,0,0,0,0,0,0]]\\nout = solve(grid, 7, 7)\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [4,0,0,0,0,0,0,0,0,0],\n        [4,4,0,0,0,0,0,0,0,0],\n        [4,4,4,4,4,4,4,4,4,4],\n        [4,4,0,0,0,0,0,0,0,0],\n        [4,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,0],\n        [0,0,4,4,4,4,0],\n        [0,0,4,4,4,4,0],\n        [0,0,4,4,4,4,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid, out_rows, out_cols):\\n    vals = [v for row in grid for v in row if v != 0]\\n    out = [[0]*out_cols for _ in range(out_rows)]\\n    r0, c0 = out_rows//2, out_cols//2\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    d = 0; step = 1; r, c = r0, c0; idx = 0\\n    out[r][c] = vals[idx]; idx += 1\\n    while idx < len(vals):\\n        for _ in range(2):\\n            for __ in range(step):\\n                if idx >= len(vals): break\\n                dr, dc = dirs[d]\\n                r += dr; c += dc\\n                out[r][c] = vals[idx]; idx += 1\\n            d = (d + 1) % 4\\n        step += 1\\n    return out\\n\\n# usage example:\\ngrid = [[4,0,0,0,0,0,0,0,0,0], [4,4,0,0,0,0,0,0,0,0], [4,4,4,4,4,4,4,4,4,4], [4,4,0,0,0,0,0,0,0,0], [4,0,0,0,0,0,0,0,0,0]]\\nout = solve(grid, 7, 7)\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [5,5,5,5,5,5],\n        [0,0,0,0,0,5],\n        [0,0,0,0,5,5],\n        [0,0,0,5,5,0],\n        [0,0,5,5,0,0],\n        [5,5,5,5,5,5]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,5,5,5,5,0],\n        [0,5,5,5,5,5,0],\n        [0,5,5,5,5,5,0],\n        [0,5,5,5,5,5,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid, out_rows, out_cols):\\n    vals = [v for row in grid for v in row if v != 0]\\n    out = [[0]*out_cols for _ in range(out_rows)]\\n    r0, c0 = out_rows//2, out_cols//2\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    d = 0; step = 1; r, c = r0, c0; idx = 0\\n    out[r][c] = vals[idx]; idx += 1\\n    while idx < len(vals):\\n        for _ in range(2):\\n            for __ in range(step):\\n                if idx >= len(vals): break\\n                dr, dc = dirs[d]\\n                r += dr; c += dc\\n                out[r][c] = vals[idx]; idx += 1\\n            d = (d + 1) % 4\\n        step += 1\\n    return out\\n\\n# usage example:\\ngrid = [[5,5,5,5,5,5], [0,0,0,0,0,5], [0,0,0,0,5,5], [0,0,0,5,5,0], [0,0,5,5,0,0], [5,5,5,5,5,5]]\\nout = solve(grid, 7, 7)\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [6,0,0,0,0,0,0,0],\n        [6,6,0,0,0,0,0,0],\n        [0,6,6,6,0,0,0,0],\n        [0,0,0,6,6,0,0,0],\n        [0,0,0,0,6,6,0,0],\n        [0,0,0,0,0,6,6,6],\n        [0,0,0,0,0,0,0,6],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,6,6,6,6,0],\n        [0,0,6,6,6,6,0],\n        [0,0,6,6,6,6,0],\n        [0,0,0,0,6,6,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid, out_rows, out_cols):\\n    vals = [v for row in grid for v in row if v != 0]\\n    out = [[0]*out_cols for _ in range(out_rows)]\\n    r0, c0 = out_rows//2, out_cols//2\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    d = 0; step = 1; r, c = r0, c0; idx = 0\\n    out[r][c] = vals[idx]; idx += 1\\n    while idx < len(vals):\\n        for _ in range(2):\\n            for __ in range(step):\\n                if idx >= len(vals): break\\n                dr, dc = dirs[d]\\n                r += dr; c += dc\\n                out[r][c] = vals[idx]; idx += 1\\n            d = (d + 1) % 4\\n        step += 1\\n    return out\\n\\n# usage example:\\ngrid = [[6,0,0,0,0,0,0,0], [6,6,0,0,0,0,0,0], [0,6,6,6,0,0,0,0], [0,0,0,6,6,0,0,0], [0,0,0,0,6,6,0,0], [0,0,0,0,0,6,6,6], [0,0,0,0,0,0,0,6], [0,0,0,0,0,0,0,0]]\\nout = solve(grid, 7, 7)\\nprint(out)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "d117adbd-ed8e-4523-8e62-6dac375bfb05.json",
    "uuid": "d117adbd-ed8e-4523-8e62-6dac375bfb05",
    "created": "2025-04-28 22:44:36",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,2,2,2,0,0],\n        [0,0,2,1,2,0,0],\n        [0,0,2,2,2,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,3,0,3,0,0,0],\n        [0,0,0,0,2,2,2,0,0,0,0],\n        [0,0,0,3,2,1,2,3,0,0,0],\n        [0,0,0,3,2,2,2,3,0,0,0],\n        [0,0,0,3,0,3,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(inp):\\n    h,w = len(inp), len(inp[0])\\n    k = 2\\n    out = [[0]*(w+2*k) for _ in range(h+2*k)]\\n    # copy original shapes and core\\n    for i in range(h):\\n        for j in range(w):\\n            v = inp[i][j]\\n            if v!=0:\\n                out[i+k][j+k] = v\\n    # radiate from core==1\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,1),(-1,-1)]\\n    for i in range(h):\\n        for j in range(w):\\n            if inp[i][j]==1:\\n                for dx,dy in dirs:\\n                    for step in range(1,k+1):\\n                        ni, nj = i+k+dy*step, j+k+dx*step\\n                        if out[ni][nj]==0:\\n                            out[ni][nj]=3\\n    return out\\n\\n# 예시 실행\\n# result = transform(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,3,0,0,3,0,0,0,0,0,0],\n        [0,0,0,3,0,3,0,3,0,0,0,0,0,0,0],\n        [0,0,0,0,1,3,3,3,0,0,0,0,0,0,0],\n        [0,0,0,0,3,2,3,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,3,0,3,0,0,0,0,0,0,0],\n        [0,0,3,0,0,3,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(inp):\\n    h,w = len(inp), len(inp[0])\\n    k = 3\\n    out = [[0]*(w+2*k) for _ in range(h+2*k)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = inp[i][j]\\n            if v!=0:\\n                out[i+k][j+k] = v\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,1),(-1,-1)]\\n    for i in range(h):\\n        for j in range(w):\\n            if inp[i][j]==1:\\n                for dx,dy in dirs:\\n                    for step in range(1,k+1):\\n                        ni, nj = i+k+dy*step, j+k+dx*step\\n                        if out[ni][nj]==0:\\n                            out[ni][nj]=3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,1,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,3,3,0,0,0,0,0],\n        [0,0,0,0,2,1,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(inp):\\n    h,w = len(inp), len(inp[0])\\n    k = 1\\n    out = [[0]*(w+2*k) for _ in range(h+2*k)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = inp[i][j]\\n            if v!=0:\\n                out[i+k][j+k] = v\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,1),(-1,-1)]\\n    for i in range(h):\\n        for j in range(w):\\n            if inp[i][j]==1:\\n                for dx,dy in dirs:\\n                    ni, nj = i+k+dy, j+k+dx\\n                    if out[ni][nj]==0:\\n                        out[ni][nj]=3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,2,2,1,2,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,1,3,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(inp):\\n    h,w = len(inp), len(inp[0])\\n    k = 2\\n    out = [[0]*(w+2*k) for _ in range(h+2*k)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = inp[i][j]\\n            if v!=0:\\n                out[i+k][j+k] = v\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,1),(-1,-1)]\\n    for i in range(h):\\n        for j in range(w):\\n            if inp[i][j]==1:\\n                for dx,dy in dirs:\\n                    for step in range(1,k+1):\\n                        ni, nj = i+k+dy*step, j+k+dx*step\\n                        if out[ni][nj]==0:\\n                            out[ni][nj]=3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e90ed63d-09c4-4f9b-8d70-1fc236ca899b.json",
    "uuid": "e90ed63d-09c4-4f9b-8d70-1fc236ca899b",
    "created": "2025-04-28 22:31:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,5,5,5,0,0,0,0,0],\n        [0,0,0,0,5,2,3,4,5,0,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,5,5,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,5,5,5,0,0,0,0,0],\n        [0,0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,0,2,3,4,0,5,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,5,5,5,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] in [2,3,4]:\\n                ni = H - 1 - i\\n                out[ni][j] = grid[i][j]\\n                out[i][j] = 0\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,5,2,3,4,5,0,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,5,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,5,0,0],\n        [0,0,0,5,0,0,0,0,0,5,0,0,0],\n        [0,0,0,0,5,2,3,4,5,0,0,0,0],\n        [0,0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] in [2,3,4]:\\n                ni = H - 1 - i\\n                out[ni][j] = grid[i][j]\\n                out[i][j] = 0\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "ecbcec61-04c5-435f-a498-92a8937cad8d.json",
    "uuid": "ecbcec61-04c5-435f-a498-92a8937cad8d",
    "created": "2025-04-28 22:32:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,0,0,9,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,9,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,9,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,9,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,9,0,4,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,3,0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,5,9,9,9,9,9,9,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def reflect(grid):\\\\n    H,W=len(grid),len(grid[0])\\\\n    out=[[0]*W for _ in range(H)]\\\\n    # copy walls\\\\n    for r in range(H):\\\\n        for c in range(W):\\\\n            if grid[r][c]==9: out[r][c]=9\\\\n    # reflect all other objects across r+c=11\\\\n    for r in range(H):\\\\n        for c in range(W):\\\\n            v=grid[r][c]\\\\n            if v not in (0,9):\\\\n                nr, nc = 11-c, 11-r\\\\n                out[nr][nc] = v\\\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,9,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,9,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,9,0,0,5,0,0,0,0,9,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def reflect(grid):\\\\n    H,W=len(grid),len(grid[0])\\\\n    out=[[0]*W for _ in range(H)]\\\\n    # copy walls\\\\n    for r in range(H):\\\\n        for c in range(W):\\\\n            if grid[r][c]==9: out[r][c]=9\\\\n    # reflect all other objects across r+c=11\\\\n    for r in range(H):\\\\n        for c in range(W):\\\\n            v=grid[r][c]\\\\n            if v not in (0,9):\\\\n                nr, nc = 11-c, 11-r\\\\n                out[nr][nc] = v\\\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "faac856b-88cc-46c8-9aeb-577a0b48e61a.json",
    "uuid": "faac856b-88cc-46c8-9aeb-577a0b48e61a",
    "created": "2025-04-28 22:28:18",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2,1,1,1,1,1,1,1,1,1,3],\n        [1,2,1,1,1,1,1,1,1,3,1],\n        [1,1,2,1,1,1,1,1,3,1,1],\n        [1,1,1,2,1,1,1,3,1,1,1],\n        [1,1,1,1,2,1,3,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,3,1,2,1,1,1,1],\n        [1,1,1,3,1,1,1,2,1,1,1],\n        [1,1,3,1,1,1,1,1,2,1,1],\n        [1,3,1,1,1,1,1,1,1,2,1],\n        [3,1,1,1,1,1,1,1,1,1,2]\n      ],\n      \"output\": [\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [1,1,0,1,1,1,1,1,0,1,1],\n        [1,1,1,0,1,1,1,0,1,1,1],\n        [1,1,1,1,0,1,0,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,0,1,0,1,1,1,1],\n        [1,1,1,0,1,1,1,0,1,1,1],\n        [1,1,0,1,1,1,1,1,0,1,1],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [0,1,1,1,1,1,1,1,1,1,0]\n      ],\n      \"code\": \"def transform(matrix):\\n    '''Replace any cell equal to 2 or 3 with 0, keep 0 and 1 unchanged.'''\\n    return [[0 if cell in (2,3) else cell for cell in row] for row in matrix]\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,2,2,2,2,2,2,2,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,1,2,1,1,3,3,3],\n        [1,1,1,1,1,1,1,1,3,3,3],\n        [1,1,1,1,1,1,1,1,3,3,3]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,0,0,0,0,0,0,0,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,0,0,0],\n        [1,1,1,1,1,1,1,1,0,0,0],\n        [1,1,1,1,1,1,1,1,0,0,0]\n      ],\n      \"code\": \"def transform(matrix):\\n    '''Replace any cell equal to 2 or 3 with 0, keep 0 and 1 unchanged.'''\\n    return [[0 if cell in (2,3) else cell for cell in row] for row in matrix]\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [1,1,1,2,2,2,2,2,1,1,1],\n        [1,1,1,2,1,1,1,2,1,1,1],\n        [1,1,1,2,1,1,1,2,1,1,1],\n        [1,1,1,2,2,2,2,2,1,1,1],\n        [1,1,1,2,2,2,2,2,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,0,0,0,0,0,1,1,1],\n        [1,1,1,0,1,1,1,0,1,1,1],\n        [1,1,1,0,1,1,1,0,1,1,1],\n        [1,1,1,0,0,0,0,0,1,1,1],\n        [1,1,1,0,0,0,0,0,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(matrix):\\n    '''Replace any cell equal to 2 or 3 with 0, keep 0 and 1 unchanged.'''\\n    return [[0 if cell in (2,3) else cell for cell in row] for row in matrix]\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [2,2,1,1,1,1,1,1,1,1,1],\n        [1,2,2,1,1,1,1,1,1,1,1],\n        [1,1,2,2,1,1,1,1,1,1,1],\n        [1,1,1,2,2,1,1,1,1,1,1],\n        [1,1,1,1,2,2,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [3,3,3,1,1,1,1,1,1,1,1],\n        [3,1,1,1,1,1,1,1,1,1,1],\n        [3,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,1,1,1,1,1,1,1,1,1],\n        [1,0,0,1,1,1,1,1,1,1,1],\n        [1,1,0,0,1,1,1,1,1,1,1],\n        [1,1,1,0,0,1,1,1,1,1,1],\n        [1,1,1,1,0,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,1,1,1,1,1,1,1,1],\n        [0,1,1,1,1,1,1,1,1,1,1],\n        [0,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(matrix):\\n    '''Replace any cell equal to 2 or 3 with 0, keep 0 and 1 unchanged.'''\\n    return [[0 if cell in (2,3) else cell for cell in row] for row in matrix]\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "0c35d48a-73d1-4be4-89d4-ecc0681edd96.json",
    "uuid": "0c35d48a-73d1-4be4-89d4-ecc0681edd96",
    "created": "2025-04-28 22:34:27",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,3,0,0,0,0,0,0,0,0,0,4,0,0,0,2],\n        [2,3,3,3,0,0,0,0,0,0,0,0,4,0,0,0,2],\n        [2,0,3,0,0,0,0,0,0,0,0,0,4,4,4,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # 1) 내부 프레임(offset=2)\\n    for i in range(2, h-2):\\n        out[i][2] = 2; out[i][w-3] = 2\\n    for j in range(2, w-2):\\n        out[2][j] = 2; out[h-3][j] = 2\\n    # 2) 좌측(3), 우측(4) 제거 → 0\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] in (3,4): out[i][j] = 0\\n    # 3) 중앙 3×3에 5 채우기\\n    cx, cy = h//2, w//2\\n    for di in (-1,0,1):\\n        for dj in (-1,0,1):\\n            out[cx+di][cy+dj] = 5\\n    return out\\n\\n# 예시 사용\\noutput = transform(input)\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,3,0,0,0,4,4,4,4,4,0,0,2],\n        [2,0,0,0,0,3,0,0,0,4,0,0,0,4,0,0,2],\n        [2,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,2],\n        [2,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,2],\n        [2,0,0,0,0,0,0,0,0,4,4,4,4,4,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,5,5,5,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2],\n        [2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # 1) 내부 프레임(offset=2)\\n    for i in range(2, h-2):\\n        out[i][2] = 2; out[i][w-3] = 2\\n    for j in range(2, w-2):\\n        out[2][j] = 2; out[h-3][j] = 2\\n    # 2) 좌측(3), 우측(4) 제거 → 0\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] in (3,4): out[i][j] = 0\\n    # 3) 중앙 3×3에 5 채우기\\n    cx, cy = h//2, w//2\\n    for di in (-1,0,1):\\n        for dj in (-1,0,1):\\n            out[cx+di][cy+dj] = 5\\n    return out\\n\\n# 예시 사용\\noutput = transform(input)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "43765d13-0e03-4f2a-b822-885c66abc89f.json",
    "uuid": "43765d13-0e03-4f2a-b822-885c66abc89f",
    "created": "2025-04-28 22:40:24",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,3,0,4,0,0,0,3,0,0,0,0,0,0,0,1],\n        [1,3,0,0,4,0,0,3,0,0,0,0,0,0,0,1],\n        [1,3,0,0,0,4,0,3,0,0,0,0,0,0,0,1],\n        [1,3,0,0,0,0,4,3,0,0,0,0,0,0,0,1],\n        [1,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find start marker\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 2:\\n                sr, sc = i, j\\n    # define inner boundary rows and cols\\n    r1, r2 = 1, R - 2\\n    c1 = 1\\n    # draw downward from start\\n    for i in range(sr + 1, r2 + 1):\\n        if grid[i][sc] == 0:\\n            grid[i][sc] = 3\\n    # draw leftward along bottom boundary\\n    for j in range(sc - 1, c1 - 1, -1):\\n        if grid[r2][j] == 0:\\n            grid[r2][j] = 3\\n    # draw upward along left boundary\\n    for i in range(r2 - 1, r1 - 1, -1):\\n        if grid[i][c1] == 0:\\n            grid[i][c1] = 3\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,0,0,0,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,0,0,0,0,5,5,0,1],\n        [1,3,0,0,0,0,0,3,0,0,0,0,5,5,0,1],\n        [1,3,0,0,0,0,0,3,0,0,0,0,0,0,0,1],\n        [1,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find start marker\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 2:\\n                sr, sc = i, j\\n    # define inner boundary rows and cols\\n    r1, r2 = 1, R - 2\\n    c1 = 1\\n    # draw downward from start\\n    for i in range(sr + 1, r2 + 1):\\n        if grid[i][sc] == 0:\\n            grid[i][sc] = 3\\n    # draw leftward along bottom boundary\\n    for j in range(sc - 1, c1 - 1, -1):\\n        if grid[r2][j] == 0:\\n            grid[r2][j] = 3\\n    # draw upward along left boundary\\n    for i in range(r2 - 1, r1 - 1, -1):\\n        if grid[i][c1] == 0:\\n            grid[i][c1] = 3\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,6,6,6,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,6,6,6,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,6,0,0,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,6,6,6,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,6,6,6,0,0,0,0,1],\n        [1,3,0,0,0,0,0,3,6,0,0,0,0,0,0,1],\n        [1,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find start marker\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 2:\\n                sr, sc = i, j\\n    # define inner boundary rows and cols\\n    r1, r2 = 1, R - 2\\n    c1 = 1\\n    # draw downward from start\\n    for i in range(sr + 1, r2 + 1):\\n        if grid[i][sc] == 0:\\n            grid[i][sc] = 3\\n    # draw leftward along bottom boundary\\n    for j in range(sc - 1, c1 - 1, -1):\\n        if grid[r2][j] == 0:\\n            grid[r2][j] = 3\\n    # draw upward along left boundary\\n    for i in range(r2 - 1, r1 - 1, -1):\\n        if grid[i][c1] == 0:\\n            grid[i][c1] = 3\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,0,7,0,0,0,0,0,0,0,0,0,0,7,0,1],\n        [1,0,0,7,0,0,0,0,0,0,0,7,0,0,0,1],\n        [1,0,0,0,7,0,0,0,0,0,7,0,0,0,0,1],\n        [1,0,0,0,0,7,0,0,0,7,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1],\n        [1,3,7,0,0,0,0,3,0,0,0,0,0,7,0,1],\n        [1,3,0,7,0,0,0,3,0,0,0,7,0,0,0,1],\n        [1,3,0,0,7,0,0,3,0,0,7,0,0,0,0,1],\n        [1,3,0,0,0,7,0,3,0,7,0,0,0,0,0,1],\n        [1,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find start marker\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 2:\\n                sr, sc = i, j\\n    # define inner boundary rows and cols\\n    r1, r2 = 1, R - 2\\n    c1 = 1\\n    # draw downward from start\\n    for i in range(sr + 1, r2 + 1):\\n        if grid[i][sc] == 0:\\n            grid[i][sc] = 3\\n    # draw leftward along bottom boundary\\n    for j in range(sc - 1, c1 - 1, -1):\\n        if grid[r2][j] == 0:\\n            grid[r2][j] = 3\\n    # draw upward along left boundary\\n    for i in range(r2 - 1, r1 - 1, -1):\\n        if grid[i][c1] == 0:\\n            grid[i][c1] = 3\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "459f49e8-6d91-4928-ac2e-6639b2b4a3b2.json",
    "uuid": "459f49e8-6d91-4928-ac2e-6639b2b4a3b2",
    "created": "2025-04-28 22:47:14",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,1,0,1,0,1,0],\n        [1,0,0,0,1,0,0,0,1],\n        [0,1,0,1,1,1,0,1,0],\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,1,0,1,0,1,0],\n        [1,0,0,0,2,0,0,0,1],\n        [0,1,0,1,1,1,0,1,0],\n        [1,1,2,2,2,2,2,1,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform_A(input_grid):\\n    n, m = len(input_grid), len(input_grid[0])\\n    # shape definitions\\n    diamond_centers = [(2,2),(2,6)]      # zero-based\\n    square_centers = [(6,2),(6,6)]       # Chebyshev radius=2\\n    plus_center = (4,4)                  # orthogonal radius=2\\n    def is_diamond(i,j,cx,cy): return abs(i-cx)+abs(j-cy)==2\\n    def is_square(i,j,cx,cy):  return max(abs(i-cx),abs(j-cy))==2\\n    def is_plus(i,j,cx,cy):    return (i==cx and abs(j-cy)<=2) or (j==cy and abs(i-cx)<=2)\\n    output = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if input_grid[i][j]==1:\\n                cnt = 0\\n                for cx,cy in diamond_centers:\\n                    if is_diamond(i,j,cx,cy): cnt +=1\\n                for cx,cy in square_centers:\\n                    if is_square(i,j,cx,cy): cnt +=1\\n                if is_plus(i,j,*plus_center): cnt +=1\\n                output[i][j] = 2 if cnt>=2 else 1\\n            else:\\n                output[i][j] = 0\\n    return output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,1,0,0,1,0,0,1,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,0,1,0,0,0,0],\n        [0,0,1,1,0,1,0,0,0],\n        [1,1,1,1,1,0,1,0,0],\n        [0,1,1,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,1,0,0,1,0,0,1,0],\n        [0,0,2,1,1,1,2,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,0,2,0,0,0,0],\n        [0,0,1,1,0,1,0,0,0],\n        [1,1,2,1,1,0,1,0,0],\n        [0,1,1,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_B(input_grid):\\n    n, m = len(input_grid), len(input_grid[0])\\n    plus_c = (2,4)      # center (3,5) one-based\\n    x_c = (4,4)         # center (5,5)\\n    l_corner = (6,2)    # corner (7,3)\\n    def is_plus(i,j,cx,cy): return (i==cx and abs(j-cy)<=2) or (j==cy and abs(i-cx)<=2)\\n    def is_x(i,j,cx,cy):    return abs(i-cx)==abs(j-cy)<=1\\n    def is_l(i,j,cx,cy):    return (i==cx and cy<=j<=cy+2) or (j==cy and cx<=i<=cx+2)\\n    output = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if input_grid[i][j]==1:\\n                cnt = (1 if is_plus(i,j,*plus_c) else 0) + \\\\\\n                      (1 if is_x(i,j,*x_c) else 0) + \\\\\\n                      (1 if is_l(i,j,*l_corner) else 0)\\n                output[i][j] = 2 if cnt>=2 else 1\\n            else:\\n                output[i][j] = 0\\n    return output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,0,1,1,1,0,1,0],\n        [0,1,1,0,1,0,1,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,1,0,1,0,1,1,0],\n        [0,1,0,1,1,1,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,2,1,1,1,0],\n        [0,1,0,1,1,1,0,1,0],\n        [0,1,1,0,1,0,1,1,0],\n        [0,2,1,1,1,1,1,2,0],\n        [0,1,1,0,1,0,1,1,0],\n        [0,1,0,1,1,1,0,1,0],\n        [0,1,1,1,2,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_C(input_grid):\\n    n, m = len(input_grid), len(input_grid[0])\\n    # inner rectangle boundary (1,1)-(7,7)\\n    def is_rect(i,j): return ((i==1 or i==7) and 1<=j<=7) or ((j==1 or j==7) and 1<=i<=7)\\n    # diamond r=3 center (4,4)\\n    def is_diamond(i,j): return abs(i-4)+abs(j-4)==3\\n    # plus r=3 center (4,4)\\n    def is_plus(i,j): return (i==4 and abs(j-4)<=3) or (j==4 and abs(i-4)<=3)\\n    output = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if input_grid[i][j]==1:\\n                cnt = (1 if is_rect(i,j) else 0) + (1 if is_diamond(i,j) else 0) + (1 if is_plus(i,j) else 0)\\n                output[i][j] = 2 if cnt>=2 else 1\\n            else:\\n                output[i][j] = 0\\n    return output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,1,0,1,0,1,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,2,1,1,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,2,0,1,0,2,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,2,1,2,1,2,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_D(input_grid):\\n    n, m = len(input_grid), len(input_grid[0])\\n    # U-shape: horizontal row2 cols2..6 and pillars at cols2,6 rows2..6\\n    def is_u(i,j): return (i==2 and 2<=j<=6) or ((j==2 or j==6) and 2<=i<=6)\\n    # T-shape: horizontal row6 cols2..6 and pillar at col4 rows2..6\\n    def is_t(i,j): return (i==6 and 2<=j<=6) or (j==4 and 2<=i<=6)\\n    # diamond r=2 center (4,4)\\n    def is_diamond(i,j): return abs(i-4)+abs(j-4)==2\\n    output = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if input_grid[i][j]==1:\\n                cnt = (1 if is_u(i,j) else 0) + (1 if is_t(i,j) else 0) + (1 if is_diamond(i,j) else 0)\\n                output[i][j] = 2 if cnt>=2 else 1\\n            else:\\n                output[i][j] = 0\\n    return output\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4e165721-dcc9-4c75-a69f-6851c608588e.json",
    "uuid": "4e165721-dcc9-4c75-a69f-6851c608588e",
    "created": "2025-04-28 22:35:51",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [7,7,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,0,0,0,0,0,0,0,0,0,0],\n        [0,7,7,7,0,0,0,0,0,0,0,0,0],\n        [0,0,7,7,7,0,0,0,0,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,0,7,7,7,0,0,0,0,0],\n        [0,0,0,0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,7,7,7,0,0,0],\n        [0,0,0,0,0,0,0,0,7,7,7,0,0],\n        [0,0,0,0,0,0,0,0,0,7,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,7,7]\n      ],\n      \"output\": [\n        [7,7,0,0,0,0,0,0,0,0,0,7,7],\n        [7,7,7,0,0,0,0,0,0,0,7,7,7],\n        [0,7,7,7,0,0,0,0,0,7,7,7,0],\n        [0,0,7,7,7,0,0,0,7,7,7,0,0],\n        [0,0,0,7,7,7,0,7,7,7,0,0,0],\n        [0,0,0,0,7,7,7,7,7,0,0,0,0],\n        [0,0,0,0,0,7,7,7,0,0,0,0,0],\n        [0,0,0,0,7,7,7,7,7,0,0,0,0],\n        [0,0,0,7,7,7,0,7,7,7,0,0,0],\n        [0,0,7,7,7,0,0,0,7,7,7,0,0],\n        [0,7,7,7,0,0,0,0,7,7,7,0,0],\n        [7,7,7,0,0,0,0,0,0,7,7,7,0],\n        [7,7,0,0,0,0,0,0,0,0,0,7,7]\n      ],\n      \"code\": \"def transform(A):\\n    # rotate 90° clockwise\\n    Aprime = [list(reversed(col)) for col in zip(*A)]\\n    # cellwise max\\n    return [[max(A[i][j], Aprime[i][j]) for j in range(len(A))] for i in range(len(A))]\\n\\n# Example usage:\\n# B = transform(input_array)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,5,5,5,0,0,0,0,0],\n        [0,0,0,0,5,5,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,5,5,0,0,0,0,0],\n        [0,0,0,0,0,5,5,5,5,0,0,0,0],\n        [0,0,0,0,5,5,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,5,5,5,5,5,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(A):\\n    # rotate 90° clockwise\\n    Aprime = [list(reversed(col)) for col in zip(*A)]\\n    # cellwise max\\n    return [[max(A[i][j], Aprime[i][j]) for j in range(len(A))] for i in range(len(A))]\\n\\n# Example usage:\\n# B = transform(input_array)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,0,0,0,0,0],\n        [0,0,0,6,0,0,0,6,0,0,0,0,0],\n        [0,0,0,6,0,0,0,6,0,0,0,0,0],\n        [0,0,0,6,0,0,0,6,0,0,0,0,0],\n        [0,0,0,6,0,0,0,6,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,0,6,0,0,0,6,6,0,0,0,0],\n        [0,0,0,6,0,0,0,6,6,0,0,0,0],\n        [0,0,0,6,0,0,0,6,6,0,0,0,0],\n        [0,0,0,6,0,0,0,6,6,0,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,6,6,0,0,0,0]\n      ],\n      \"code\": \"def transform(A):\\n    # rotate 90° clockwise\\n    Aprime = [list(reversed(col)) for col in zip(*A)]\\n    # cellwise max\\n    return [[max(A[i][j], Aprime[i][j]) for j in range(len(A))] for i in range(len(A))]\\n\\n# Example usage:\\n# B = transform(input_array)\"\n    },\n    {\n      \"input\": [\n        [4,4,4,4,4,4,4,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,0,0,0,0,0,0,4,0,0,0,0,0],\n        [4,4,4,4,4,4,4,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [4,4,4,4,4,4,4,4,4,4,4,4,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,0,0,0,0,0,0,4,0,0,0,0,4],\n        [4,4,4,4,4,4,4,4,0,0,0,0,4],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(A):\\n    # rotate 90° clockwise\\n    Aprime = [list(reversed(col)) for col in zip(*A)]\\n    # cellwise max\\n    return [[max(A[i][j], Aprime[i][j]) for j in range(len(A))] for i in range(len(A))]\\n\\n# Example usage:\\n# B = transform(input_array)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "5bf54ce3-e442-44e6-8086-47cf14f659bc.json",
    "uuid": "5bf54ce3-e442-44e6-8086-47cf14f659bc",
    "created": "2025-04-28 22:45:34",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,0,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n            ],\n            \"output\": [\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,1,1,1,1,1,0,0,0,0,9],\n                [9,0,0,0,0,0,1,0,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,1,0,0,0,0,0,0,0,0,0,0,1,0,9],\n                [9,1,1,1,0,0,0,0,0,0,0,1,1,1,9],\n                [9,1,0,1,0,0,0,0,0,0,1,0,1,0,9],\n                [9,1,0,0,1,0,0,0,0,1,0,0,1,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n            ],\n            \"code\": \"def transform(grid):\\n    N = len(grid)\\n    center = N//2\\n    result = [[9 if grid[r][c]==9 else 0 for c in range(N)] for r in range(N)]\\n    ones = [(r,c) for r in range(N) for c in range(N) if grid[r][c]==1]\\n    for r,c in ones:\\n        for angle in [0,90,180,270]:\\n            if angle == 0:\\n                rr, cc = r, c\\n            elif angle == 90:\\n                rr, cc = center + (c-center), center - (r-center)\\n            elif angle == 180:\\n                rr, cc = center - (r-center), center - (c-center)\\n            else:\\n                rr, cc = center - (c-center), center + (r-center)\\n            result[rr][cc] = 1\\n    return result\"\n        },\n        {\n            \"input\": [\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,1,1,1,1,1,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n            ],\n            \"output\": [\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,1,0,1,1,1,1,1,0,0,0,9],\n                [9,0,1,1,1,1,1,0,1,1,1,1,1,0,9],\n                [9,0,0,1,0,1,1,1,1,1,0,1,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,1,1,1,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n                [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n                [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n            ],\n            \"code\": \"def transform(grid):\\n    N = len(grid)\\n    center = N//2\\n    result = [[9 if grid[r][c]==9 else 0 for c in range(N)] for r in range(N)]\\n    ones = [(r,c) for r in range(N) for c in range(N) if grid[r][c]==1]\\n    for r,c in ones:\\n        for angle in [0,90,180,270]:\\n            if angle == 0:\\n                rr, cc = r, c\\n            elif angle == 90:\\n                rr, cc = center + (c-center), center - (r-center)\\n            elif angle == 180:\\n                rr, cc = center - (r-center), center - (c-center)\\n            else:\\n                rr, cc = center - (c-center), center + (r-center)\\n            result[rr][cc] = 1\\n    return result\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "5da8bf78-970e-46d9-bd44-3cfc68ac66d0.json",
    "uuid": "5da8bf78-970e-46d9-bd44-3cfc68ac66d0",
    "created": "2025-04-28 22:36:57",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,4,0,4,0,0,0,0],\n        [0,0,0,0,2,0,0,0,4,0,4,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,4,0,4,0,0,0,0],\n        [0,0,0,0,2,0,0,0,4,0,4,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,4,0,4,0,0,0,0],\n        [0,0,0,0,0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find horizon row\\n    horizon = next(i for i,row in enumerate(grid) if 1 in row)\\n    # parameters for this task\\n    shape_vals = {2,4}\\n    delta = 3\\n    # build new empty grid\\n    new = [[0]*C for _ in range(R)]\\n    # copy overlay (3) and horizon (1)\\n    for r in range(R):\\n        for c in range(C):\\n            if grid[r][c] in (1,3):\\n                new[r][c] = grid[r][c]\\n    # collect shape cells\\n    coords = [(r,c,grid[r][c]) for r in range(R) for c in range(C) if grid[r][c] in shape_vals]\\n    # emergence: shift up by delta\\n    emerg = [(r - delta, c, v) for (r,c,v) in coords]\\n    # reflection: mirror across horizon\\n    refl  = [(2*horizon - r_e, c, v) for (r_e,c,v) in emerg]\\n    # place shapes\\n    for (r_e,c,v) in emerg + refl:\\n        new[r_e][c] = v\\n    return new\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,0,0,0,0],\n        [0,0,2,2,2,2,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,5,5,5,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    R, C = len(grid), len(grid[0])\\n    # find horizon row\\n    horizon = next(i for i,row in enumerate(grid) if 1 in row)\\n    # parameters for this task\\n    shape_vals = {2,5}\\n    delta = 2\\n    # build new empty grid\\n    new = [[0]*C for _ in range(R)]\\n    # copy overlay (3) and horizon (1)\\n    for r in range(R):\\n        for c in range(C):\\n            if grid[r][c] in (1,3):\\n                new[r][c] = grid[r][c]\\n    # collect shape cells\\n    coords = [(r,c,grid[r][c]) for r in range(R) for c in range(C) if grid[r][c] in shape_vals]\\n    # emergence: shift up by delta\\n    emerg = [(r - delta, c, v) for (r,c,v) in coords]\\n    # reflection: mirror across horizon\\n    refl  = [(2*horizon - r_e, c, v) for (r_e,c,v) in emerg]\\n    # place shapes\\n    for (r_e,c,v) in emerg + refl:\\n        new[r_e][c] = v\\n    return new\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "859a714e-609c-42fe-94ae-d62d2f551e00.json",
    "uuid": "859a714e-609c-42fe-94ae-d62d2f551e00",
    "created": "2025-04-28 22:29:13",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,1,0,1,0,0,1],\n        [1,0,1,0,0,0,1,0,1],\n        [1,0,0,1,0,1,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,1,2,1,0,0,1],\n        [1,0,1,2,0,2,1,0,1],\n        [1,0,0,1,2,1,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: 9×9 list of lists with 1=wall, 0=empty\\n    n = len(grid)\\n    m = len(grid[0])\\n    # copy original\\n    out = [row[:] for row in grid]\\n    # center coordinates\\n    cx, cy = n//2, m//2\\n    # for each cardinal direction, shoot ray until just before a '1'\\n    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:\\n        x, y = cx, cy\\n        while True:\\n            x += dx; y += dy\\n            if out[x][y] == 1:\\n                break\\n            out[x][y] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,1,2,0,2,2,2,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid); m = len(grid[0])\\n    out = [row[:] for row in grid]\\n    cx, cy = n//2, m//2\\n    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:\\n        x, y = cx, cy\\n        while True:\\n            x += dx; y += dy\\n            if out[x][y] == 1: break\\n            out[x][y] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,1,1,1,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,1,1,1,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,2,2,2,0,2,2,2,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid); m = len(grid[0])\\n    out = [row[:] for row in grid]\\n    cx, cy = n//2, m//2\\n    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:\\n        x, y = cx, cy\\n        while True:\\n            x += dx; y += dy\\n            if out[x][y] == 1: break\\n            out[x][y] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,1,0,0,0,1,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,0,1,2,0,2,1,0,1],\n        [1,0,0,0,2,0,0,0,1],\n        [1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid); m = len(grid[0])\\n    out = [row[:] for row in grid]\\n    cx, cy = n//2, m//2\\n    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:\\n        x, y = cx, cy\\n        while True:\\n            x += dx; y += dy\\n            if out[x][y] == 1: break\\n            out[x][y] = 2\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "7d4e16f8-1873-48a4-9ad2-90ac736ab553.json",
    "uuid": "7d4e16f8-1873-48a4-9ad2-90ac736ab553",
    "created": "2025-04-28 22:28:11",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [3,0,2,2,0,0,0,0,2,0,3],\n        [3,0,0,2,0,0,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,2,2,0,3],\n        [3,0,0,0,0,0,2,0,2,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"output\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [3,0,2,2,0,0,0,0,2,0,3],\n        [3,0,0,2,1,1,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,0,0,0,2,2,0,3],\n        [3,0,0,0,0,0,2,0,2,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"code\": \"def transform(grid):\\n    # copy the grid\\n    out = [row[:] for row in grid]\\n    # find the single '1'\\n    ci = cj = None\\n    for i in range(len(grid)):\\n        for j in range(len(grid[0])):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # expand to 3×3\\n    for di in (-1, 0, 1):\\n        for dj in (-1, 0, 1):\\n            out[ci + di][cj + dj] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"output\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,4,4,0,0,0,0,4,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"code\": \"def transform(grid):\\n    # copy the grid\\n    out = [row[:] for row in grid]\\n    # find the single '1'\\n    ci = cj = None\\n    for i in range(len(grid)):\\n        for j in range(len(grid[0])):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # expand to 3×3\\n    for di in (-1, 0, 1):\\n        for dj in (-1, 0, 1):\\n            out[ci + di][cj + dj] = 1\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a44ce8f7-dbcc-4cde-bb3d-f304b96dd1e1.json",
    "uuid": "a44ce8f7-dbcc-4cde-bb3d-f304b96dd1e1",
    "created": "2025-04-28 22:43:01",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,0,2,0,0,0,0,0,3,0,1,0],\n        [0,1,0,0,2,0,0,0,3,0,0,1,0],\n        [0,1,0,0,0,0,0,0,0,5,0,1,0],\n        [0,1,0,4,4,0,0,0,0,5,0,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,0,3,0,0,0,0,0,2,0,1,0],\n        [0,1,0,0,0,3,0,0,2,0,0,1,0],\n        [0,1,0,0,0,0,0,0,0,4,0,1,0],\n        [0,1,0,5,5,0,0,0,0,4,0,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    mapping = {2:3, 3:2, 4:5, 5:4}\\n    return [[mapping.get(cell, cell) for cell in row] for row in grid]\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,2,0,0,0,3,0,0,1],\n        [0,1,0,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,4,0,0,0,0,0,5,1,0],\n        [0,1,0,0,0,0,0,0,0,0,0,0,1],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,3,0,0,0,2,0,0,1],\n        [0,1,0,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,5,0,0,0,0,0,4,1,0],\n        [0,1,0,0,0,0,0,0,0,0,0,0,1],\n        [0,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    mapping = {2:3, 3:2, 4:5, 5:4}\\n    return [[mapping.get(cell, cell) for cell in row] for row in grid]\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "90102ecc-bc00-4d3c-88cb-25a4d9999a9f.json",
    "uuid": "90102ecc-bc00-4d3c-88cb-25a4d9999a9f",
    "created": "2025-04-28 22:30:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    # 무게중심은 격자 중앙\\n    cy, cx = h//2, w//2\\n    sign = lambda x: (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 0:\\n                dy = sign(y - cy)\\n                dx = sign(x - cx)\\n                ny, nx = y + dy, x + dx\\n                if 0 <= ny < h and 0 <= nx < w:\\n                    out[ny][nx] = grid[y][x]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,1,0,1,1,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,1,1,0,1,0,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cy, cx = h//2, w//2\\n    sign = lambda x: (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 0:\\n                dy = sign(y - cy)\\n                dx = sign(x - cx)\\n                ny, nx = y + dy, x + dx\\n                if 0 <= ny < h and 0 <= nx < w:\\n                    out[ny][nx] = grid[y][x]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,0,0,0,0],\n        [0,0,1,0,0,1,0,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,0,1,0,0,1,0,0,0],\n        [0,0,0,1,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cy, cx = h//2, w//2\\n    sign = lambda x: (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 0:\\n                dy = sign(y - cy)\\n                dx = sign(x - cx)\\n                ny, nx = y + dy, x + dx\\n                if 0 <= ny < h and 0 <= nx < w:\\n                    out[ny][nx] = grid[y][x]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,1,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cy, cx = h//2, w//2\\n    sign = lambda x: (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 0:\\n                dy = sign(y - cy)\\n                dx = sign(x - cx)\\n                ny, nx = y + dy, x + dx\\n                if 0 <= ny < h and 0 <= nx < w:\\n                    out[ny][nx] = grid[y][x]\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "af546745-6a4c-4bc2-9107-279b3bb72bdd.json",
    "uuid": "af546745-6a4c-4bc2-9107-279b3bb72bdd",
    "created": "2025-04-28 22:34:11",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,0,0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,3,0,0,0,3,0],\n        [0,0,2,0,0,2,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,2,0,0,0,0,0,2,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,2,0,0],\n        [0,3,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,3,0,0,0,3,0],\n        [0,0,2,0,0,2,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,2,0,0,0,0,0,2,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,2,0,0,2,0,0],\n        [0,3,0,0,0,3,0,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2\\n    ring_val, spike_val, spare_val = 2, 3, 9\\n    dirs = [(-1,0),(1,0),(0,-1),(0,1),(-1,-1),(-1,1),(1,-1),(1,1)]\\n    # find missing spike direction\\n    for dr, dc in dirs:\\n        rr, cc = center + dr*3, center + dc*3\\n        sr, sc = center + dr*4, center + dc*4\\n        if 0 <= rr < n and 0 <= cc < n and grid[rr][cc] == ring_val:\\n            if 0 <= sr < n and 0 <= sc < n and grid[sr][sc] != spike_val:\\n                miss = (sr, sc)\\n                break\\n    # find spare cell\\n    sp = next((i, j) for i in range(n) for j in range(n) if grid[i][j] == spare_val)\\n    # place spike and remove spare\\n    grid[miss[0]][miss[1]] = spike_val\\n    grid[sp[0]][sp[1]] = 0\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,0,0,0,5,0,0,0,5,0],\n        [0,0,4,0,0,4,0,0,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,4,0,0,0,0,0,4,5,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,0,4,0,0,4,0,0],\n        [0,5,0,0,0,0,0,0,0,5,0],\n        [0,0,0,0,0,0,0,0,0,0,6]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,0,0,0,5,0,0,0,5,0],\n        [0,0,4,0,0,4,0,0,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,4,0,0,0,0,0,4,5,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,0,4,0,0,4,0,0],\n        [0,5,0,0,0,5,0,0,0,5,0],\n        [0,0,0,0,0,5,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2\\n    ring_val, spike_val, spare_val = 4, 5, 6\\n    dirs = [(-1,0),(1,0),(0,-1),(0,1),(-1,-1),(-1,1),(1,-1),(1,1)]\\n    for dr, dc in dirs:\\n        rr, cc = center + dr*3, center + dc*3\\n        sr, sc = center + dr*4, center + dc*4\\n        if 0 <= rr < n and 0 <= cc < n and grid[rr][cc] == ring_val:\\n            if 0 <= sr < n and 0 <= sc < n and grid[sr][sc] != spike_val:\\n                miss = (sr, sc)\\n                break\\n    sp = next((i, j) for i in range(n) for j in range(n) if grid[i][j] == spare_val)\\n    grid[miss[0]][miss[1]] = spike_val\\n    grid[sp[0]][sp[1]] = 0\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "ada9dbfc-6a0c-45b1-b07b-12f2c8bf93ba.json",
    "uuid": "ada9dbfc-6a0c-45b1-b07b-12f2c8bf93ba",
    "created": "2025-04-28 22:34:06",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,2,1,1,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,2,1,1,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    # find centroid\\n    cx = cy = None\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 2:\\n                cx, cy = i, j\\n                break\\n        if cx is not None:\\n            break\\n    # prepare output grid\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 2\\n    # rotate each '1' 90° clockwise around (cx,cy)\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 1:\\n                dx, dy = i - cx, j - cy\\n                ni = cx - dy\\n                nj = cy + dx\\n                if 0 <= ni < n and 0 <= nj < m:\\n                    out[ni][nj] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0],\n        [0,0,0,0,2,1,1,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx = cy = None\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 2:\\n                cx, cy = i, j\\n                break\\n        if cx is not None:\\n            break\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 1:\\n                dx, dy = i - cx, j - cy\\n                ni = cx - dy\\n                nj = cy + dx\\n                if 0 <= ni < n and 0 <= nj < m:\\n                    out[ni][nj] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,0,0,0,0],\n        [0,0,0,0,1,1,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,0,0,2,1,1,0,0],\n        [0,0,0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx = cy = None\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 2:\\n                cx, cy = i, j\\n                break\\n        if cx is not None:\\n            break\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 1:\\n                dx, dy = i - cx, j - cy\\n                ni = cx - dy\\n                nj = cy + dx\\n                if 0 <= ni < n and 0 <= nj < m:\\n                    out[ni][nj] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,1,0,0,0,0,0],\n        [0,0,0,1,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,1,0,0],\n        [0,0,0,0,2,0,1,0,0],\n        [0,0,0,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx = cy = None\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 2:\\n                cx, cy = i, j\\n                break\\n        if cx is not None:\\n            break\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 1:\\n                dx, dy = i - cx, j - cy\\n                ni = cx - dy\\n                nj = cy + dx\\n                if 0 <= ni < n and 0 <= nj < m:\\n                    out[ni][nj] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,2,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,2,1,1,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx = cy = None\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 2:\\n                cx, cy = i, j\\n                break\\n        if cx is not None:\\n            break\\n    out = [[0]*m for _ in range(n)]\\n    out[cx][cy] = 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 1:\\n                dx, dy = i - cx, j - cy\\n                ni = cx - dy\\n                nj = cy + dx\\n                if 0 <= ni < n and 0 <= nj < m:\\n                    out[ni][nj] = 1\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "afc5020c-ac2c-4547-b28c-095d2fbe0832.json",
    "uuid": "afc5020c-ac2c-4547-b28c-095d2fbe0832",
    "created": "2025-04-28 22:35:25",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,0,0,0,0,0,0],\n        [0,0,0,6,6,0,6,6,0,0,0,0],\n        [0,0,0,5,7,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,3,3,3,3,0],\n        [0,0,0,0,0,0,0,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,0,0,0,0,0,0],\n        [0,0,0,6,6,0,6,6,0,0,0,0],\n        [0,0,0,5,7,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,3,3,3,3,0],\n        [0,0,0,0,0,0,0,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # 복제한 새 격자 생성\\n    H, W = len(grid), len(grid[0])\\n    out = [[grid[i][j] for j in range(W)] for i in range(H)]\\n    # 날개(값 3) 위치를 모두 지우고 한 칸 아래로 복사\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 3:\\n                out[i][j] = 0\\n                if i+1 < H:\\n                    out[i+1][j] = 3\\n    return out\\n\\n# 예시 실행\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,2,0,0,0,0,0,0,0],\\n    [0,0,0,2,2,2,0,0,0,0,0,0],\\n    [0,0,0,6,6,0,6,6,0,0,0,0],\\n    [0,0,0,5,7,0,5,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,3,3,3,3,0],\\n    [0,0,0,0,0,0,0,3,3,3,3,0],\\n    [0,0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,4,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,8,8,8,0,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,3,3,3,3,0,0,0,0,0],\n        [0,0,0,3,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,9,9,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,3,3,3,0,0,0,0,0],\n        [0,0,0,3,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,9,9,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[grid[i][j] for j in range(W)] for i in range(H)]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 3:\\n                out[i][j] = 0\\n                if i+1 < H:\\n                    out[i+1][j] = 3\\n    return out\\n\\n# 실행 예시\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,0,0,0,0,0,0],\n        [0,0,0,5,0,5,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,0,0,0,0,0,0],\n        [0,0,3,3,3,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,9,0,9,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,0,0,0,0,0,0],\n        [0,0,0,5,0,5,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,0,0,0,0,0,0],\n        [0,0,3,3,3,3,0,9,0,9,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 3:\\n                out[i][j] = 0\\n                if i+1 < H:\\n                    out[i+1][j] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,3,3,3,3],\n        [0,0,0,0,0,0,0,0,3,3,3,3],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,3,3,3,3],\n        [0,0,0,0,0,0,0,0,3,3,3,3],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,0,5,0,5,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 3:\\n                out[i][j] = 0\\n                if i+1 < H:\\n                    out[i+1][j] = 3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "c4ad098b-c28f-4319-a355-6deaa75ffc2a.json",
    "uuid": "c4ad098b-c28f-4319-a355-6deaa75ffc2a",
    "created": "2025-04-28 22:27:01",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [5,5,5,0,0,0,0,0,0,6,0],\n        [5,0,5,0,0,1,0,0,6,6,6],\n        [5,5,5,1,0,2,0,1,0,6,0],\n        [0,0,0,1,0,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,4,0,0,0,1,0],\n        [0,0,0,0,0,0,7,0,0,0,0],\n        [0,0,1,0,0,0,0,7,1,0,0],\n        [0,0,0,1,0,3,0,1,7,0,0],\n        [0,0,0,0,0,1,0,0,0,7,0],\n        [0,0,0,0,0,0,0,0,0,0,7]\n      ],\n      \"output\": [\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    out = [[0]*5 for _ in range(rows)]\\n    # find rows of G(2) and R(3)\\n    for i, row in enumerate(grid):\\n        for v in row:\\n            if v == 2:\\n                rG = i\\n            if v == 3:\\n                rR = i\\n    # compute heights\\n    H_G = rows - 1 - rG\\n    H_R = rows - 1 - rR\\n    # fill output columns\\n    for k in range(H_G):\\n        out[rows-1-k][1] = 2\\n    for k in range(H_R):\\n        out[rows-1-k][3] = 3\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,9,9,9,0,0,0,0],\n        [0,0,0,1,0,9,0,1,0,0,0],\n        [0,0,1,0,9,9,9,0,1,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0],\n        [7,1,7,7,7,4,7,7,7,1,7],\n        [0,0,3,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [5,5,5,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    out = [[0]*5 for _ in range(rows)]\\n    # find rows of G(2) and R(3)\\n    for i, row in enumerate(grid):\\n        for v in row:\\n            if v == 2:\\n                rG = i\\n            if v == 3:\\n                rR = i\\n    # compute heights\\n    H_G = rows - 1 - rG\\n    H_R = rows - 1 - rR\\n    # fill output columns\\n    for k in range(H_G):\\n        out[rows-1-k][1] = 2\\n    for k in range(H_R):\\n        out[rows-1-k][3] = 3\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,8,1,0,0,0,1,0,0,0],\n        [0,0,8,0,0,0,0,0,1,0,0],\n        [8,8,8,8,8,0,0,0,0,0,0],\n        [0,1,8,0,0,4,0,0,0,1,0],\n        [0,0,8,0,0,0,0,0,0,0,0],\n        [0,0,8,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,6,6,0],\n        [0,0,0,0,0,1,0,6,6,6,0],\n        [0,0,0,0,0,0,0,0,6,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,3,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    out = [[0]*5 for _ in range(rows)]\\n    # find rows of G(2) and R(3)\\n    for i, row in enumerate(grid):\\n        for v in row:\\n            if v == 2:\\n                rG = i\\n            if v == 3:\\n                rR = i\\n    # compute heights\\n    H_G = rows - 1 - rG\\n    H_R = rows - 1 - rR\\n    # fill output columns\\n    for k in range(H_G):\\n        out[rows-1-k][1] = 2\\n    for k in range(H_R):\\n        out[rows-1-k][3] = 3\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,2,1,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0],\n        [0,5,0,0,0,4,0,0,0,1,0],\n        [0,0,5,0,7,0,0,0,0,0,0],\n        [0,0,1,3,0,0,0,0,1,0,0],\n        [0,0,7,1,0,0,0,1,0,0,0],\n        [0,7,0,0,0,1,0,0,0,0,0],\n        [7,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,0,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0],\n        [0,2,0,3,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    out = [[0]*5 for _ in range(rows)]\\n    # find rows of G(2) and R(3)\\n    for i, row in enumerate(grid):\\n        for v in row:\\n            if v == 2:\\n                rG = i\\n            if v == 3:\\n                rR = i\\n    # compute heights\\n    H_G = rows - 1 - rG\\n    H_R = rows - 1 - rR\\n    # fill output columns\\n    for k in range(H_G):\\n        out[rows-1-k][1] = 2\\n    for k in range(H_R):\\n        out[rows-1-k][3] = 3\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "cf802ddd-d2b8-4bcc-949f-c7a8cec4a82b.json",
    "uuid": "cf802ddd-d2b8-4bcc-949f-c7a8cec4a82b",
    "created": "2025-04-28 22:32:58",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,2,3,4,0,0,0,1],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,2,3,4,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # find projectile\\n    H,W = len(grid), len(grid[0])\\n    pr = pc = None\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 8:\\n                pr,pc = i,j\\n    # determine shift direction: down if projectile below center, else up\\n    direction = 1 if pr > H//2 else -1\\n    # collect all objects to shift\\n    objs = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if 2 <= v < 8:\\n                objs.append((i,j,v))\\n    # build output\\n    out = [row[:] for row in grid]\\n    # clear original objects and projectile\\n    for i,j,_ in objs:\\n        out[i][j] = 0\\n    out[pr][pc] = 0\\n    # shift objects\\n    for i,j,v in objs:\\n        out[i+direction][j] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,2,3,5,6,0,0,0,1],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,2,3,5,6,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H,W = len(grid), len(grid[0])\\n    pr = pc = None\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 8:\\n                pr,pc = i,j\\n    direction = 1 if pr > H//2 else -1\\n    objs = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if 2 <= v < 8:\\n                objs.append((i,j,v))\\n    out = [row[:] for row in grid]\\n    for i,j,_ in objs:\\n        out[i][j] = 0\\n    out[pr][pc] = 0\\n    for i,j,v in objs:\\n        out[i+direction][j] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,3,5,7,0,0,0,1],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,3,5,7,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H,W = len(grid), len(grid[0])\\n    pr = pc = None\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 8:\\n                pr,pc = i,j\\n    direction = 1 if pr > H//2 else -1\\n    objs = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if 2 <= v < 8:\\n                objs.append((i,j,v))\\n    out = [row[:] for row in grid]\\n    for i,j,_ in objs:\\n        out[i][j] = 0\\n    out[pr][pc] = 0\\n    for i,j,v in objs:\\n        out[i+direction][j] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,2,0,0,1,0,0],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [1,0,0,0,4,0,0,0,0,0,1],\n        [0,1,0,0,0,0,0,0,0,1,0],\n        [0,0,1,0,0,6,0,0,1,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,1,0,0,0,1,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,0,0,2,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,4,0,0,0,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,6,0,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H,W = len(grid), len(grid[0])\\n    pr = pc = None\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] == 8:\\n                pr,pc = i,j\\n    direction = 1 if pr > H//2 else -1\\n    objs = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if 2 <= v < 8:\\n                objs.append((i,j,v))\\n    out = [row[:] for row in grid]\\n    for i,j,_ in objs:\\n        out[i][j] = 0\\n    out[pr][pc] = 0\\n    for i,j,v in objs:\\n        out[i+direction][j] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "cd27607b-076e-4616-9f2e-5bbbf492f718.json",
    "uuid": "cd27607b-076e-4616-9f2e-5bbbf492f718",
    "created": "2025-04-28 22:45:32",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,0,0,0,1,0],\n        [0,1,0,2,2,2,2,0,1,0],\n        [0,1,0,2,0,2,0,0,1,0],\n        [0,1,0,0,2,0,0,0,1,0],\n        [0,1,0,0,0,2,2,0,1,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,2,0,0],\n        [0,0,0,2,0,2,0,0],\n        [0,0,2,0,2,2,0,0],\n        [0,0,2,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # 1) crop off the 1‑pixel border\\n    tmp = [row[1:-1] for row in grid[1:-1]]\\n    n = len(tmp)\\n    out = [[0]*n for _ in range(n)]\\n    # 2) for each 2 in tmp: rotate 90° CW then shift down 1\\n    for i in range(n):\\n        for j in range(n):\\n            if tmp[i][j] == 2:\\n                ni, nj = j, n-1-i\\n                ni += 1\\n                if 0 <= ni < n and 0 <= nj < n:\\n                    out[ni][nj] = 2\\n    return out\\n\\ninput_grid = \" +\n        \"[[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,1,0,0,0,0,0,0,1,0],\"\n        \"[0,1,0,2,2,2,2,0,1,0],\"\n        \"[0,1,0,2,0,2,0,0,1,0],\"\n        \"[0,1,0,0,2,0,0,0,1,0],\"\n        \"[0,1,0,0,0,2,2,0,1,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0]]\\n\"\n        \"print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,2,0,0,1,0],\n        [0,1,0,0,2,2,2,0,1,0],\n        [0,1,0,2,2,2,2,0,1,0],\n        [0,1,0,0,2,2,0,0,1,0],\n        [0,1,0,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0],\n        [0,0,0,2,2,2,0,0],\n        [0,0,0,2,2,2,2,0],\n        [0,0,0,0,2,2,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    tmp = [row[1:-1] for row in grid[1:-1]]\\n    n = len(tmp)\\n    out = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if tmp[i][j] == 2:\\n                ni, nj = j, n-1-i\\n                ni += 1\\n                if 0 <= ni < n and 0 <= nj < n:\\n                    out[ni][nj] = 2\\n    return out\\n\\ninput_grid = \" +\n        \"[[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,1,0,0,0,2,0,0,1,0],\"\n        \"[0,1,0,0,2,2,2,0,1,0],\"\n        \"[0,1,0,2,2,2,2,0,1,0],\"\n        \"[0,1,0,0,2,2,0,0,1,0],\"\n        \"[0,1,0,0,0,0,0,0,1,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0]]\\n\"\n        \"print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,2,0,0,1,0],\n        [0,1,0,0,2,2,2,0,1,0],\n        [0,1,0,2,2,2,2,0,1,0],\n        [0,1,0,0,2,0,2,0,1,0],\n        [0,1,0,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0],\n        [0,0,0,2,2,2,0,0],\n        [0,0,0,0,2,2,2,0],\n        [0,0,0,2,2,2,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    tmp = [row[1:-1] for row in grid[1:-1]]\\n    n = len(tmp)\\n    out = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if tmp[i][j] == 2:\\n                ni, nj = j, n-1-i\\n                ni += 1\\n                if 0 <= ni < n and 0 <= nj < n:\\n                    out[ni][nj] = 2\\n    return out\\n\\ninput_grid = \" +\n        \"[[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,1,0,0,0,2,0,0,1,0],\"\n        \"[0,1,0,0,2,2,2,0,1,0],\"\n        \"[0,1,0,2,2,2,2,0,1,0],\"\n        \"[0,1,0,0,2,0,2,0,1,0],\"\n        \"[0,1,0,0,0,0,0,0,1,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0]]\\n\"\n        \"print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,0,2,0,1,0],\n        [0,1,0,2,2,0,0,0,1,0],\n        [0,1,0,0,2,2,0,0,1,0],\n        [0,1,0,2,0,2,2,0,1,0],\n        [0,1,0,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,2,0,2,0,0],\n        [0,0,0,0,2,2,0,0],\n        [0,0,0,2,2,0,0,0],\n        [0,0,0,2,0,0,2,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    tmp = [row[1:-1] for row in grid[1:-1]]\\n    n = len(tmp)\\n    out = [[0]*n for _ in range(n)]\\n    for i in range(n):\\n        for j in range(n):\\n            if tmp[i][j] == 2:\\n                ni, nj = j, n-1-i\\n                ni += 1\\n                if 0 <= ni < n and 0 <= nj < n:\\n                    out[ni][nj] = 2\\n    return out\\n\\ninput_grid = \" +\n        \"[[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,1,0,0,0,0,2,0,1,0],\"\n        \"[0,1,0,2,2,0,0,0,1,0],\"\n        \"[0,1,0,0,2,2,0,0,1,0],\"\n        \"[0,1,0,2,0,2,2,0,1,0],\"\n        \"[0,1,0,0,0,0,0,0,1,0],\"\n        \"[0,1,1,1,1,1,1,1,1,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0],\"\n        \"[0,0,0,0,0,0,0,0,0,0]]\\n\"\n        \"print(transform(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e94d0465-f74b-4997-b237-3adf96781dfc.json",
    "uuid": "e94d0465-f74b-4997-b237-3adf96781dfc",
    "created": "2025-04-28 23:06:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,0,1,0,1,1,1,1],\n        [1,1,1,1,0,0,0,0,1,1,1],\n        [1,1,1,1,0,0,0,0,1,1,1],\n        [1,0,1,0,0,0,0,0,1,0,1],\n        [1,1,1,1,0,0,0,0,1,1,1],\n        [1,1,1,1,0,0,0,0,1,1,1],\n        [1,1,1,1,0,1,0,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,2,2,2,1,1,1,1],\n        [1,1,3,3,3,4,3,3,3,1,1],\n        [1,1,3,3,4,4,4,3,3,1,1],\n        [1,1,3,3,4,5,4,3,3,1,1],\n        [1,2,3,4,5,6,5,4,3,2,1],\n        [1,1,3,3,4,5,4,3,3,1,1],\n        [1,1,3,3,4,4,4,3,3,1,1],\n        [1,1,3,3,3,4,3,3,3,1,1],\n        [1,1,1,1,2,2,2,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1]\n      ],\n      \"code\": \"def solve(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for i in range(H):\\n        for j in range(W):\\n            d = min(i, j, H-1-i, W-1-j)\\n            result[i][j] = d + 1\\n    return result\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,1,0,1,1,1,0,1,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,0,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,1,1,1,2,2,2,1,1,1,1],\n        [1,1,3,3,3,4,3,3,3,1,1],\n        [1,1,3,3,4,4,4,3,3,1,1],\n        [1,1,3,3,4,5,4,3,3,1,1],\n        [1,2,3,4,5,6,5,4,3,2,1],\n        [1,1,3,3,4,5,4,3,3,1,1],\n        [1,1,3,3,4,4,4,3,3,1,1],\n        [1,1,3,3,3,4,3,3,3,1,1],\n        [1,1,1,1,2,2,2,1,1,1,1],\n        [1,1,1,1,1,2,1,1,1,1,1]\n      ],\n      \"code\": \"def solve(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for i in range(H):\\n        for j in range(W):\\n            d = min(i, j, H-1-i, W-1-j)\\n            result[i][j] = d + 1\\n    return result\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "ea18ba89-85be-4ec6-a9ef-fc39032f17e3.json",
    "uuid": "ea18ba89-85be-4ec6-a9ef-fc39032f17e3",
    "created": "2025-04-28 22:35:30",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # Make a copy\\n    out = [row[:] for row in grid]\\n    H = len(grid)\\n    W = len(grid[0])\\n    # Find the intersection of a horizontal band and a vertical band (corner)\\n    for i in range(1, H-1):\\n        for j in range(1, W):\\n            if grid[i][j] == 1 and grid[i-1][j] == 1 and grid[i][j-1] == 1:\\n                # Place one pixel directly below\\n                out[i+1][j] = 1\\n                return out\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0,0,0],\n        [0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,1,1,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [1,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,1,0,0,0,0],\n        [0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0,0],\n        [0,0,0,0,0,1,1,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # Make a copy\\n    out = [row[:] for row in grid]\\n    H = len(grid)\\n    W = len(grid[0])\\n    # Find the intersection of a downward diagonal and a vertical line\\n    for i in range(1, H-1):\\n        for j in range(1, W-1):\\n            if (grid[i][j] == 1 and\\n                grid[i-1][j-1] == 1 and grid[i+1][j+1] == 1 and  # diagonal\\n                grid[i-1][j] == 1 and grid[i+1][j] == 1):        # vertical\\n                # Place one pixel directly below\\n                out[i+1][j] = 1\\n                return out\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "24dc3fea-a2b3-43f5-9c2e-7feff0de3fb4.json",
    "uuid": "24dc3fea-a2b3-43f5-9c2e-7feff0de3fb4",
    "created": "2025-04-28 22:53:34",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,9,9,9,0,0,0],\n        [0,0,0,9,0,9,0,0,0],\n        [0,0,0,9,9,9,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [3,3,3,3,3,3,3,3,3],\n        [3,2,2,2,2,2,2,2,3],\n        [3,2,1,1,1,1,1,2,3],\n        [3,2,1,9,9,9,1,2,3],\n        [3,2,1,9,1,9,1,2,3],\n        [3,2,1,9,9,9,1,2,3],\n        [3,2,1,1,1,1,1,2,3],\n        [3,2,2,2,2,2,2,2,3],\n        [3,3,3,3,3,3,3,3,3]\n      ],\n      \"code\": \"def compute(grid):\\\\n    n,m = len(grid), len(grid[0])\\\\n    # 위치 목록 구하기\\\\n    sources = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==9]\\\\n    out = [[0]*m for _ in range(n)]\\\\n    for i in range(n):\\\\n        for j in range(m):\\\\n            if grid[i][j]==9:\\\\n                out[i][j]=9\\\\n            else:\\\\n                # Chebyshev 거리 계산\\\\n                D = min(max(abs(i-x), abs(j-y)) for x,y in sources)\\\\n                out[i][j] = 1 if D==1 else 2 if D==2 else 3\\\\n    return out\\\\n\\\\n# 예시 실행\\\\n# result = compute(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,9,0,0,0,0,0,9,0],\n        [0,0,9,0,0,0,9,0,0],\n        [0,0,0,9,0,9,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,9,0,0,0],\n        [0,0,9,0,0,0,9,0,0],\n        [0,9,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [1,1,1,2,2,2,1,1,1],\n        [1,9,1,1,2,1,1,9,1],\n        [1,1,9,1,1,1,9,1,1],\n        [2,1,1,9,1,9,1,2,2],\n        [2,2,2,1,9,1,2,2,2],\n        [2,1,1,9,1,9,1,1,2],\n        [2,1,9,1,1,1,9,1,1],\n        [1,9,1,1,2,2,1,9,1],\n        [1,1,1,2,2,2,2,1,1]\n      ],\n      \"code\": \"def compute(grid):\\\\n    n,m = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==9]\\\\n    out = [[0]*m for _ in range(n)]\\\\n    for i in range(n):\\\\n        for j in range(m):\\\\n            if grid[i][j]==9:\\\\n                out[i][j]=9\\\\n            else:\\\\n                D = min(max(abs(i-x), abs(j-y)) for x,y in sources)\\\\n                out[i][j] = 1 if D==1 else 2 if D==2 else 3\\\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,9,9,9,9,9,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [3,3,2,2,2,2,2,3,3],\n        [3,3,2,1,1,1,2,3,3],\n        [3,3,2,1,9,1,2,3,3],\n        [3,3,2,1,9,1,2,3,3],\n        [2,1,9,9,9,9,9,1,2],\n        [2,1,1,1,9,1,1,1,2],\n        [2,2,2,1,9,1,2,3,3],\n        [3,3,2,1,1,1,2,3,3],\n        [3,3,2,2,2,2,2,3,3]\n      ],\n      \"code\": \"def compute(grid):\\\\n    n,m = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==9]\\\\n    out = [[0]*m for _ in range(n)]\\\\n    for i in range(n):\\\\n        for j in range(m):\\\\n            if grid[i][j]==9:\\\\n                out[i][j]=9\\\\n            else:\\\\n                D = min(max(abs(i-x), abs(j-y)) for x,y in sources)\\\\n                out[i][j] = 1 if D==1 else 2 if D==2 else 3\\\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,9,9,9,9,9,0,0],\n        [0,0,9,9,9,9,0,0,0],\n        [0,0,9,9,9,0,0,0,0],\n        [0,0,9,9,0,0,0,0,0],\n        [0,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,1,1,1,1,1,1,1,2],\n        [2,1,9,9,9,9,9,1,2],\n        [2,1,9,9,9,9,1,1,2],\n        [2,1,9,9,9,1,2,2,2],\n        [2,1,9,9,1,2,2,2,3],\n        [2,1,9,1,1,2,3,3,3],\n        [2,1,1,1,2,2,3,3,3],\n        [2,2,2,2,2,3,3,3,3]\n      ],\n      \"code\": \"def compute(grid):\\\\n    n,m = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==9]\\\\n    out = [[0]*m for _ in range(n)]\\\\n    for i in range(n):\\\\n        for j in range(m):\\\\n            if grid[i][j]==9:\\\\n                out[i][j]=9\\\\n            else:\\\\n                D = min(max(abs(i-x), abs(j-y)) for x,y in sources)\\\\n                out[i][j] = 1 if D==1 else 2 if D==2 else 3\\\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "27a2e4e1-5c13-451a-8f8b-e893dc3a514b.json",
    "uuid": "27a2e4e1-5c13-451a-8f8b-e893dc3a514b",
    "created": "2025-04-28 22:35:34",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,1,1,1,1,0,0,0,0],\n        [0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def solve(grid):\\n    n, m = len(grid), len(grid[0])\\n    cy, cx = n//2, m//2\\n    out = [row[:] for row in grid]\\n    for y in range(n):\\n        for x in range(m):\\n            if grid[y][x] not in (0,9):\\n                dy, dx = y - cy, x - cx\\n                ny = cy - dx\\n                nx = cx + dy\\n                out[y][x] = 0\\n                out[ny][nx] = grid[y][x]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def solve(grid):\\n    n, m = len(grid), len(grid[0])\\n    cy, cx = n//2, m//2\\n    out = [row[:] for row in grid]\\n    for y in range(n):\\n        for x in range(m):\\n            if grid[y][x] not in (0,9):\\n                dy, dx = y - cy, x - cx\\n                ny = cy - dx\\n                nx = cx + dy\\n                out[y][x] = 0\\n                out[ny][nx] = grid[y][x]\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "2e14b408-01bc-4fa6-a761-0f1ad2d9ea0d.json",
    "uuid": "2e14b408-01bc-4fa6-a761-0f1ad2d9ea0d",
    "created": "2025-04-28 22:41:11",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,1,0,0,0],\n                [0,8,0,0,0,2,0],\n                [0,0,0,0,0,0,0],\n                [7,0,0,0,0,0,3],\n                [0,0,0,0,0,0,0],\n                [0,6,0,0,0,4,0],\n                [0,0,0,5,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,8,0,0,0],\n                [0,1,0,0,0,0,2],\n                [0,0,0,0,0,0,0],\n                [6,0,0,0,0,0,1],\n                [0,0,0,0,0,0,0],\n                [0,5,0,0,0,0,3],\n                [0,0,0,4,0,0,0]\n            ],\n            \"code\": \"def rotate_clockwise(grid):\\n    # grid is a 7×7 list of lists\\n    # define the eight ring positions (row, col) in clockwise order starting at North\\n    coords = [(0,3),(1,5),(3,6),(5,5),(6,3),(5,1),(3,0),(1,1)]\\n    out = [row[:] for row in grid]\\n    # move each from the previous position\\n    for i, (r,c) in enumerate(coords):\\n        pr, pc = coords[i-1]  # previous in the list (wraps around)\\n        out[r][c] = grid[pr][pc]\\n    return out\\n\\n# Example usage:\\n# grid = <the input above>\\n# print(rotate_clockwise(grid))\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0],\n                [8,8,0,1,1,0,2,2,0],\n                [8,8,0,1,1,0,2,2,0],\n                [0,0,0,0,0,0,0,0,0],\n                [7,7,0,0,0,0,3,3,0],\n                [7,7,0,0,0,0,3,3,0],\n                [0,0,0,0,0,0,0,0,0],\n                [6,6,0,5,5,0,4,4,0],\n                [6,6,0,5,5,0,4,4,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0],\n                [7,7,0,8,8,0,1,1,0],\n                [7,7,0,8,8,0,1,1,0],\n                [0,0,0,0,0,0,0,0,0],\n                [6,6,0,0,0,0,2,2,0],\n                [6,6,0,0,0,0,2,2,0],\n                [0,0,0,0,0,0,0,0,0],\n                [5,5,0,4,4,0,3,3,0],\n                [5,5,0,4,4,0,3,3,0]\n            ],\n            \"code\": \"def rotate_each_block(grid):\\n    # grid is a 9×9 list of lists\\n    # top-left corners of the eight 2×2 blocks\\n    blocks = [(1,0),(1,3),(1,6),(4,0),(4,6),(7,0),(7,3),(7,6)]\\n    out = [row[:] for row in grid]\\n    for r,c in blocks:\\n        a = grid[r][c]\\n        b = grid[r][c+1]\\n        d = grid[r+1][c]\\n        e = grid[r+1][c+1]\\n        # clockwise rotate within the block\\n        out[r][c]     = d  # bottom-left → top-left\\n        out[r][c+1]   = a  # top-left    → top-right\\n        out[r+1][c+1] = b  # top-right   → bottom-right\\n        out[r+1][c]   = e  # bottom-right→ bottom-left\\n    return out\\n\\n# Example usage:\\n# grid = <the input above>\\n# print(rotate_each_block(grid))\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "42a053cc-7ae9-4a3c-b97e-3aead2e535df.json",
    "uuid": "42a053cc-7ae9-4a3c-b97e-3aead2e535df",
    "created": "2025-04-28 22:28:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,8,8,8,8,8,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,1,8,1,0,0,0],\n        [0,0,8,8,8,8,8,0,0],\n        [0,0,0,1,8,1,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"grid = [\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,8,0,0,0,0],\\n    [0,0,0,0,8,0,0,0,0],\\n    [0,0,8,8,8,8,8,0,0],\\n    [0,0,0,0,8,0,0,0,0],\\n    [0,0,0,0,8,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0]\\n]\\n# Center of plus-shape\\nC_r, C_c = 4, 4\\n# four diagonal neighbors\\ndeltas = [(-1,-1),(-1,1),(1,-1),(1,1)]\\nfor dr, dc in deltas:\\n    r, c = C_r+dr, C_c+dc\\n    if grid[r][c] != 8:\\n        grid[r][c] = 1\\n# grid now matches the output\\nprint(grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,8,0,0,0,8,0,0],\n        [0,0,0,8,0,8,0,0,0],\n        [0,0,0,0,8,0,0,0,0],\n        [0,0,0,8,0,8,0,0,0],\n        [0,0,8,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,8,0,0,0,8,0,0],\n        [0,0,0,8,1,8,0,0,0],\n        [0,0,0,1,8,1,0,0,0],\n        [0,0,0,8,1,8,0,0,0],\n        [0,0,8,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"grid = [\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,8,0,0,0,8,0,0],\\n    [0,0,0,8,0,8,0,0,0],\\n    [0,0,0,0,8,0,0,0,0],\\n    [0,0,0,8,0,8,0,0,0],\\n    [0,0,8,0,0,0,8,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0]\\n]\\n# Center of X-shape\\nC_r, C_c = 4, 4\\n# four orthogonal neighbors\\ndeltas = [(-1,0),(1,0),(0,-1),(0,1)]\\nfor dr, dc in deltas:\\n    r, c = C_r+dr, C_c+dc\\n    if grid[r][c] != 8:\\n        grid[r][c] = 1\\nprint(grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "573ccb05-d410-4f3a-9e3b-ce74a624c630.json",
    "uuid": "573ccb05-d410-4f3a-9e3b-ce74a624c630",
    "created": "2025-04-28 22:30:29",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0],\n        [0,0,2,0,0,0,0],\n        [0,0,2,2,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0],\n        [0,0,3,3,3,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    pr, pc = n//2, n//2\\n    out = [[0]*n for _ in range(n)]\\n    for r in range(n):\\n        for c in range(n):\\n            v = grid[r][c]\\n            if v != 0:\\n                dr, dc = r-pr, c-pc\\n                nr = pr - dc\\n                nc = pc + dr\\n                out[nr][nc] = v + 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,3,0,0,0],\n        [0,0,3,3,3,0,0],\n        [0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,4,4,4,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    pr, pc = n//2, n//2\\n    out = [[0]*n for _ in range(n)]\\n    for r in range(n):\\n        for c in range(n):\\n            v = grid[r][c]\\n            if v != 0:\\n                dr, dc = r-pr, c-pc\\n                nr = pr - dc\\n                nc = pc + dr\\n                out[nr][nc] = v + 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,4,4,4,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0],\n        [0,0,5,5,5,0,0],\n        [0,0,5,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    pr, pc = n//2, n//2\\n    out = [[0]*n for _ in range(n)]\\n    for r in range(n):\\n        for c in range(n):\\n            v = grid[r][c]\\n            if v != 0:\\n                dr, dc = r-pr, c-pc\\n                nr = pr - dc\\n                nc = pc + dr\\n                out[nr][nc] = v + 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0],\n        [0,0,0,0,5,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0],\n        [0,0,0,6,0,0,0],\n        [0,0,6,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    pr, pc = n//2, n//2\\n    out = [[0]*n for _ in range(n)]\\n    for r in range(n):\\n        for c in range(n):\\n            v = grid[r][c]\\n            if v != 0:\\n                dr, dc = r-pr, c-pc\\n                nr = pr - dc\\n                nc = pc + dr\\n                out[nr][nc] = v + 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,6,6,6,6,6,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,7,0,0,0],\n        [0,0,0,7,0,0,0],\n        [0,0,0,7,0,0,0],\n        [0,0,0,7,0,0,0],\n        [0,0,0,7,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    pr, pc = n//2, n//2\\n    out = [[0]*n for _ in range(n)]\\n    for r in range(n):\\n        for c in range(n):\\n            v = grid[r][c]\\n            if v != 0:\\n                dr, dc = r-pr, c-pc\\n                nr = pr - dc\\n                nc = pc + dr\\n                out[nr][nc] = v + 1\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9b833574-6a47-47bb-8731-fe017eff95fa.json",
    "uuid": "9b833574-6a47-47bb-8731-fe017eff95fa",
    "created": "2025-04-28 22:39:33",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,5,0,0,0,0,0,0,0,0],\n        [7,0,0,0,0,2,0,0,0,0,0],\n        [0,7,0,0,2,2,2,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,5,0],\n        [7,0,2,2,2,2,2,2,2,0,5],\n        [0,0,2,2,2,2,2,2,2,2,7],\n        [0,5,0,2,2,2,2,2,0,7,0],\n        [5,0,0,0,2,2,2,0,0,0,7],\n        [0,0,0,5,0,2,0,7,0,0,0],\n        [0,5,0,0,6,6,6,0,0,7,0],\n        [0,0,0,0,6,6,6,0,5,0,0]\n      ],\n      \"output\": [\n        [0,0,5,0,0,9,0,0,0,0,0],\n        [7,0,0,0,0,2,0,0,0,0,0],\n        [0,7,0,0,2,2,2,0,0,0,0],\n        [0,0,3,2,2,2,2,8,0,5,0],\n        [7,0,4,4,4,4,4,4,4,5,0],\n        [0,0,2,2,8,2,2,2,3,2,7],\n        [0,5,0,4,4,4,4,4,0,7,0],\n        [5,0,0,0,3,2,8,0,0,0,7],\n        [0,0,0,5,4,4,4,7,0,0,0],\n        [0,5,0,0,6,6,6,0,0,7,0],\n        [0,0,0,0,6,6,6,0,5,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    # Copy input\\n    out = [row[:] for row in grid]\\n    # Find tree columns and rows (value 2)\\n    cols = sorted(c for r in range(len(grid)) for c,v in enumerate(grid[r]) if v==2)\\n    col_min, col_max = cols[0], cols[-1]\\n    rows = sorted(r for r, row in enumerate(grid) for v in row if v==2)\\n    top = rows[0]\\n    # center column for star\\n    center = (col_min + col_max) // 2\\n    # place star = 9\\n    out[top-1][center] = 9\\n    # ribbon rows at top+3, top+5, top+7, value = 4\\n    stripe_rows = [top+3, top+5, top+7]\\n    for r in stripe_rows:\\n        for c in range(col_min, col_max+1):\\n            out[r][c] = 4\\n    # ornaments 3 and 8 alternately on the row above each ribbon\\n    for i, r in enumerate(stripe_rows):\\n        left, right = col_min, col_max-1\\n        if i % 2 == 0:\\n            out[r-1][left], out[r-1][right] = 3, 8\\n        else:\\n            out[r-1][left], out[r-1][right] = 8, 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,1,0,0,3,0,0,0,1,0,0],\n        [0,0,0,3,0,2,0,0,0,0,1],\n        [0,0,1,0,2,2,2,0,3,0,0],\n        [1,0,0,2,2,2,2,2,0,0,3],\n        [0,3,2,2,2,2,2,2,2,3,0],\n        [0,0,2,2,2,2,2,2,2,0,1],\n        [0,3,0,2,2,2,2,2,0,0,0],\n        [0,0,0,0,2,2,2,0,1,0,3],\n        [0,1,0,0,0,2,0,0,3,0,0],\n        [0,0,0,0,6,6,6,0,0,1,0],\n        [3,0,0,0,6,6,6,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,0,0,3,7,0,0,1,0,0],\n        [0,0,0,3,0,2,0,0,0,0,1],\n        [0,0,1,0,2,2,2,0,3,0,0],\n        [1,0,5,2,2,2,2,6,0,0,3],\n        [0,3,8,8,8,8,8,8,8,3,0],\n        [0,0,2,2,6,2,2,2,5,0,1],\n        [0,3,0,8,8,8,8,8,0,0,0],\n        [0,0,0,0,5,2,6,0,1,0,3],\n        [0,1,0,0,8,8,8,0,3,0,0],\n        [0,0,0,0,6,6,6,0,0,1,0],\n        [3,0,0,0,6,6,6,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    out = [row[:] for row in grid]\\n    cols = sorted(c for r in range(len(grid)) for c,v in enumerate(grid[r]) if v==2)\\n    col_min, col_max = cols[0], cols[-1]\\n    rows = sorted(r for r, row in enumerate(grid) for v in row if v==2)\\n    top = rows[0]\\n    center = (col_min + col_max) // 2\\n    # place star = 7\\n    out[top-1][center] = 7\\n    # ribbon rows value = 8\\n    stripe_rows = [top+3, top+5, top+7]\\n    for r in stripe_rows:\\n        for c in range(col_min, col_max+1):\\n            out[r][c] = 8\\n    # ornaments 5 and 6 alternately above each ribbon\\n    for i, r in enumerate(stripe_rows):\\n        left, right = col_min, col_max-1\\n        if i % 2 == 0:\\n            out[r-1][left], out[r-1][right] = 5, 6\\n        else:\\n            out[r-1][left], out[r-1][right] = 6, 5\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9e2f0ade-ea2e-4de3-b755-afb735008272.json",
    "uuid": "9e2f0ade-ea2e-4de3-b755-afb735008272",
    "created": "2025-04-28 22:33:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,8,8,8,0,0,0,8,8,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [6,6,6,0,0,0,0,0,0,6,6,6,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,2,2,2,2,2,2,2,2,2,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,7,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,9,9,9,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,8,8,8,0,0,0,8,8,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [6,6,6,0,0,0,4,0,0,6,6,6,0],\n        [0,0,0,0,0,5,4,5,0,0,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,2,2,2,2,2,2,2,2,2,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,7,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,9,9,9,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    new = [row[:] for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 3:\\n                if r-1 >= 0: new[r-1][c] = 4\\n                if r-2 >= 0: new[r-2][c] = 4\\n                if r-1 >= 0 and c-1 >= 0: new[r-1][c-1] = 5\\n                if r-1 >= 0 and c+1 < w: new[r-1][c+1] = 5\\n    return new\\n\\n# example usage\\noutput = transform(input_grid)  # where input_grid is the above input\\nprint(output)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,9,0],\n        [0,0,0,8,8,8,0,0,0,8,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,0,0,0,0,0,0,0,0,0,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,3,2,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,6,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,7,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,9,0],\n        [0,0,0,8,8,8,0,0,0,8,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,0,0,0,0,0,0,0,0,0,7,7],\n        [0,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,5,4,5,0,0,0,0,0,0,0],\n        [0,0,0,2,3,2,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,6,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,7,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    new = [row[:] for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 3:\\n                if r-1 >= 0: new[r-1][c] = 4\\n                if r-2 >= 0: new[r-2][c] = 4\\n                if r-1 >= 0 and c-1 >= 0: new[r-1][c-1] = 5\\n                if r-1 >= 0 and c+1 < w: new[r-1][c+1] = 5\\n    return new\\n\\n# example usage\\noutput = transform(input_grid)\\nprint(output)\"\n    },\n    {\n      \"input\": [\n        [0,9,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,8,8,0,0,0,8,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,7,0,0,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,6,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,9,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,8,8,0,0,0,8,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,7,0,0,5,4,5,0,0,7,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,6,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    new = [row[:] for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 3:\\n                if r-1 >= 0: new[r-1][c] = 4\\n                if r-2 >= 0: new[r-2][c] = 4\\n                if r-1 >= 0 and c-1 >= 0: new[r-1][c-1] = 5\\n                if r-1 >= 0 and c+1 < w: new[r-1][c+1] = 5\\n    return new\\n\\n# example usage\\noutput = transform(input_grid)\\nprint(output)\"\n    },\n    {\n      \"input\": [\n        [0,0,8,0,0,9,0,0,8,0,0,0,0],\n        [0,7,7,7,0,0,0,0,0,7,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,2,2,2,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,2,2,2,2,2,2,2,2,2,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,6,0,0,0,0,0,6,0,0,0],\n        [0,0,9,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,7,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,8,0,0,9,0,0,8,0,0,0,0],\n        [0,7,7,7,0,0,0,0,0,4,7,7,0],\n        [0,0,0,0,0,0,5,4,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,2,2,2,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,2,2,2,2,2,2,2,2,2,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,6,0,0,0,0,0,6,0,0,0],\n        [0,0,9,0,0,0,0,0,0,0,9,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,7,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    new = [row[:] for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 3:\\n                if r-1 >= 0: new[r-1][c] = 4\\n                if r-2 >= 0: new[r-2][c] = 4\\n                if r-1 >= 0 and c-1 >= 0: new[r-1][c-1] = 5\\n                if r-1 >= 0 and c+1 < w: new[r-1][c+1] = 5\\n    return new\\n\\n# example usage\\noutput = transform(input_grid)\\nprint(output)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "ee89ccf3-f999-4a32-a4a4-114a85a6b1ee.json",
    "uuid": "ee89ccf3-f999-4a32-a4a4-114a85a6b1ee",
    "created": "2025-04-28 22:30:07",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,7,0,0,0],\n        [0,0,5,7,5,7,5,0,0],\n        [0,5,5,5,5,5,5,5,0],\n        [5,5,5,7,3,7,5,5,5],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1],\n        [5,5,5,7,3,7,5,5,5],\n        [0,5,5,5,5,5,5,5,0],\n        [0,0,5,7,5,7,5,0,0],\n        [0,0,0,5,0,7,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # Find floor row (all 1s)\\n    R = next(i for i,row in enumerate(grid) if all(x==1 for x in row))\\n    H, W = len(grid), len(grid[0])\\n    # Prepare empty output\\n    out = [[0]*W for _ in range(H)]\\n    # Copy the floor row\\n    out[R] = grid[R][:]\\n    # Mirror objects above the floor\\n    for r in range(R):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                rr = R + (R - r)\\n                if rr < H:\\n                    out[rr][c] = v\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,8,8,8,0,0,0,0],\n        [0,0,0,8,8,2,8,8,0,0,0],\n        [0,0,8,8,8,8,8,8,8,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,8,8,8,8,8,8,8,0,0],\n        [0,0,0,8,8,2,8,8,0,0,0],\n        [0,0,0,0,8,8,8,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R = next(i for i,row in enumerate(grid) if all(x==1 for x in row))\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    out[R] = grid[R][:]\\n    for r in range(R):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                rr = R + (R - r)\\n                if rr < H:\\n                    out[rr][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,9,0,0,0,0,0,0],\n        [0,0,0,0,0,9,4,9,0,0,0,0,0],\n        [0,0,0,0,9,4,4,4,9,0,0,0,0],\n        [0,0,0,9,4,7,4,4,4,9,0,0,0],\n        [0,0,9,4,4,4,4,4,4,4,9,0,0],\n        [0,9,4,4,4,4,4,4,4,4,4,9,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,9,4,4,4,4,4,4,4,4,4,9,0],\n        [0,0,9,4,4,4,4,4,4,4,9,0,0],\n        [0,0,0,9,4,7,4,4,4,9,0,0,0],\n        [0,0,0,0,9,4,4,4,9,0,0,0,0],\n        [0,0,0,0,0,9,4,9,0,0,0,0,0],\n        [0,0,0,0,0,0,9,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R = next(i for i,row in enumerate(grid) if all(x==1 for x in row))\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    out[R] = grid[R][:]\\n    for r in range(R):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                rr = R + (R - r)\\n                if rr < H:\\n                    out[rr][c] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0,0,0],\n        [0,0,3,3,6,3,3,0,0,0,0],\n        [0,3,3,3,3,3,3,3,0,0,0],\n        [3,3,3,3,3,3,3,3,3,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [3,3,3,3,3,3,3,3,3,0,0],\n        [0,3,3,3,3,3,3,3,0,0,0],\n        [0,0,3,3,6,3,3,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    R = next(i for i,row in enumerate(grid) if all(x==1 for x in row))\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    out[R] = grid[R][:]\\n    for r in range(R):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                rr = R + (R - r)\\n                if rr < H:\\n                    out[rr][c] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "eb18e2fb-be16-4018-ab9b-bc39e0e3175c.json",
    "uuid": "eb18e2fb-be16-4018-ab9b-bc39e0e3175c",
    "created": "2025-04-28 22:39:20",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0],\n        [0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0],\n        [0,2,2,2,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0],\n        [0,0,0,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_matrix = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2,0,0],[0,0,0,0,0,0,2,2,2,0],[0,0,0,0,0,0,0,2,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]\\ndef rotate_180(matrix):\\n    return [row[::-1] for row in matrix[::-1]]\\noutput_matrix = rotate_180(input_matrix)\\nprint(output_matrix)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,0,1,0,0,1,0,0,0],\n        [0,0,0,1,1,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,2,2,0,0,0,0],\n        [0,0,0,2,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,2,2,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,0,1,1,0,0,0,0],\n        [0,0,1,0,0,1,0,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_matrix = [[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,0,1,0,0,1,0,0,0],[0,0,0,1,1,0,0,0,0],[0,0,0,1,0,1,0,0,0],[0,0,1,0,0,0,1,0,0],[0,0,0,2,2,0,0,0,0],[0,0,0,2,2,0,0,0,0]]\\ndef rotate_180(matrix):\\n    return [row[::-1] for row in matrix[::-1]]\\noutput_matrix = rotate_180(input_matrix)\\nprint(output_matrix)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "0ad85a6a-a74f-409c-a5c2-064d289ffdae.json",
    "uuid": "0ad85a6a-a74f-409c-a5c2-064d289ffdae",
    "created": "2025-04-28 22:30:11",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,7,0,7,0,7,0,0,0],\n        [0,0,7,0,7,0,7,0,0],\n        [0,7,0,7,2,0,0,0,0],\n        [1,1,1,2,2,2,0,0,0],\n        [0,0,7,0,2,0,0,0,0],\n        [0,7,0,7,0,0,0,0,0],\n        [0,0,7,0,7,0,7,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,7,0,7,0,7,0,0,4],\n        [0,0,7,0,7,0,0,4,0],\n        [0,7,0,7,2,0,4,0,0],\n        [0,0,0,2,2,2,3,3,3],\n        [0,0,7,0,2,6,5,0,0],\n        [0,7,0,7,0,6,0,5,0],\n        [0,0,7,0,7,6,0,0,5],\n        [0,0,0,0,0,6,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m,n = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # 1) erase all 1s\\n    for i in range(m):\\n        for j in range(n):\\n            if out[i][j] == 1:\\n                out[i][j] = 0\\n    # 2) find prism cells\\n    prism_cells = [(i,j) for i in range(m) for j in range(n) if grid[i][j] == 2]\\n    # choose the right-edge center of prism\\n    max_col = max(j for i,j in prism_cells)\\n    right_edge = [(i,j) for i,j in prism_cells if j == max_col]\\n    center_rows = sorted(i for i,j in right_edge)\\n    pr, pc = center_rows[len(center_rows)//2], max_col\\n    # 3) emit beams: →3, ↗4, ↘5, ↓6\\n    directions = [((0,1),3),((-1,1),4),((1,1),5),((1,0),6)]\\n    for (di,dj), val in directions:\\n        i,j = pr, pc\\n        while True:\\n            i += di; j += dj\\n            if not (0 <= i < m and 0 <= j < n):\\n                break\\n            if out[i][j] == 0:\\n                out[i][j] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0],\n        [0,0,8,0,2,0,8,0,0],\n        [1,1,1,2,2,2,0,0,0],\n        [0,0,8,0,2,0,8,0,0],\n        [0,0,0,8,8,8,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,4],\n        [0,0,0,8,8,8,0,4,0],\n        [0,0,8,0,2,0,8,0,0],\n        [0,0,0,2,2,2,3,3,3],\n        [0,0,8,0,2,6,5,0,0],\n        [0,0,0,8,8,8,0,5,0],\n        [0,0,0,0,0,6,0,0,5],\n        [0,0,0,0,0,6,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m,n = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(m):\\n        for j in range(n):\\n            if out[i][j] == 1:\\n                out[i][j] = 0\\n    prism_cells = [(i,j) for i in range(m) for j in range(n) if grid[i][j] == 2]\\n    max_col = max(j for i,j in prism_cells)\\n    right_edge = [(i,j) for i,j in prism_cells if j == max_col]\\n    center_rows = sorted(i for i,j in right_edge)\\n    pr, pc = center_rows[len(center_rows)//2], max_col\\n    directions = [((0,1),3),((-1,1),4),((1,1),5),((1,0),6)]\\n    for (di,dj), val in directions:\\n        i,j = pr, pc\\n        while True:\\n            i += di; j += dj\\n            if not (0 <= i < m and 0 <= j < n): break\\n            if out[i][j] == 0:\\n                out[i][j] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [1,1,1,2,2,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [9,9,0,0,0,0,0,0,0],\n        [9,9,9,0,0,0,0,0,0],\n        [9,9,9,9,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,4],\n        [0,0,0,0,0,0,0,4,0],\n        [0,0,0,0,2,0,4,0,0],\n        [0,0,0,2,2,2,3,3,3],\n        [0,0,0,0,2,6,5,0,0],\n        [9,9,0,0,0,6,0,5,0],\n        [9,9,9,0,0,6,0,0,5],\n        [9,9,9,9,0,6,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m,n = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(m):\\n        for j in range(n):\\n            if out[i][j] == 1: out[i][j] = 0\\n    prism_cells = [(i,j) for i in range(m) for j in range(n) if grid[i][j] == 2]\\n    max_col = max(j for i,j in prism_cells)\\n    right_edge = [(i,j) for i,j in prism_cells if j == max_col]\\n    center_rows = sorted(i for i,j in right_edge)\\n    pr, pc = center_rows[len(center_rows)//2], max_col\\n    dirs = [((0,1),3),((-1,1),4),((1,1),5),((1,0),6)]\\n    for (di,dj), val in dirs:\\n        i,j = pr, pc\\n        while True:\\n            i += di; j += dj\\n            if not (0 <= i < m and 0 <= j < n): break\\n            if out[i][j] == 0: out[i][j] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [7,0,0,0,0,0,0,0,0],\n        [7,0,0,0,0,0,0,0,0],\n        [7,7,7,2,2,2,0,0,0],\n        [1,1,1,2,2,2,0,0,0],\n        [0,0,0,0,2,0,0,8,0],\n        [0,0,0,0,0,0,0,8,8],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,4],\n        [7,0,0,0,0,0,0,0,0],\n        [7,0,0,0,0,0,0,4,0],\n        [7,7,7,2,2,2,4,0,0],\n        [0,0,0,2,2,2,3,3,3],\n        [0,0,0,0,2,6,5,8,0],\n        [0,0,0,0,0,6,0,8,5],\n        [0,0,0,0,0,6,0,0,5],\n        [0,0,0,0,0,6,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m,n = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for i in range(m):\\n        for j in range(n):\\n            if out[i][j] == 1: out[i][j] = 0\\n    prism_cells = [(i,j) for i in range(m) for j in range(n) if grid[i][j] == 2]\\n    max_col = max(j for i,j in prism_cells)\\n    right_edge = [(i,j) for i,j in prism_cells if j == max_col]\\n    center_rows = sorted(i for i,j in right_edge)\\n    pr, pc = center_rows[len(center_rows)//2], max_col\\n    beams = [((0,1),3),((-1,1),4),((1,1),5),((1,0),6)]\\n    for (di,dj), val in beams:\\n        i,j = pr, pc\\n        while True:\\n            i += di; j += dj\\n            if not (0 <= i < m and 0 <= j < n): break\\n            if out[i][j] == 0: out[i][j] = val\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "05fe77db-543a-4340-96a9-3b89a8c1014e.json",
    "uuid": "05fe77db-543a-4340-96a9-3b89a8c1014e",
    "created": "2025-04-28 22:43:39",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,2,0,0,0,1],\n        [1,0,0,0,2,0,0,0,2,0,0,0,1],\n        [1,0,0,0,0,0,2,9,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,5,5,5,5,5,3,1,0,0,0,0,1],\n        [1,5,7,7,7,5,3,1,0,0,0,0,1],\n        [1,5,7,9,7,5,3,1,1,1,1,1,1],\n        [1,5,7,7,5,3,2,3,3,3,0,0,1],\n        [1,5,5,5,2,3,3,3,2,5,5,0,1],\n        [1,5,7,7,2,3,3,3,2,5,5,0,1],\n        [1,5,7,9,7,5,2,9,6,3,1,1,1],\n        [1,0,0,1,3,5,7,7,7,5,3,0,1],\n        [1,0,0,1,3,5,5,5,5,5,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def compute_output(grid):\\\\n    h, w = len(grid), len(grid[0])\\\\n    # find all light sources\\\\n    sources = [(i,j) for i in range(h) for j in range(w) if grid[i][j] == 9]\\\\n    out = [[grid[i][j] for j in range(w)] for i in range(h)]\\\\n    for i in range(h):\\\\n        for j in range(w):\\\\n            if grid[i][j] == 0:  # water cell, compute ripple intensity\\\\n                best = 0\\\\n                for si, sj in sources:\\\\n                    d = max(abs(i-si), abs(j-sj))\\\\n                    t = 9 - 2*d\\\\n                    if t > best: best = t\\\\n                out[i][j] = best if best > 0 else 0\\\\n    return out\\\\n\\\\n# Example usage:\\\\n# result = compute_output(input_grid)  # matches the above output\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,9,0,0,0,0,1],\n        [1,3,3,0,0,0,0,0,0,0,0,0,1],\n        [1,3,3,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,5,5,5,5,5,3,1,0,0,0,0,1],\n        [1,5,7,7,7,5,3,1,0,0,0,0,1],\n        [1,5,7,9,7,5,3,1,1,1,1,1,1],\n        [1,5,7,7,5,3,3,3,3,3,0,0,1],\n        [1,5,5,5,5,5,5,5,5,5,5,0,1],\n        [1,5,7,7,5,3,3,3,3,3,0,0,1],\n        [1,5,7,9,7,5,3,1,1,1,1,1,1],\n        [1,3,3,1,3,5,7,7,7,5,3,0,1],\n        [1,3,3,1,3,5,5,5,5,5,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def compute_output(grid):\\\\n    h, w = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(h) for j in range(w) if grid[i][j] == 9]\\\\n    out = [[grid[i][j] for j in range(w)] for i in range(h)]\\\\n    for i in range(h):\\\\n        for j in range(w):\\\\n            if grid[i][j] == 0:\\\\n                best = 0\\\\n                for si, sj in sources:\\\\n                    d = max(abs(i-si), abs(j-sj))\\\\n                    t = 9 - 2*d\\\\n                    if t > best: best = t\\\\n                out[i][j] = best if best > 0 else 0\\\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,9,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,5,5,5,5,5,3,1,0,0,0,0,1],\n        [1,5,7,7,7,5,3,1,0,0,0,0,1],\n        [1,5,7,9,7,5,3,1,1,1,1,1,1],\n        [1,5,7,7,5,3,3,3,3,3,0,0,1],\n        [1,5,5,5,5,5,5,5,5,5,5,0,1],\n        [1,5,7,7,5,3,3,3,3,3,0,0,1],\n        [1,5,7,9,7,5,3,1,1,1,1,1,1],\n        [1,0,0,1,3,4,4,4,3,1,0,0,1],\n        [1,0,0,1,3,4,4,4,3,1,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def compute_output(grid):\\\\n    h, w = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(h) for j in range(w) if grid[i][j] == 9]\\\\n    out = [[grid[i][j] for j in range(w)] for i in range(h)]\\\\n    for i in range(h):\\\\n        for j in range(w):\\\\n            if grid[i][j] == 0:\\\\n                best = 0\\\\n                for si, sj in sources:\\\\n                    d = max(abs(i-si), abs(j-sj))\\\\n                    t = 9 - 2*d\\\\n                    if t > best: best = t\\\\n                out[i][j] = best if best > 0 else 0\\\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,5,5,5,5,5,0,0,0,1],\n        [1,0,0,0,5,5,5,5,5,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,9,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,5,5,5,7,9,7,5,3,1,0,0,1],\n        [1,5,7,7,9,9,9,9,7,5,3,1,1],\n        [1,5,7,9,9,9,9,9,7,5,3,1,1],\n        [1,5,7,7,9,9,9,7,5,3,1,1],\n        [1,5,5,5,7,7,7,5,3,1,0,0,1],\n        [1,3,3,3,5,5,5,3,1,0,0,0,1],\n        [1,1,1,1,3,3,3,9,6,3,1,1,1],\n        [1,0,0,1,3,5,7,7,7,5,3,0,1],\n        [1,0,0,1,3,5,5,5,5,5,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def compute_output(grid):\\\\n    h, w = len(grid), len(grid[0])\\\\n    sources = [(i,j) for i in range(h) for j in range(w) if grid[i][j] == 9]\\\\n    out = [[grid[i][j] for j in range(w)] for i in range(h)]\\\\n    for i in range(h):\\\\n        for j in range(w):\\\\n            if grid[i][j] == 0:\\\\n                best = 0\\\\n                for si, sj in sources:\\\\n                    d = max(abs(i-si), abs(j-sj))\\\\n                    t = 9 - 2*d\\\\n                    if t > best: best = t\\\\n                out[i][j] = best if best > 0 else 0\\\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "12bae9f4-a7ac-4030-9bc9-866867c46e5c.json",
    "uuid": "12bae9f4-a7ac-4030-9bc9-866867c46e5c",
    "created": "2025-04-28 22:31:54",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,1,0,1,0,0,0],\n        [0,0,0,1,0,1,0,1,0,1,0,0],\n        [0,0,1,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,1,0,1,0,0,0],\n        [0,0,0,1,0,1,0,1,0,1,0,0],\n        [0,0,1,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    result = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v != 0:\\n                ni = i - 2\\n                if ni >= 0:\\n                    result[ni][j] = max(result[ni][j], v)\\n    return result\\n\\n# apply to this task:\\ninput_grid = \" + str([[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,1,0,1,0,0,0],[0,0,0,1,0,1,0,1,0,1,0,0],[0,0,1,0,1,0,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]) + \"\\noutput_grid = transform(input_grid)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,0,3,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,0,0,0,0],\n        [0,0,0,3,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,0,3,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,0,0,0,0],\n        [0,0,0,3,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    result = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v != 0:\\n                ni = i - 2\\n                if ni >= 0:\\n                    result[ni][j] = max(result[ni][j], v)\\n    return result\\n\\n# apply to this task:\\ninput_grid = \" + str([[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,3,0,0,3,0,0,0,0,0],[0,0,3,3,3,3,3,3,0,0,0,0],[0,0,0,3,0,0,3,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]) + \"\\noutput_grid = transform(input_grid)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,0,4,0,0,0,0,0,0],\n        [0,0,4,4,0,4,4,0,0,0,0,0],\n        [0,0,4,4,4,4,4,4,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,0,4,0,0,0,0,0,0],\n        [0,0,4,4,0,4,4,0,0,0,0,0],\n        [0,0,4,4,4,4,4,4,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    result = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v != 0:\\n                ni = i - 2\\n                if ni >= 0:\\n                    result[ni][j] = max(result[ni][j], v)\\n    return result\\n\\n# apply to this task:\\ninput_grid = \" + str([[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,4,0,0,4,0,0,0,0,0,0],[0,0,4,4,0,4,4,0,0,0,0,0],[0,0,4,4,4,4,4,4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]) + \"\\noutput_grid = transform(input_grid)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,5,5,5,5,5,5,5,5,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    result = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v != 0:\\n                ni = i - 2\\n                if ni >= 0:\\n                    result[ni][j] = max(result[ni][j], v)\\n    return result\\n\\n# apply to this task:\\ninput_grid = \" + str([[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,5,5,5,5,5,5,5,5,0,0],[0,0,5,5,5,5,5,5,5,5,0,0],[0,0,5,5,5,5,5,5,5,5,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]) + \"\\noutput_grid = transform(input_grid)\\nprint(output_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "442f13d6-6b03-465d-b60e-7242ac56e35b.json",
    "uuid": "442f13d6-6b03-465d-b60e-7242ac56e35b",
    "created": "2025-04-28 22:42:57",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,1,0,0,0,0,0,0,2,0,0],\n                [0,0,0,1,0,0,0,0,2,0,0,0],\n                [5,0,0,0,1,0,0,0,2,0,0,0],\n                [0,5,0,0,0,1,2,0,0,0,0,0],\n                [0,0,0,0,2,0,1,3,3,3,0,0],\n                [0,0,0,5,2,0,0,1,0,0,0,0],\n                [0,0,0,2,5,0,0,0,1,3,0,0],\n                [0,0,0,0,0,0,4,1,0,0,0,0],\n                [0,2,0,0,0,0,0,4,4,4,1,0],\n                [2,0,0,0,0,0,0,0,4,0,0,1],\n                [0,2,0,0,0,0,6,6,6,0,1,0],\n                [0,0,2,0,0,0,0,0,0,1,0,0]\n            ],\n            \"output\": [\n                [1,0,0,0,0,0,0,0,0,0,0,2],\n                [0,1,0,0,0,0,0,0,0,0,2,0],\n                [0,0,1,0,0,0,0,0,0,2,0,0],\n                [0,0,0,1,0,0,0,0,2,0,0,0],\n                [0,0,0,0,1,0,0,3,0,0,0,0],\n                [0,0,0,0,0,1,3,0,0,0,0,0],\n                [0,0,0,0,0,2,3,0,0,0,0,0],\n                [0,0,0,0,2,0,0,3,0,0,0,0],\n                [0,0,0,2,0,0,0,1,0,0,0,0],\n                [0,0,2,0,0,0,0,0,0,1,0,0],\n                [0,2,0,0,0,0,0,0,0,0,1,0],\n                [2,0,0,0,0,0,0,0,0,0,0,1]\n            ],\n            \"code\": \"def transform(grid):\\n    N = len(grid)\\n    res = [[0]*N for _ in range(N)]\\n    for r, row in enumerate(grid):\\n        for c, val in enumerate(row):\\n            if val == 0:\\n                continue\\n            if val == 1:\\n                res[r][r] = 1\\n            elif val == 2:\\n                res[r][N-1-r] = 2\\n            else:\\n                d_main = abs(c - r)\\n                d_anti = abs(c - (N-1-r))\\n                tgt_c = r if d_main <= d_anti else (N-1-r)\\n                if res[r][tgt_c] == 0 or val < res[r][tgt_c]:\\n                    res[r][tgt_c] = val\\n    return res\\n\\n# Example usage:\\n# input_grid = <the input above>\\n# print(transform(input_grid))\"\n        },\n        {\n            \"input\": [\n                [0,0,0,1,0,0,0,0,2,0],\n                [0,0,1,0,0,0,0,2,0,0],\n                [0,1,0,0,0,0,2,0,0,0],\n                [1,0,0,0,0,2,0,0,0,0],\n                [0,0,0,2,0,1,0,0,0,0],\n                [3,0,0,0,3,0,0,0,0,4],\n                [0,4,0,0,0,0,0,0,5,0],\n                [0,0,5,0,0,0,0,6,0,0],\n                [0,6,0,0,0,0,7,0,0,0],\n                [7,0,0,0,8,0,0,0,0,0]\n            ],\n            \"output\": [\n                [1,0,0,0,0,0,0,0,0,2],\n                [0,1,0,0,0,0,0,0,2,0],\n                [0,0,1,0,0,0,0,2,0,0],\n                [0,0,0,1,0,0,2,0,0,0],\n                [0,0,0,0,1,2,0,0,0,0],\n                [0,0,0,0,3,4,0,0,0,0],\n                [0,0,0,4,0,0,5,0,0,0],\n                [0,0,5,0,0,0,0,6,0,0],\n                [0,6,0,0,0,0,0,0,7,0],\n                [7,0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    N = len(grid)\\n    res = [[0]*N for _ in range(N)]\\n    for r, row in enumerate(grid):\\n        for c, val in enumerate(row):\\n            if val == 0:\\n                continue\\n            if val == 1:\\n                res[r][r] = 1\\n            elif val == 2:\\n                res[r][N-1-r] = 2\\n            else:\\n                d_main = abs(c - r)\\n                d_anti = abs(c - (N-1-r))\\n                tgt_c = r if d_main <= d_anti else (N-1-r)\\n                if res[r][tgt_c] == 0 or val < res[r][tgt_c]:\\n                    res[r][tgt_c] = val\\n    return res\\n\\n# Example usage:\\n# input_grid = <the input above>\\n# print(transform(input_grid))\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "7608c46a-f84d-47c2-9732-9dfb6a9cd1f3.json",
    "uuid": "7608c46a-f84d-47c2-9732-9dfb6a9cd1f3",
    "created": "2025-04-28 22:35:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,2,1,2,1,0,0,0],\n        [0,0,0,2,3,2,4,2,0,0,0],\n        [0,0,0,1,2,1,2,1,0,0,0],\n        [0,0,0,2,4,2,3,2,0,0,0],\n        [0,0,0,1,2,1,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n,m = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # step1: connect adjacent 1s by 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]==1:\\n                for di,dj in [(0,2),(2,0),(-2,0),(0,-2)]:\\n                    ni,nj = i+di, j+dj\\n                    if 0<=ni<n and 0<=nj<m and grid[ni][nj]==1:\\n                        out[(i+ni)//2][(j+nj)//2] = 2\\n    # step2: cross‐diagonals in each 2×2 block of 1s\\n    for i in range(n-2):\\n        for j in range(m-2):\\n            if grid[i][j]==grid[i][j+2]==grid[i+2][j]==grid[i+2][j+2]==1:\\n                p=(i-1)//2; q=(j-1)//2\\n                out[i+1][j+1] = 3 if (p+q)%2==0 else 4\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,2,1,0,0,0,0,0,0,0],\n        [0,2,3,2,0,0,0,0,0,0,0],\n        [0,1,2,1,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n,m = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # connect 1s by 2\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]==1:\\n                for di,dj in [(0,2),(2,0),(-2,0),(0,-2)]:\\n                    ni,nj = i+di, j+dj\\n                    if 0<=ni<n and 0<=nj<m and grid[ni][nj]==1:\\n                        out[(i+ni)//2][(j+nj)//2] = 2\\n    # single 2×2 block diagonal\\n    for i in range(n-2):\\n        for j in range(m-2):\\n            if grid[i][j]==grid[i][j+2]==grid[i+2][j]==grid[i+2][j+2]==1:\\n                p=(i-1)//2; q=(j-1)//2\\n                out[i+1][j+1] = 3 if (p+q)%2==0 else 4\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,2,1,0,0,0,0,0,0,0],\n        [0,2,3,2,0,0,0,0,0,0,0],\n        [0,1,2,1,2,1,0,0,0,0,0],\n        [0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,1,2,1,2,1,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0],\n        [0,0,0,0,0,1,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n,m = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # step1: connect 1s\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]==1:\\n                for di,dj in [(0,2),(2,0),(-2,0),(0,-2)]:\\n                    ni,nj = i+di, j+dj\\n                    if 0<=ni<n and 0<=nj<m and grid[ni][nj]==1:\\n                        out[(i+ni)//2][(j+nj)//2] = 2\\n    # step2: staircase blocks\\n    for i in range(n-2):\\n        for j in range(m-2):\\n            if grid[i][j]==grid[i][j+2]==grid[i+2][j]==grid[i+2][j+2]==1:\\n                p=(i-1)//2; q=(j-1)//2\\n                out[i+1][j+1] = 3 if (p+q)%2==0 else 4\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,2,1,0,0,0,0,0,0,0],\n        [0,2,3,2,0,0,0,0,0,0,0],\n        [0,1,2,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,2,1,0,0],\n        [0,0,0,0,0,0,2,3,2,0,0],\n        [0,0,0,0,0,0,1,2,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n,m = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # connect 1s by edges\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j]==1:\\n                for di,dj in [(0,2),(2,0),(-2,0),(0,-2)]:\\n                    ni,nj = i+di, j+dj\\n                    if 0<=ni<n and 0<=nj<m and grid[ni][nj]==1:\\n                        out[(i+ni)//2][(j+nj)//2] = 2\\n    # cross‐diagonals in two blocks\\n    for i in range(n-2):\\n        for j in range(m-2):\\n            if grid[i][j]==grid[i][j+2]==grid[i+2][j]==grid[i+2][j+2]==1:\\n                p=(i-1)//2; q=(j-1)//2\\n                out[i+1][j+1] = 3 if (p+q)%2==0 else 4\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "b97b8d17-a459-430e-9d70-d16288baad84.json",
    "uuid": "b97b8d17-a459-430e-9d70-d16288baad84",
    "created": "2025-04-28 22:46:02",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,1,0,4,0,1,0,0],\n        [0,0,0,3,0,3,0,0,0],\n        [1,0,4,0,0,0,4,0,1],\n        [0,0,0,3,0,3,0,0,0],\n        [0,0,1,0,4,0,1,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,0,2,0,0,0],\n        [0,0,1,0,3,0,1,0,0],\n        [0,0,0,4,0,4,0,1,0],\n        [1,0,0,0,0,0,0,0,1],\n        [0,0,0,4,0,4,0,1,0],\n        [0,0,1,0,3,0,1,0,0],\n        [0,0,0,2,0,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    from copy import deepcopy\\n    out = deepcopy(grid)\\n    # center of 9×9\\n    outer = [(0,4),(1,5),(2,6),(3,7),(4,8),(5,7),(6,6),(7,5),(8,4),(7,3),(6,2),(5,1),(4,0),(3,1),(2,2),(1,3)]\\n    inner = [(2,4),(3,5),(4,6),(5,5),(6,4),(5,3),(4,2),(3,3)]\\n    # move value 2 clockwise on outer diamond\\n    for i,(r,c) in enumerate(outer):\\n        if grid[r][c] == 2:\\n            nr,nc = outer[(i+1) % len(outer)]\\n            out[r][c] = 0\\n            out[nr][nc] = 2\\n    # move value 4 counter‑clockwise on inner diamond\\n    for i,(r,c) in enumerate(inner):\\n        if grid[r][c] == 4:\\n            nr,nc = inner[(i-1) % len(inner)]\\n            out[r][c] = 0\\n            out[nr][nc] = 4\\n    return out\\n\\n# To use:\\n# output = transform(input)\\n\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [2,1,0,0,3,0,0,1,2],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,2,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,0,0,4,0,0,1,0],\n        [2,1,0,0,0,0,0,1,0],\n        [1,1,4,0,3,0,4,1,1],\n        [0,1,0,0,0,0,0,1,2],\n        [0,1,0,0,4,0,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,2,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    from copy import deepcopy\\n    out = deepcopy(grid)\\n    n = len(grid)\\n    center = n // 2\\n    # generate ring coords for a square with max‑distance d\\n    def ring(d):\\n        coords = []\\n        # top edge\\n        for j in range(center-d, center+d+1): coords.append((center-d, j))\\n        # right edge\\n        for i in range(center-d+1, center+d+1): coords.append((i, center+d))\\n        # bottom edge\\n        for j in range(center+d-1, center-d-1, -1): coords.append((center+d, j))\\n        # left edge\\n        for i in range(center+d-1, center-d, -1): coords.append((i, center-d))\\n        return coords\\n    outer = ring(4)\\n    inner = ring(2)\\n    # move value 2 one step clockwise on outer square\\n    for i,(r,c) in enumerate(outer):\\n        if grid[r][c] == 2:\\n            nr,nc = outer[(i+1) % len(outer)]\\n            out[r][c] = 0\\n            out[nr][nc] = 2\\n    # move value 4 one step counter‑clockwise on inner square\\n    for i,(r,c) in enumerate(inner):\\n        if grid[r][c] == 4:\\n            nr,nc = inner[(i-1) % len(inner)]\\n            out[r][c] = 0\\n            out[nr][nc] = 4\\n    return out\\n\\n# To use:\\n# output = transform(input)\\n\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "bffff38a-c798-4738-a41c-ef7e062e9a17.json",
    "uuid": "bffff38a-c798-4738-a41c-ef7e062e9a17",
    "created": "2025-04-28 22:32:03",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [1,9,9,9,9,2,3,0,4],\n                [0,0,5,0,0,6,0,7,0],\n                [8,0,0,9,9,9,9,0,0],\n                [0,3,0,4,0,1,0,2,0],\n                [0,0,9,9,9,9,5,0,8],\n                [6,0,7,0,8,0,0,0,0],\n                [9,9,9,9,0,0,8,0,3],\n                [0,4,0,5,0,6,0,7,0],\n                [0,0,1,0,2,0,3,0,4]\n            ],\n            \"output\": [\n                [1,0,9,0,0,2,3,0,4],\n                [0,0,5,0,0,6,0,7,0],\n                [8,0,0,0,9,0,0,0,0],\n                [0,3,0,4,0,1,0,2,0],\n                [0,0,0,9,0,0,5,0,8],\n                [6,0,7,0,8,0,0,0,0],\n                [0,9,0,0,0,0,8,0,3],\n                [0,4,0,5,0,6,0,7,0],\n                [0,0,1,0,2,0,3,0,4]\n            ],\n            \"code\": \"def transform(grid):\\n    out = [row.copy() for row in grid]\\n    for i, row in enumerate(grid):\\n        j = 0\\n        while j <= len(row) - 4:\\n            if row[j:j+4] == [9]*4:\\n                center = (j + (j+3)) // 2\\n                for k in range(j, j+4):\\n                    out[i][k] = 0\\n                out[i][center] = 9\\n                j += 4\\n            else:\\n                j += 1\\n    return out\\n\\ninput_grid = [\\n  [1,9,9,9,9,2,3,0,4],\\n  [0,0,5,0,0,6,0,7,0],\\n  [8,0,0,9,9,9,9,0,0],\\n  [0,3,0,4,0,1,0,2,0],\\n  [0,0,9,9,9,9,5,0,8],\\n  [6,0,7,0,8,0,0,0,0],\\n  [9,9,9,9,0,0,8,0,3],\\n  [0,4,0,5,0,6,0,7,0],\\n  [0,0,1,0,2,0,3,0,4]\\n]\\n\\nprint(transform(input_grid))\"\n        },\n        {\n            \"input\": [\n                [2,3,4,5,6,7,8,1,0],\n                [9,9,9,9,0,0,0,0,0],\n                [0,1,0,2,0,3,0,4,0],\n                [0,0,0,9,9,9,9,5,0],\n                [6,0,7,0,8,0,0,0,1],\n                [0,9,9,9,9,2,3,0,0],\n                [4,0,0,5,0,6,0,7,0],\n                [0,0,0,9,0,0,0,1,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [2,3,4,5,6,7,8,1,0],\n                [0,9,0,0,0,0,0,0,0],\n                [0,1,0,2,0,3,0,4,0],\n                [0,0,0,0,9,0,0,5,0],\n                [6,0,7,0,8,0,0,0,1],\n                [0,0,9,0,0,2,3,0,0],\n                [4,0,0,5,0,6,0,7,0],\n                [0,0,0,9,0,0,0,1,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    out = [row.copy() for row in grid]\\n    for i, row in enumerate(grid):\\n        j = 0\\n        while j <= len(row) - 4:\\n            if row[j:j+4] == [9]*4:\\n                center = (j + (j+3)) // 2\\n                for k in range(j, j+4):\\n                    out[i][k] = 0\\n                out[i][center] = 9\\n                j += 4\\n            else:\\n                j += 1\\n    return out\\n\\ninput_grid = [\\n  [2,3,4,5,6,7,8,1,0],\\n  [9,9,9,9,0,0,0,0,0],\\n  [0,1,0,2,0,3,0,4,0],\\n  [0,0,0,9,9,9,9,5,0],\\n  [6,0,7,0,8,0,0,0,1],\\n  [0,9,9,9,9,2,3,0,0],\\n  [4,0,0,5,0,6,0,7,0],\\n  [0,0,0,9,0,0,0,1,0],\\n  [0,0,0,0,0,0,0,0,0]\\n]\\n\\nprint(transform(input_grid))\"\n        },\n        {\n            \"input\": [\n                [0,8,0,7,0,9,9,9,9],\n                [1,0,2,0,3,0,4,0,5],\n                [6,0,7,0,8,0,1,0,2],\n                [3,0,0,0,0,0,0,0,0],\n                [9,9,9,9,6,5,4,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,2,3,4,9,9,9,9,1],\n                [5,0,6,0,7,0,8,0,9],\n                [0,1,9,9,9,9,0,4,0]\n            ],\n            \"output\": [\n                [0,8,0,7,0,0,9,0,0],\n                [1,0,2,0,3,0,4,0,5],\n                [6,0,7,0,8,0,1,0,2],\n                [3,0,0,0,0,0,0,0,0],\n                [0,9,0,0,6,5,4,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,2,3,4,0,9,0,0,1],\n                [5,0,6,0,7,0,8,0,9],\n                [0,1,0,9,0,0,0,4,0]\n            ],\n            \"code\": \"def transform(grid):\\n    out = [row.copy() for row in grid]\\n    for i, row in enumerate(grid):\\n        j = 0\\n        while j <= len(row) - 4:\\n            if row[j:j+4] == [9]*4:\\n                center = (j + (j+3)) // 2\\n                for k in range(j, j+4):\\n                    out[i][k] = 0\\n                out[i][center] = 9\\n                j += 4\\n            else:\\n                j += 1\\n    return out\\n\\ninput_grid = [\\n  [0,8,0,7,0,9,9,9,9],\\n  [1,0,2,0,3,0,4,0,5],\\n  [6,0,7,0,8,0,1,0,2],\\n  [3,0,0,0,0,0,0,0,0],\\n  [9,9,9,9,6,5,4,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,2,3,4,9,9,9,9,1],\\n  [5,0,6,0,7,0,8,0,9],\\n  [0,1,9,9,9,9,0,4,0]\\n]\\n\\nprint(transform(input_grid))\"\n        },\n        {\n            \"input\": [\n                [1,2,3,1,2,3,1,2,3],\n                [0,0,0,0,9,9,9,9,0],\n                [4,0,5,0,6,0,7,0,8],\n                [9,9,9,9,0,0,0,0,0],\n                [0,4,0,5,0,6,0,7,0],\n                [0,9,9,9,9,0,1,0,0],\n                [2,0,3,0,4,0,5,0,6],\n                [0,0,0,0,0,9,9,9,9],\n                [1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [1,2,3,1,2,3,1,2,3],\n                [0,0,0,0,0,9,0,0,0],\n                [4,0,5,0,6,0,7,0,8],\n                [0,9,0,0,0,0,0,0,0],\n                [0,4,0,5,0,6,0,7,0],\n                [0,0,9,0,0,1,0,0,0],\n                [2,0,3,0,4,0,5,0,6],\n                [0,0,0,0,0,0,9,0,0],\n                [1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    out = [row.copy() for row in grid]\\n    for i, row in enumerate(grid):\\n        j = 0\\n        while j <= len(row) - 4:\\n            if row[j:j+4] == [9]*4:\\n                center = (j + (j+3)) // 2\\n                for k in range(j, j+4):\\n                    out[i][k] = 0\\n                out[i][center] = 9\\n                j += 4\\n            else:\\n                j += 1\\n    return out\\n\\ninput_grid = [\\n  [1,2,3,1,2,3,1,2,3],\\n  [0,0,0,0,9,9,9,9,0],\\n  [4,0,5,0,6,0,7,0,8],\\n  [9,9,9,9,0,0,0,0,0],\\n  [0,4,0,5,0,6,0,7,0],\\n  [0,9,9,9,9,0,1,0,0],\\n  [2,0,3,0,4,0,5,0,6],\\n  [0,0,0,0,0,9,9,9,9],\\n  [1,1,1,1,1,1,1,1,1]\\n]\\n\\nprint(transform(input_grid))\"\n        },\n        {\n            \"input\": [\n                [0,0,9,9,9,9,0,1,2],\n                [3,0,4,0,5,0,6,0,7],\n                [1,2,3,4,9,9,9,9,0],\n                [0,8,0,7,0,6,0,5,0],\n                [0,9,9,9,9,0,0,0,3],\n                [2,0,1,0,4,0,5,0,6],\n                [0,0,0,9,9,9,9,0,4],\n                [7,0,8,0,1,0,2,0,3],\n                [1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,0,0,9,0,0,0,1,2],\n                [3,0,4,0,5,0,6,0,7],\n                [1,2,3,4,0,9,0,0,0],\n                [0,8,0,7,0,6,0,5,0],\n                [0,0,9,0,0,0,0,0,3],\n                [2,0,1,0,4,0,5,0,6],\n                [0,0,0,0,9,0,0,0,4],\n                [7,0,8,0,1,0,2,0,3],\n                [1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    out = [row.copy() for row in grid]\\n    for i, row in enumerate(grid):\\n        j = 0\\n        while j <= len(row) - 4:\\n            if row[j:j+4] == [9]*4:\\n                center = (j + (j+3)) // 2\\n                for k in range(j, j+4):\\n                    out[i][k] = 0\\n                out[i][center] = 9\\n                j += 4\\n            else:\\n                j += 1\\n    return out\\n\\ninput_grid = [\\n  [0,0,9,9,9,9,0,1,2],\\n  [3,0,4,0,5,0,6,0,7],\\n  [1,2,3,4,9,9,9,9,0],\\n  [0,8,0,7,0,6,0,5,0],\\n  [0,9,9,9,9,0,0,0,3],\\n  [2,0,1,0,4,0,5,0,6],\\n  [0,0,0,9,9,9,9,0,4],\\n  [7,0,8,0,1,0,2,0,3],\\n  [1,1,1,1,1,1,1,1,1]\\n]\\n\\nprint(transform(input_grid))\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "f8409a08-34ff-42ec-aba9-1c9874d5ed19.json",
    "uuid": "f8409a08-34ff-42ec-aba9-1c9874d5ed19",
    "created": "2025-04-28 22:27:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,5,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,9,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,5,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,9,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,5,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,4,7,7,5,7,7,6,7,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # find rows containing rods (value 7)\\n    rod_rows = [r for r,row in enumerate(grid) if 7 in row]\\n    # locate crest position (value 9)\\n    for r in rod_rows:\\n        for c,v in enumerate(grid[r]):\\n            if v == 9:\\n                cur_r, cur_c = r, c\\n    # determine original bead shape by scanning other rods\\n    orig = next(grid[r][cur_c] for r in rod_rows if grid[r][cur_c] != 9)\\n    # compute target rod (one above, wrap around)\\n    idx = rod_rows.index(cur_r)\\n    new_r = rod_rows[(idx - 1) % len(rod_rows)]\\n    # apply transformation\\n    grid[cur_r][cur_c] = orig\\n    grid[new_r][cur_c] = 9\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,4,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,9,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,4,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,9,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,4,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,2,7,7,3,7,7,4,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rod_rows = [r for r,row in enumerate(grid) if 7 in row]\\n    for r in rod_rows:\\n        for c,v in enumerate(grid[r]):\\n            if v == 9:\\n                cur_r, cur_c = r, c\\n    orig = next(grid[r][cur_c] for r in rod_rows if grid[r][cur_c] != 9)\\n    idx = rod_rows.index(cur_r)\\n    new_r = rod_rows[(idx - 1) % len(rod_rows)]\\n    grid[cur_r][cur_c] = orig\\n    grid[new_r][cur_c] = 9\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,4,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,9,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,4,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,9,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,4,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [7,2,7,3,7,4,7,3,7],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rod_rows = [r for r,row in enumerate(grid) if 7 in row]\\n    for r in rod_rows:\\n        for c,v in enumerate(grid[r]):\\n            if v == 9:\\n                cur_r, cur_c = r, c\\n    orig = next(grid[r][cur_c] for r in rod_rows if grid[r][cur_c] != 9)\\n    idx = rod_rows.index(cur_r)\\n    new_r = rod_rows[(idx - 1) % len(rod_rows)]\\n    grid[cur_r][cur_c] = orig\\n    grid[new_r][cur_c] = 9\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,4,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,9,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,4,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,9,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,4,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [7,7,7,2,7,7,3,7,7,4,7,7,5,7,7,7],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rod_rows = [r for r,row in enumerate(grid) if 7 in row]\\n    for r in rod_rows:\\n        for c,v in enumerate(grid[r]):\\n            if v == 9:\\n                cur_r, cur_c = r, c\\n    orig = next(grid[r][cur_c] for r in rod_rows if grid[r][cur_c] != 9)\\n    idx = rod_rows.index(cur_r)\\n    new_r = rod_rows[(idx - 1) % len(rod_rows)]\\n    grid[cur_r][cur_c] = orig\\n    grid[new_r][cur_c] = 9\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "37488f69-05d0-48c9-b224-03f66fe81c8f.json",
    "uuid": "37488f69-05d0-48c9-b224-03f66fe81c8f",
    "created": "2025-04-28 22:54:22",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8,9,1],\n        [2,0,0,0,0,0,0,0,0,2],\n        [3,0,0,9,0,9,0,0,0,3],\n        [4,0,9,0,9,0,9,0,0,4],\n        [5,0,0,9,0,9,0,0,0,5],\n        [6,0,9,0,9,0,9,0,0,6],\n        [7,0,0,9,0,9,0,0,0,7],\n        [8,0,0,0,0,0,0,0,0,8],\n        [9,0,0,0,0,0,0,0,0,9],\n        [1,2,3,4,5,6,7,8,9,1]\n      ],\n      \"output\": [\n        [2,3,4,5,6,7,8,9,1,2],\n        [1,0,0,0,0,0,0,0,0,3],\n        [2,0,0,9,0,9,0,0,0,4],\n        [3,0,9,0,9,0,9,0,0,5],\n        [4,0,0,9,0,9,0,0,0,6],\n        [5,0,9,0,9,0,9,0,0,7],\n        [6,0,0,9,0,9,0,0,0,8],\n        [7,0,0,0,0,0,0,0,0,9],\n        [8,0,0,0,0,0,0,0,0,1],\n        [9,1,2,3,4,5,6,7,8,9]\n      ],\n      \"code\": \"def rotate_outer(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    coords = []\\n    for j in range(m): coords.append((0,j))\\n    for i in range(1,n): coords.append((i,m-1))\\n    for j in range(m-2,-1,-1): coords.append((n-1,j))\\n    for i in range(n-2,0,-1): coords.append((i,0))\\n    vals = [grid[i][j] for (i,j) in coords]\\n    new_vals = [vals[-1]] + vals[:-1]  # clockwise shift\\n    out = [row[:] for row in grid]\\n    for (i,j),v in zip(coords,new_vals): out[i][j] = v\\n    return out\\n\\n# apply to this input\\ngrid = [\\n  [1,2,3,4,5,6,7,8,9,1],\\n  [2,0,0,0,0,0,0,0,0,2],\\n  [3,0,0,9,0,9,0,0,0,3],\\n  [4,0,9,0,9,0,9,0,0,4],\\n  [5,0,0,9,0,9,0,0,0,5],\\n  [6,0,9,0,9,0,9,0,0,6],\\n  [7,0,0,9,0,9,0,0,0,7],\\n  [8,0,0,0,0,0,0,0,0,8],\\n  [9,0,0,0,0,0,0,0,0,9],\\n  [1,2,3,4,5,6,7,8,9,1]\\n]\\nprint(rotate_outer(grid))\"\n    },\n    {\n      \"input\": [\n        [2,1,2,1,2,1,2,1,2,1],\n        [1,0,0,0,0,0,0,0,0,2],\n        [2,0,9,9,9,9,9,9,0,1],\n        [1,0,9,0,0,0,0,9,0,2],\n        [2,0,9,0,0,0,0,9,0,1],\n        [1,0,9,0,0,0,0,9,0,2],\n        [2,0,9,9,9,9,9,9,0,1],\n        [1,0,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,0,1],\n        [1,2,1,2,1,2,1,2,1,2]\n      ],\n      \"output\": [\n        [1,2,1,2,1,2,1,2,1,2],\n        [2,0,0,0,0,0,0,0,0,1],\n        [1,0,9,9,9,9,9,9,0,2],\n        [2,0,9,0,0,0,0,9,0,1],\n        [1,0,9,0,0,0,0,9,0,2],\n        [2,0,9,0,0,0,0,9,0,1],\n        [1,0,9,9,9,9,9,9,0,2],\n        [2,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,2],\n        [2,1,2,1,2,1,2,1,2,1]\n      ],\n      \"code\": \"def rotate_outer(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    coords = []\\n    for j in range(m): coords.append((0,j))\\n    for i in range(1,n): coords.append((i,m-1))\\n    for j in range(m-2,-1,-1): coords.append((n-1,j))\\n    for i in range(n-2,0,-1): coords.append((i,0))\\n    vals = [grid[i][j] for (i,j) in coords]\\n    new_vals = [vals[-1]] + vals[:-1]\\n    out = [row[:] for row in grid]\\n    for (i,j),v in zip(coords,new_vals): out[i][j] = v\\n    return out\\n\\n# apply to this input\\ngrid = [\\n  [2,1,2,1,2,1,2,1,2,1],\\n  [1,0,0,0,0,0,0,0,0,2],\\n  [2,0,9,9,9,9,9,9,0,1],\\n  [1,0,9,0,0,0,0,9,0,2],\\n  [2,0,9,0,0,0,0,9,0,1],\\n  [1,0,9,0,0,0,0,9,0,2],\\n  [2,0,9,9,9,9,9,9,0,1],\\n  [1,0,0,0,0,0,0,0,0,2],\\n  [2,0,0,0,0,0,0,0,0,1],\\n  [1,2,1,2,1,2,1,2,1,2]\\n]\\nprint(rotate_outer(grid))\"\n    },\n    {\n      \"input\": [\n        [2,4,2,4,2,4,2,4,2,4],\n        [4,0,5,0,0,0,0,5,0,2],\n        [2,5,0,5,0,0,5,0,4,2],\n        [4,0,5,0,5,5,0,5,0,4],\n        [2,0,0,5,0,5,5,0,0,2],\n        [4,0,5,0,5,5,0,5,0,4],\n        [2,5,0,5,0,0,5,0,4,2],\n        [4,0,5,0,0,0,0,5,0,2],\n        [2,4,2,4,2,4,2,4,2,4],\n        [1,2,3,4,5,6,7,8,9,1]\n      ],\n      \"output\": [\n        [4,2,4,2,4,2,4,2,4,2],\n        [2,0,5,0,0,0,0,5,0,4],\n        [4,5,0,5,0,0,5,0,2,4],\n        [2,0,5,0,5,5,0,5,0,2],\n        [4,0,0,5,0,5,5,0,0,4],\n        [2,0,5,0,5,5,0,5,0,2],\n        [4,5,0,5,0,0,5,0,2,4],\n        [2,0,5,0,0,0,0,5,0,4],\n        [4,2,4,2,4,2,4,2,4,2],\n        [1,2,3,4,5,6,7,8,9,1]\n      ],\n      \"code\": \"def rotate_outer(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    coords = []\\n    for j in range(m): coords.append((0,j))\\n    for i in range(1,n): coords.append((i,m-1))\\n    for j in range(m-2,-1,-1): coords.append((n-1,j))\\n    for i in range(n-2,0,-1): coords.append((i,0))\\n    vals = [grid[i][j] for (i,j) in coords]\\n    new_vals = [vals[-1]] + vals[:-1]\\n    out = [row[:] for row in grid]\\n    for (i,j),v in zip(coords,new_vals): out[i][j] = v\\n    return out\\n\\n# apply to this input\\ngrid = [\\n  [2,4,2,4,2,4,2,4,2,4],\\n  [4,0,5,0,0,0,0,5,0,2],\\n  [2,5,0,5,0,0,5,0,4,2],\\n  [4,0,5,0,5,5,0,5,0,4],\\n  [2,0,0,5,0,5,5,0,0,2],\\n  [4,0,5,0,5,5,0,5,0,4],\\n  [2,5,0,5,0,0,5,0,4,2],\\n  [4,0,5,0,0,0,0,5,0,2],\\n  [2,4,2,4,2,4,2,4,2,4],\\n  [1,2,3,4,5,6,7,8,9,1]\\n]\\nprint(rotate_outer(grid))\"\n    },\n    {\n      \"input\": [\n        [5,6,7,8,9,1,2,3,4,5],\n        [4,0,0,0,0,0,0,0,0,6],\n        [3,0,0,0,0,0,0,0,7,7],\n        [2,0,0,8,8,8,0,0,8,8],\n        [1,0,0,8,8,8,0,0,9,9],\n        [9,0,0,8,8,8,0,0,1,1],\n        [8,0,0,0,0,0,0,0,2,2],\n        [7,0,0,0,0,0,0,0,3,3],\n        [6,0,0,0,0,0,0,0,4,4],\n        [5,4,3,2,1,9,8,7,6,5]\n      ],\n      \"output\": [\n        [6,7,8,9,1,2,3,4,5,6],\n        [5,0,0,0,0,0,0,0,0,7],\n        [4,0,0,0,0,0,0,0,7,8],\n        [3,0,0,8,8,8,0,0,8,9],\n        [2,0,0,8,8,8,0,0,9,1],\n        [1,0,0,8,8,8,0,0,1,2],\n        [9,0,0,0,0,0,0,0,2,3],\n        [8,0,0,0,0,0,0,0,3,4],\n        [7,0,0,0,0,0,0,0,4,5],\n        [6,5,6,7,8,9,1,2,3,4]\n      ],\n      \"code\": \"def rotate_outer(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    coords = []\\n    for j in range(m): coords.append((0,j))\\n    for i in range(1,n): coords.append((i,m-1))\\n    for j in range(m-2,-1,-1): coords.append((n-1,j))\\n    for i in range(n-2,0,-1): coords.append((i,0))\\n    vals = [grid[i][j] for (i,j) in coords]\\n    new_vals = [vals[-1]] + vals[:-1]\\n    out = [row[:] for row in grid]\\n    for (i,j),v in zip(coords,new_vals): out[i][j] = v\\n    return out\\n\\n# apply to this input\\ngrid = [\\n  [5,6,7,8,9,1,2,3,4,5],\\n  [4,0,0,0,0,0,0,0,0,6],\\n  [3,0,0,0,0,0,0,0,7,7],\\n  [2,0,0,8,8,8,0,0,8,8],\\n  [1,0,0,8,8,8,0,0,9,9],\\n  [9,0,0,8,8,8,0,0,1,1],\\n  [8,0,0,0,0,0,0,0,2,2],\\n  [7,0,0,0,0,0,0,0,3,3],\\n  [6,0,0,0,0,0,0,0,4,4],\\n  [5,4,3,2,1,9,8,7,6,5]\\n]\\nprint(rotate_outer(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "72fb9dfb-8c69-4e51-a3d0-a0b658bf0645.json",
    "uuid": "72fb9dfb-8c69-4e51-a3d0-a0b658bf0645",
    "created": "2025-04-28 22:41:19",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,0,0,0,3,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,1,0,0,0,0,0,2,0,0,9],\n        [9,0,0,1,0,0,0,0,2,2,2,0,9],\n        [9,0,0,1,0,0,0,0,0,2,0,0,9],\n        [9,0,0,1,1,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,3,3,3,3,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,4,4,0,0,9],\n        [9,0,0,0,0,0,0,0,4,4,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9,9,9,9,9,9,9],\n        [9,3,3,3,3,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,1,1,1,1,0,0,9],\n        [9,0,0,0,0,0,0,1,1,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,4,4,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,2,9],\n        [9,0,0,0,0,0,0,0,0,0,2,2,9],\n        [9,0,0,0,0,0,0,0,2,2,0,0,9],\n        [9,0,0,0,0,0,0,0,2,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    h, w = len(grid), len(grid[0])\\n    # 1. find hovering marker (adjacent to border)\\n    marker = None\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 9 and (y == 1 or y == h-2 or x == 1 or x == w-2):\\n                marker = grid[y][x]\\n    num = marker\\n    # 2. flood-fill the object numbered 'num'\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    visited = set()\\n    shape = set()\\n    sy = sx = None\\n    # find one seed inside, not the marker itself\\n    for y in range(1,h-1):\\n        for x in range(1,w-1):\\n            if grid[y][x] == num:\\n                sy, sx = y, x\\n                break\\n        if sy is not None: break\\n    def dfs(y,x):\\n        if (y,x) in visited: return\\n        visited.add((y,x))\\n        if grid[y][x] == num:\\n            shape.add((y,x))\\n            for dy,dx in dirs:\\n                ny, nx = y+dy, x+dx\\n                if 0<=ny<h and 0<=nx<w:\\n                    dfs(ny,nx)\\n    dfs(sy,sx)\\n    # 3. remove shape from grid\\n    out = [row[:] for row in grid]\\n    for y,x in shape:\\n        out[y][x] = 0\\n    # 4. record shape bounding-box and pattern\\n    ys = [y for y,x in shape]; xs = [x for y,x in shape]\\n    miny, maxy, minx, maxx = min(ys), max(ys), min(xs), max(xs)\\n    sh, sw = maxy-miny+1, maxx-minx+1\\n    pat = [[(miny+dy, minx+dx) in shape for dx in range(sw)] for dy in range(sh)]\\n    # 5. place into first empty slot (top->bottom, left->right)\\n    placed = False\\n    for ty in range(1, h-1-sh+1):\\n        for tx in range(1, w-1-sw+1):\\n            ok = True\\n            for dy in range(sh):\\n                for dx in range(sw):\\n                    if pat[dy][dx] and out[ty+dy][tx+dx] != 0:\\n                        ok = False\\n            if ok:\\n                for dy in range(sh):\\n                    for dx in range(sw):\\n                        if pat[dy][dx]:\\n                            out[ty+dy][tx+dx] = num\\n                placed = True\\n                break\\n        if placed: break\\n    # 6. rotate remaining objects 90° CCW around interior center\\n    cy = (1 + (h-2)) / 2.0\\n    cx = (1 + (w-2)) / 2.0\\n    remap = {}\\n    for y in range(1,h-1):\\n        for x in range(1,w-1):\\n            v = out[y][x]\\n            if v != 0 and v != num:\\n                ny = int(round(cy + (x - cx)))\\n                nx = int(round(cx - (y - cy)))\\n                remap[(y,x)] = (ny,nx,v)\\n    # clear old positions\\n    for (y,x) in list(remap): out[y][x] = 0\\n    # write new\\n    for (y,x),(ny,nx,v) in remap.items(): out[ny][nx] = v\\n    return out\\n\\n# Example invocation:\\n# result = solve(input_grid)\\n\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,5,5,5,0,0,0,9],\n        [9,0,2,2,0,0,0,3,0,0,9],\n        [9,0,2,2,0,0,0,3,0,0,9],\n        [9,0,0,0,0,4,0,3,0,0,9],\n        [9,0,0,0,0,4,0,3,0,0,9],\n        [9,0,0,0,0,4,0,0,0,0,9],\n        [9,0,0,1,1,1,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,1,1,1,0,0,0,0,0,9],\n        [9,0,0,0,5,5,5,0,0,0,9],\n        [9,0,2,2,0,0,0,3,0,0,9],\n        [9,0,2,2,0,0,0,3,0,0,9],\n        [9,0,0,0,0,4,0,3,0,0,9],\n        [9,0,0,0,0,4,0,0,0,0,9],\n        [9,0,0,0,0,4,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    h, w = len(grid), len(grid[0])\\n    # 1. find hovering marker\\n    marker = None\\n    for y in range(h):\\n        for x in range(w):\\n            if grid[y][x] != 9 and (y == 1 or y == h-2 or x == 1 or x == w-2):\\n                marker = grid[y][x]\\n    num = marker\\n    # 2. flood fill object 'num'\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    visited, shape = set(), set()\\n    # seed\\n    sy = sx = None\\n    for y in range(1,h-1):\\n        for x in range(1,w-1):\\n            if grid[y][x] == num:\\n                sy, sx = y, x; break\\n        if sy is not None: break\\n    def dfs(y,x):\\n        if (y,x) in visited: return\\n        visited.add((y,x))\\n        if grid[y][x] == num:\\n            shape.add((y,x))\\n            for dy,dx in dirs:\\n                ny, nx = y+dy, x+dx\\n                if 0<=ny<h and 0<=nx<w:\\n                    dfs(ny,nx)\\n    dfs(sy,sx)\\n    # 3. remove shape\\n    out = [row[:] for row in grid]\\n    for y,x in shape: out[y][x] = 0\\n    # 4. bounding box pattern\\n    ys = [y for y,x in shape]; xs = [x for y,x in shape]\\n    miny, maxy, minx, maxx = min(ys), max(ys), min(xs), max(xs)\\n    sh, sw = maxy-miny+1, maxx-minx+1\\n    pat = [[(miny+dy, minx+dx) in shape for dx in range(sw)] for dy in range(sh)]\\n    # 5. place in first empty slot\\n    placed = False\\n    for ty in range(1, h-1-sh+1):\\n        for tx in range(1, w-1-sw+1):\\n            ok = all(pat[dy][dx] == False or out[ty+dy][tx+dx] == 0 for dy in range(sh) for dx in range(sw))\\n            if ok:\\n                for dy in range(sh):\\n                    for dx in range(sw):\\n                        if pat[dy][dx]: out[ty+dy][tx+dx] = num\\n                placed = True; break\\n        if placed: break\\n    # 6. rotate remaining 90° CCW\\n    cy = (1 + (h-2)) / 2.0; cx = (1 + (w-2)) / 2.0\\n    remap = {}\\n    for y in range(1,h-1):\\n        for x in range(1,w-1):\\n            v = out[y][x]\\n            if v != 0 and v != num:\\n                ny = int(round(cy + (x - cx)))\\n                nx = int(round(cx - (y - cy)))\\n                remap[(y,x)] = (ny,nx,v)\\n    for (y,x) in list(remap): out[y][x] = 0\\n    for (_,_,v),(ny,nx,_) in zip(remap.values(), remap.values()):\\n        out[ny][nx] = v\\n    return out\\n\\n# usage: solve(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9ea60a01-214f-489a-b021-6029b62f026f.json",
    "uuid": "9ea60a01-214f-489a-b021-6029b62f026f",
    "created": "2025-04-28 22:35:10",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,5,7,1,1,1,1,1,1],\n        [1,1,7,1,3,1,1,1,1,1,5,1,1,1,1],\n        [1,1,1,1,1,1,5,7,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,1,1,7,1,1,1,1,1],\n        [1,1,1,1,1,1,5,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,6,8,1,1,1,1,1,1],\n        [1,1,8,4,4,1,1,1,1,1,6,1,1,1,1],\n        [1,1,1,1,1,1,1,8,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,6,1,1,8,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    # copy grid\\n    out = [row[:] for row in grid]\\n    # mapping dots to ribbons\\n    mapping = {3: 4, 5: 6, 7: 8}\\n    # for each column and each dot type, place ribbon at median row\\n    for c in range(cols):\\n        for dot, ribbon in mapping.items():\\n            positions = [r for r in range(rows) if grid[r][c] == dot]\\n            if positions:\\n                med = sorted(positions)[len(positions)//2]\\n                out[med][c] = ribbon\\n    # restore original dots to background\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] in mapping:\\n                out[r][c] = 1\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,5,7,1,1,1,1,1,1],\n        [1,1,7,1,3,1,1,1,1,1,5,1,1,1,1],\n        [1,1,1,1,1,1,5,7,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,1,1,7,1,1,1,1,1],\n        [1,1,1,1,1,1,5,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,6,8,1,1,1,1,1,1],\n        [1,1,8,4,4,1,1,1,1,1,6,1,1,1,1],\n        [1,1,1,1,1,1,1,8,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,6,1,1,8,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    out = [row[:] for row in grid]\\n    mapping = {3: 4, 5: 6, 7: 8}\\n    for c in range(cols):\\n        for dot, ribbon in mapping.items():\\n            positions = [r for r in range(rows) if grid[r][c] == dot]\\n            if positions:\\n                med = sorted(positions)[len(positions)//2]\\n                out[med][c] = ribbon\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] in mapping:\\n                out[r][c] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,5,7,1,1,1,1,1,1],\n        [1,1,7,1,3,1,1,1,1,1,5,1,1,1,1],\n        [1,1,1,1,1,1,5,7,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,1,1,7,1,1,1,1,1],\n        [1,1,1,1,1,1,5,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,6,8,1,1,1,1,1,1],\n        [1,1,8,4,4,1,1,1,1,1,6,1,1,1,1],\n        [1,1,1,1,1,1,1,8,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,6,1,1,8,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    out = [row[:] for row in grid]\\n    mapping = {3: 4, 5: 6, 7: 8}\\n    for c in range(cols):\\n        for dot, ribbon in mapping.items():\\n            positions = [r for r in range(rows) if grid[r][c] == dot]\\n            if positions:\\n                med = sorted(positions)[len(positions)//2]\\n                out[med][c] = ribbon\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] in mapping:\\n                out[r][c] = 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,5,7,1,1,1,1,1,1],\n        [1,1,7,1,3,1,1,1,1,1,5,1,1,1,1],\n        [1,1,1,1,1,1,5,7,1,1,1,1,1,1,1],\n        [1,1,1,3,1,1,1,1,1,7,1,1,1,1,1],\n        [1,1,1,1,1,1,5,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,6,8,1,1,1,1,1,1],\n        [1,1,8,4,4,1,1,1,1,1,6,1,1,1,1],\n        [1,1,1,1,1,1,1,8,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,6,1,1,8,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    out = [row[:] for row in grid]\\n    mapping = {3: 4, 5: 6, 7: 8}\\n    for c in range(cols):\\n        for dot, ribbon in mapping.items():\\n            positions = [r for r in range(rows) if grid[r][c] == dot]\\n            if positions:\\n                med = sorted(positions)[len(positions)//2]\\n                out[med][c] = ribbon\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] in mapping:\\n                out[r][c] = 1\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "c834c11d-70c7-417a-9848-27aa9212f91a.json",
    "uuid": "c834c11d-70c7-417a-9848-27aa9212f91a",
    "created": "2025-04-28 22:27:19",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,2,1,1,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,2,1,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rectangular frame border (clockwise)\\n    border = [\\n        (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),\\n        (2,7),(3,7),(4,7),(5,7),(6,7),(7,7),\\n        (7,6),(7,5),(7,4),(7,3),(7,2),(7,1),\\n        (6,1),(5,1),(4,1),(3,1),(2,1)\\n    ]\\n    # find highlight, move one step\\n    for i,(r,c) in enumerate(border):\\n        if grid[r][c] == 2:\\n            grid[r][c] = 1\\n            nr,nc = border[(i+1) % len(border)]\\n            grid[nr][nc] = 2\\n            break\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [1,1,1,1,2,1,1,1,1],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [1,1,1,1,1,2,1,1,1],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # downward triangle border (clockwise)\\n    border = [\\n        (1,4),\\n        (2,3),(3,2),(4,1),(5,0),            # left side down\\n        (5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7),(5,8),\\n        (4,7),(3,6),(2,5)                    # right side up\\n    ]\\n    for i,(r,c) in enumerate(border):\\n        if grid[r][c] == 2:\\n            grid[r][c] = 1\\n            nr,nc = border[(i+1) % len(border)]\\n            grid[nr][nc] = 2\\n            break\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,2,1,1,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [0,1,0,0,0,0,0,1,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,2,1,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,1],\n        [0,1,0,0,0,0,0,1,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # circular ring border (clockwise)\\n    border = [\\n        (2,3),(2,4),(2,5),(2,6),           # top edge left→right\\n        (3,7),(4,8),(5,8),(6,7),           # right edge down\\n        (7,6),(7,5),(7,4),(7,3),(7,2),     # bottom edge right→left\\n        (6,1),(5,0),(4,0),(3,1),(2,2)      # left edge up\\n    ]\\n    for i,(r,c) in enumerate(border):\\n        if grid[r][c] == 2:\\n            grid[r][c] = 1\\n            nr,nc = border[(i+1) % len(border)]\\n            grid[nr][nc] = 2\\n            break\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,1,2,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # diamond border (clockwise)\\n    border = [\\n        (2,4),                             # top vertex\\n        (3,5),(4,6),(5,7),(6,6),(7,5),(8,4), # right side down\\n        (7,3),(6,2),(5,1),(4,2),(3,3)      # left side up back to top\\n    ]\\n    for i,(r,c) in enumerate(border):\\n        if grid[r][c] == 2:\\n            grid[r][c] = 1\\n            nr,nc = border[(i+1) % len(border)]\\n            grid[nr][nc] = 2\\n            break\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "71d422bc-11cf-413a-b977-9ec98a5393be.json",
    "uuid": "71d422bc-11cf-413a-b977-9ec98a5393be",
    "created": "2025-04-28 22:31:34",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,7,7,0,0,0,7,7,0,0,0,0],\n                [0,0,0,7,7,7,7,0,7,7,7,7,0,0,0],\n                [0,0,7,7,7,7,7,7,7,7,7,7,7,0,0],\n                [0,0,0,7,7,7,7,0,7,7,7,0,0,0,0],\n                [0,0,0,0,7,7,0,0,0,7,7,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,5,5,0,0,0,5,5,0,0,0,0],\n                [0,0,0,5,5,5,5,0,5,5,5,5,0,0,0],\n                [0,0,5,5,5,5,5,5,5,5,5,5,5,0,0],\n                [0,0,0,5,5,5,5,0,5,5,5,0,0,0,0],\n                [0,0,0,0,5,5,0,0,0,5,5,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v >= 2:\\n                nr, nv = r-1, v-2\\n                if nr >= 0 and nv > 1:\\n                    out[nr][c] = nv\\n    out[-1] = grid[-1][:]\\n    return out\\n\\n# Usage:\\n# result = transform(input_grid)\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,8,8,8,0,0,0,0,0,0],\n                [0,0,0,0,0,8,8,0,8,0,0,0,0,0,0],\n                [0,0,0,0,0,8,6,6,8,0,0,0,0,0,0],\n                [0,0,0,0,0,8,8,8,8,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,6,6,6,0,0,0,0,0,0],\n                [0,0,0,0,0,6,6,0,6,0,0,0,0,0,0],\n                [0,0,0,0,0,6,4,4,6,0,0,0,0,0,0],\n                [0,0,0,0,0,6,6,6,6,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v >= 2:\\n                nr, nv = r-1, v-2\\n                if nr >= 0 and nv > 1:\\n                    out[nr][c] = nv\\n    out[-1] = grid[-1][:]\\n    return out\\n\\n# Usage:\\n# result = transform(input_grid)\"\n        },\n        {\n            \"input\": [\n                [0,0,9,0,0,9,0,0,9,0,0,9,0,0,9,0],\n                [0,0,0,9,0,0,9,0,0,9,0,0,9,0,0,0],\n                [0,0,0,0,9,0,0,9,0,0,9,0,0,9,0,0],\n                [0,0,0,0,0,9,0,0,9,0,0,9,0,0,0,0],\n                [0,0,0,0,0,0,9,0,0,9,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,0,7,0,0,7,0,0,7,0,0,7,0,0,7,0],\n                [0,0,0,7,0,0,7,0,0,7,0,0,7,0,0,0],\n                [0,0,0,0,7,0,0,7,0,0,7,0,0,7,0,0],\n                [0,0,0,0,0,7,0,0,7,0,0,7,0,0,0,0],\n                [0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v >= 2:\\n                nr, nv = r-1, v-2\\n                if nr >= 0 and nv > 1:\\n                    out[nr][c] = nv\\n    out[-1] = grid[-1][:]\\n    return out\\n\\n# Usage:\\n# result = transform(input_grid)\"\n        },\n        {\n            \"input\": [\n                [0,8,0,0,0,0,0,0,0,0,0,8,0],\n                [0,0,8,0,0,0,0,0,0,0,8,0,0],\n                [0,0,0,8,0,0,0,0,0,8,0,0,0],\n                [0,0,0,0,8,0,0,0,8,0,0,0,0],\n                [0,0,0,0,0,8,0,8,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,6,0,0,0,0,0,0,0,0,0,6,0],\n                [0,0,6,0,0,0,0,0,0,0,6,0,0],\n                [0,0,0,6,0,0,0,0,0,6,0,0,0],\n                [0,0,0,0,6,0,0,0,6,0,0,0,0],\n                [0,0,0,0,0,6,0,6,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v >= 2:\\n                nr, nv = r-1, v-2\\n                if nr >= 0 and nv > 1:\\n                    out[nr][c] = nv\\n    out[-1] = grid[-1][:]\\n    return out\\n\\n# Usage:\\n# result = transform(input_grid)\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,5,7,5,0,0,0,0,0],\n                [0,0,0,0,7,9,7,0,0,0,0,0,0],\n                [0,0,0,0,0,5,7,5,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"output\": [\n                [0,0,0,0,0,3,5,3,0,0,0,0,0],\n                [0,0,0,0,5,7,5,0,0,0,0,0,0],\n                [0,0,0,0,0,3,5,3,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [1,1,1,1,1,1,1,1,1,1,1,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v >= 2:\\n                nr, nv = r-1, v-2\\n                if nr >= 0 and nv > 1:\\n                    out[nr][c] = nv\\n    out[-1] = grid[-1][:]\\n    return out\\n\\n# Usage:\\n# result = transform(input_grid)\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "a65d1dd2-165b-42c4-977d-a6b8b1f95016.json",
    "uuid": "a65d1dd2-165b-42c4-977d-a6b8b1f95016",
    "created": "2025-04-28 22:45:31",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,2,2,2,2],\n        [0,0,0,1,0,0,0,0,0,2,0,0],\n        [0,1,1,1,1,1,0,0,0,2,0,0],\n        [0,0,0,1,0,0,0,0,0,2,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0,2],\n        [0,0,0,1,0,0,0,0,0,0,0,2],\n        [0,1,1,1,1,1,0,0,0,0,0,2],\n        [0,0,0,1,0,0,0,0,2,2,2,2],\n        [0,0,0,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_clusters(grid):\\n    from collections import deque\\n    H, W = len(grid), len(grid[0])\\n    res = [row[:] for row in grid]\\n    visited = [[False]*W for _ in range(H)]\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v!=0 and not visited[i][j]:\\n                # BFS to collect cluster\\n                q, pts = deque([(i,j)]), []\\n                visited[i][j] = True\\n                while q:\\n                    x,y = q.popleft(); pts.append((x,y))\\n                    for dx,dy in dirs:\\n                        nx,ny = x+dx, y+dy\\n                        if 0<=nx<H and 0<=ny<W and not visited[nx][ny] and grid[nx][ny]==v:\\n                            visited[nx][ny]=True; q.append((nx,ny))\\n                # bounding box\\n                xs = [x for x,y in pts]; ys = [y for x,y in pts]\\n                r0,r1 = min(xs), max(xs); c0,c1 = min(ys), max(ys)\\n                h, w = r1-r0+1, c1-c0+1\\n                # extract block\\n                block = [[0]*w for _ in range(h)]\\n                for x,y in pts:\\n                    block[x-r0][y-c0] = v\\n                # clear region in res\\n                for x in range(r0, r1+1):\\n                    for y in range(c0, c1+1):\\n                        res[x][y] = 0\\n                # rotate cw\\n                new = [[0]*h for _ in range(w)]\\n                for x in range(h):\\n                    for y in range(w):\\n                        if block[x][y]==v:\\n                            new[y][h-1-x] = v\\n                # place back\\n                for x in range(len(new)):\\n                    for y in range(len(new[0])):\\n                        if new[x][y]==v:\\n                            res[r0+x][c0+y] = v\\n    return res\\n\\n# 사용 예시\\n# grid = [ ... 위 input ... ]\\n# print(rotate_clusters(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0],\n        [0,1,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,2,0,0],\n        [0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_clusters(grid):\\n    from collections import deque\\n    H, W = len(grid), len(grid[0])\\n    res = [row[:] for row in grid]\\n    visited = [[False]*W for _ in range(H)]\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v!=0 and not visited[i][j]:\\n                q, pts = deque([(i,j)]), []\\n                visited[i][j] = True\\n                while q:\\n                    x,y = q.popleft(); pts.append((x,y))\\n                    for dx,dy in dirs:\\n                        nx,ny = x+dx, y+dy\\n                        if 0<=nx<H and 0<=ny<W and not visited[nx][ny] and grid[nx][ny]==v:\\n                            visited[nx][ny]=True; q.append((nx,ny))\\n                xs = [x for x,y in pts]; ys = [y for x,y in pts]\\n                r0,r1 = min(xs), max(xs); c0,c1 = min(ys), max(ys)\\n                h, w = r1-r0+1, c1-c0+1\\n                block = [[0]*w for _ in range(h)]\\n                for x,y in pts:\\n                    block[x-r0][y-c0] = v\\n                for x in range(r0, r1+1):\\n                    for y in range(c0, c1+1):\\n                        res[x][y] = 0\\n                new = [[0]*h for _ in range(w)]\\n                for x in range(h):\\n                    for y in range(w):\\n                        if block[x][y]==v:\\n                            new[y][h-1-x] = v\\n                for x in range(len(new)):\\n                    for y in range(len(new[0])):\\n                        if new[x][y]==v:\\n                            res[r0+x][c0+y] = v\\n    return res\\n\\n# 사용 예시\\n# grid = [ ... 위 input C ... ]\\n# print(rotate_clusters(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "bf52ca52-7adc-4288-8315-596eec2bad38.json",
    "uuid": "bf52ca52-7adc-4288-8315-596eec2bad38",
    "created": "2025-04-28 22:49:47",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,7,0,3,4,3,3,3,3,4,3,3,0,0,0,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,3,3,3,0,4,0,0,0],\n        [0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,0,2,0,2,0,0,0,0,0,0],\n        [0,0,2,0,2,0,0,0,2,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,2,0,0,0,0,0,0,2,0,0,4,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [6,6,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6]\n      ],\n      \"output\": [\n        [0,7,0,3,4,3,3,3,3,4,3,3,0,0,0,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,3,3,3,0,4,0,0,0],\n        [0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,3,3,3,3,3,5,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [6,6,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    # 1) count smoke per column\\n    counts = [sum(1 for r in range(h) if grid[r][c]==2) for c in range(w)]\\n    col = counts.index(max(counts))\\n    # 2) find first cloud row and first volcano row in that column\\n    cloud_row = min(r for r in range(h) if grid[r][col]==3)\\n    volcano_row = min(r for r in range(h) if grid[r][col]==1)\\n    # 3) clear all original smoke\\n    out = [[cell if cell!=2 else 0 for cell in row] for row in grid]\\n    # 4) place blending and smoke column\\n    total_smoke = counts[col]\\n    out[cloud_row][col] = 5\\n    for i in range(total_smoke-1):\\n        out[cloud_row+1+i][col] = 2\\n    return out\",\n      \"solution\": \"가장 많은 2가 모인 열은 col 10입니다. 그 열에서 위로 올라가며 최초 구름(3)과 만나는 칸(row 3, col 10)을 5로 블렌딩하고, 아래 2칸(row 4~6, col 10)에 2를 채운 뒤 나머지 2는 모두 제거합니다.\"\n    },\n    {\n      \"input\": [\n        [0,7,0,3,3,3,4,3,3,3,0,0,0,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,3,0,4,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0],\n        [0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0],\n        [0,0,2,0,2,0,0,2,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,2,0,0,0,8,0,0],\n        [0,0,0,0,0,0,2,2,0,0,0,2,0,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]\n      ],\n      \"output\": [\n        [0,7,0,3,3,3,4,5,3,3,3,0,4,0,0,0],\n        [0,0,0,3,3,3,3,2,3,3,3,0,4,0,0,0],\n        [0,0,0,3,3,3,3,2,3,3,3,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    counts = [sum(1 for r in range(h) if grid[r][c]==2) for c in range(w)]\\n    col = counts.index(max(counts))\\n    cloud_row = min(r for r in range(h) if grid[r][col]==3)\\n    volcano_row = min(r for r in range(h) if grid[r][col]==1)\\n    out = [[cell if cell!=2 else 0 for cell in row] for row in grid]\\n    total_smoke = counts[col]\\n    out[cloud_row][col] = 5\\n    for i in range(total_smoke-1):\\n        out[cloud_row+1+i][col] = 2\\n    return out\",\n      \"solution\": \"가장 많은 2가 모인 열은 col 7입니다. 그 열에서 위로 올라가며 최초 구름(3)과 만나는 칸(row 0, col 7)을 5로 블렌딩하고, 아래 두 칸(row 1~2, col 7)에 2를 채운 뒤 나머지 2는 모두 제거합니다.\"\n    },\n    {\n      \"input\": [\n        [7,0,3,3,3,3,3,3,3,3,3,3,3,0,4,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],\n        [0,0,0,0,2,0,2,0,2,0,0,2,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,0,0,0,0,0,0,2,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,4,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6]\n      ],\n      \"output\": [\n        [7,0,3,3,3,3,3,3,3,3,3,3,3,0,4,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,5,3,3,3,3,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n        [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    counts = [sum(1 for r in range(h) if grid[r][c]==2) for c in range(w)]\\n    col = counts.index(max(counts))\\n    cloud_row = min(r for r in range(h) if grid[r][col]==3)\\n    out = [[cell if cell!=2 else 0 for cell in row] for row in grid]\\n    total_smoke = counts[col]\\n    out[cloud_row][col] = 5\\n    for i in range(total_smoke-1):\\n        out[cloud_row+1+i][col] = 2\\n    return out\",\n      \"solution\": \"가장 많은 2가 모인 열은 col 10입니다. 그 열에서 위로 올라가며 최초 구름(3)과 만나는 칸(row 0, col 10))을 5로 블렌딩하고, 아래 두 칸(row 1~2, col 10)에 2를 채운 뒤 나머지 2는 모두 제거합니다.\"\n    },\n    {\n      \"input\": [\n        [7,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6]\n      ],\n      \"output\": [\n        [7,0,0,3,3,3,3,3,5,3,3,3,3,3,0,0,0,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,9,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6],\n        [6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    counts = [sum(1 for r in range(h) if grid[r][c]==2) for c in range(w)]\\n    col = counts.index(max(counts))\\n    cloud_row = min(r for r in range(h) if grid[r][col]==3)\\n    out = [[cell if cell!=2 else 0 for cell in row] for row in grid]\\n    total_smoke = counts[col]\\n    out[cloud_row][col] = 5\\n    for i in range(total_smoke-1):\\n        out[cloud_row+1+i][col] = 2\\n    return out\",\n      \"solution\": \"가장 많은 2가 모인 열은 col 8입니다. 그 열에서 위로 올라가며 최초 구름(3)과 만나는 칸(row 0, col 8)을 5로 블렌딩하고, 아래 두 칸(row 1~2, col 8)에 2를 채운 뒤 나머지 2는 모두 제거합니다.\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "abda4280-ff1a-4ad8-bdc6-dbfb43867748.json",
    "uuid": "abda4280-ff1a-4ad8-bdc6-dbfb43867748",
    "created": "2025-04-28 22:23:49",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0],\n        [0,3,0,0,0,0,0,0,4],\n        [0,0,0,0,0,0,5,0,0],\n        [6,0,0,0,0,0,0,0,0],\n        [0,0,7,0,0,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0],\n        [0,0,0,0,0,0,0,9,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,6,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0],\n        [0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,2],\n        [0,0,8,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0],\n        [0,9,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(mat):\\n    h, w = len(mat), len(mat[0])\\n    res = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            if mat[r][c] != 0:\\n                # 90° clockwise: (r,c) → (c, h-1-r)\\n                res[c][h-1-r] = mat[r][c]\\n    return res\\n\\n# Example usage:\\n# mat = [[...], ...]\\n# print(rotate_clockwise(mat))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,6,0,0,0],\n        [0,1,0,0,0,2,0],\n        [0,0,0,3,0,0,0],\n        [7,0,0,0,0,0,8],\n        [0,0,4,0,0,0,0],\n        [0,0,0,0,5,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,7,0,0,0],\n        [0,0,0,0,0,1,0],\n        [0,0,4,0,0,0,0],\n        [0,0,0,0,3,0,6],\n        [0,5,0,0,0,0,0],\n        [0,0,0,0,0,2,0],\n        [0,0,0,8,0,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(mat):\\n    h, w = len(mat), len(mat[0])\\n    res = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            if mat[r][c] != 0:\\n                # for 7×7, same formula: (r,c) → (c, h-1-r)\\n                res[c][h-1-r] = mat[r][c]\\n    return res\\n\\n# Example usage:\\n# mat = [[...], ...]\\n# print(rotate_clockwise(mat))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "40c6d7e4-7b5b-4612-a1ee-b439c1a9d0fe.json",
    "uuid": "40c6d7e4-7b5b-4612-a1ee-b439c1a9d0fe",
    "created": "2025-04-28 22:33:11",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,3,3,0],\n        [0,2,0,0,0,0,0,0,3,0],\n        [0,2,2,0,0,0,0,0,3,0],\n        [0,0,0,7,7,0,0,0,0,0],\n        [0,0,0,7,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,3,3,0],\n        [0,2,0,0,0,0,0,0,3,0],\n        [0,2,2,0,0,0,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # 1) find sign cells (value not in {0,2,3})\\n    sign = [(r,c) for r in range(H) for c in range(W) if grid[r][c] not in (0,2,3)]\\n    if not sign: return grid\\n    S = grid[sign[0][0]][sign[0][1]]\\n    # relative offsets of sign shape\\n    base_r, base_c = sign[0]\\n    rel = [(r-base_r, c-base_c) for r,c in sign]\\n    # clear original sign\\n    for r,c in sign: grid[r][c] = 0\\n    # 2) find matching empty region\\n    for r0 in range(H):\\n        for c0 in range(W):\\n            coords = [(r0+dr, c0+dc) for dr,dc in rel]\\n            if all(0 <= rr < H and 0 <= cc < W and grid[rr][cc]==0 for rr,cc in coords):\\n                # fill with S\\n                for rr,cc in coords: grid[rr][cc] = S\\n                return grid\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,2,0,0,0,0,0,3,0,0],\n        [2,2,2,0,0,0,3,3,3,0],\n        [0,2,0,0,0,0,0,3,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,2,0,0,0,0,0,3,0,0],\n        [2,2,2,0,0,0,3,3,3,0],\n        [0,2,0,0,0,0,0,3,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,8,8,8,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # 1) find sign cells (value not in {0,2,3})\\n    sign = [(r,c) for r in range(H) for c in range(W) if grid[r][c] not in (0,2,3)]\\n    if not sign: return grid\\n    S = grid[sign[0][0]][sign[0][1]]\\n    base_r, base_c = sign[0]\\n    rel = [(r-base_r, c-base_c) for r,c in sign]\\n    # clear original sign\\n    for r,c in sign: grid[r][c] = 0\\n    # 2) find matching empty region\\n    for r0 in range(H):\\n        for c0 in range(W):\\n            coords = [(r0+dr, c0+dc) for dr,dc in rel]\\n            if all(0 <= rr < H and 0 <= cc < W and grid[rr][cc]==0 for rr,cc in coords):\\n                for rr,cc in coords: grid[rr][cc] = S\\n                return grid\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "5f8c40ae-e6ba-4a74-9547-06fec1acc849.json",
    "uuid": "5f8c40ae-e6ba-4a74-9547-06fec1acc849",
    "created": "2025-04-28 22:38:27",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,4,0,0,0,0],\n        [0,0,3,3,3,0,0,0],\n        [0,4,0,0,0,4,0,0],\n        [3,3,3,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,3],\n        [0,4,0,0,0,4,4,0,0,0,4,0],\n        [3,3,3,3,3,3,3,3,3,3,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid, offset=4):\\n    h = len(grid)\\n    w = len(grid[0])\\n    # create empty result with extra columns\\n    result = [[0] * (w + offset) for _ in range(h)]\\n    # copy original\\n    for i in range(h):\\n        for j in range(w):\\n            result[i][j] = grid[i][j]\\n    # rotate 180° and overlay shifted\\n    for i in range(h):\\n        for j in range(w):\\n            val = grid[h - 1 - i][w - 1 - j]\\n            if val != 0:\\n                result[i][j + offset] = val\\n    return result\\n\\n# example usage:\\ninput_grid = [[0,0,0,4,0,0,0,0],\\n              [0,0,3,3,3,0,0,0],\\n              [0,4,0,0,0,4,0,0],\\n              [3,3,3,3,3,3,3,0],\\n              [0,0,0,0,0,0,0,0]]\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,8,0,0,0,0],\n        [0,0,7,7,7,0,0,0],\n        [0,8,0,0,0,8,0,0],\n        [7,7,7,7,7,7,7,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,8,0,0,0,0,0,0,0,0],\n        [0,0,7,7,7,7,7,7,7,7,7,7],\n        [0,8,0,0,0,8,8,0,0,0,8,0],\n        [7,7,7,7,7,7,7,7,7,7,0,0],\n        [0,0,0,0,0,0,0,0,8,0,0,0]\n      ],\n      \"code\": \"def transform(grid, offset=4):\\n    h = len(grid)\\n    w = len(grid[0])\\n    result = [[0] * (w + offset) for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            result[i][j] = grid[i][j]\\n    for i in range(h):\\n        for j in range(w):\\n            val = grid[h - 1 - i][w - 1 - j]\\n            if val != 0:\\n                result[i][j + offset] = val\\n    return result\\n\\n# example usage:\\ninput_grid = [[0,0,0,8,0,0,0,0],\\n              [0,0,7,7,7,0,0,0],\\n              [0,8,0,0,0,8,0,0],\\n              [7,7,7,7,7,7,7,0],\\n              [0,0,0,0,0,0,0,0]]\\nprint(transform(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "23f51cfc-31e3-4f7b-8cb9-23428b18e872.json",
    "uuid": "23f51cfc-31e3-4f7b-8cb9-23428b18e872",
    "created": "2025-04-28 22:36:43",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,2,0,5,5,5,2,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,2,0,5,5,5,2,0,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,3,0,0,0,0,0,3,0],\n        [2,0,0,0,0,0,0,2,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [2,0,0,0,0,0,0,2,0],\n        [0,3,0,0,0,0,0,3,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"code\": \"def expand(grid):\\n    h, w = len(grid), len(grid[0])\\n    # find cluster cells (value 5) and compute center\\n    cells = [(i,j) for i in range(h) for j in range(w) if grid[i][j]==5]\\n    min_i = min(i for i,j in cells); max_i = max(i for i,j in cells)\\n    min_j = min(j for i,j in cells); max_j = max(j for i,j in cells)\\n    cx = (min_i+max_i)//2; cy = (min_j+max_j)//2\\n    new = [[0]*w for _ in range(h)]\\n    # copy cluster\\n    for i,j in cells: new[i][j] = 5\\n    def sign(x): return (1 if x>0 else -1 if x<0 else 0)\\n    # move each shard one step in its direction\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v!=0 and v!=5:\\n                di, dj = i-cx, j-cy\\n                ni, nj = i+sign(di), j+sign(dj)\\n                if 0<=ni<h and 0<=nj<w:\\n                    new[ni][nj] = v\\n    return new\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,3,4,2,4,3,0,0],\n        [0,0,4,0,5,0,4,0,0],\n        [0,2,0,5,5,5,0,2,0],\n        [0,0,4,0,5,0,4,0,0],\n        [0,0,3,4,2,4,3,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,4,0,2,0,4,3,0],\n        [4,0,0,0,0,0,0,4,0],\n        [0,0,0,5,5,5,0,0,0],\n        [2,0,0,5,5,5,0,0,2],\n        [0,0,0,5,5,5,0,0,0],\n        [0,4,0,0,0,0,0,4,0],\n        [0,3,4,0,2,0,4,3,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def expand(grid):\\n    h, w = len(grid), len(grid[0])\\n    cells = [(i,j) for i in range(h) for j in range(w) if grid[i][j]==5]\\n    min_i = min(i for i,j in cells); max_i = max(i for i,j in cells)\\n    min_j = min(j for i,j in cells); max_j = max(j for i,j in cells)\\n    cx = (min_i+max_i)//2; cy = (min_j+max_j)//2\\n    new = [[0]*w for _ in range(h)]\\n    for i,j in cells: new[i][j] = 5\\n    def sign(x): return (1 if x>0 else -1 if x<0 else 0)\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v!=0 and v!=5:\\n                di, dj = i-cx, j-cy\\n                ni, nj = i+sign(di), j+sign(dj)\\n                if 0<=ni<h and 0<=nj<w:\\n                    new[ni][nj] = v\\n    return new\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "84c594e0-ff24-4e62-9878-b9c5dfce6396.json",
    "uuid": "84c594e0-ff24-4e62-9878-b9c5dfce6396",
    "created": "2025-04-28 22:30:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,7,7,7,7,7,0,0,0],\n        [0,0,7,7,7,7,7,7,7,0,0],\n        [7,7,7,7,7,7,7,7,7,7,7],\n        [0,0,7,7,7,7,7,7,7,0,0],\n        [0,0,0,7,7,7,7,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,2,2,2,2,2,2,2,2,2,0]\n      ],\n      \"output\": [\n        [0,0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,7,7,7,7,7,0,0,0],\n        [0,0,7,7,7,7,7,7,7,0,0],\n        [7,7,7,7,7,7,7,7,7,7,7],\n        [0,0,7,7,7,7,7,7,7,0,0],\n        [0,0,0,7,0,7,7,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,2,2,2,2,2,2,2,2,2,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # star piece falls from (5,4) to (7,4)\\n    out = [row[:] for row in grid]\\n    out[5][4] = 0\\n    out[7][4] = 7\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0,6,0,0,0],\n        [0,6,0,0,0,0,0,0,0,0,6,0,0],\n        [6,0,0,0,0,0,0,0,0,0,0,6,0],\n        [6,0,0,0,0,0,0,0,0,0,0,6,0],\n        [0,6,0,0,0,0,0,0,0,0,6,0,0],\n        [0,0,6,0,0,0,0,0,0,6,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,8,8,8,8,8,8,8,8,8,0,0],\n        [0,0,8,8,8,8,8,8,8,8,8,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0,6,0,0,0],\n        [0,6,0,0,0,0,0,0,0,0,0,0,0],\n        [6,0,0,0,0,0,0,0,0,0,0,6,0],\n        [6,0,0,0,0,0,0,0,0,0,0,6,0],\n        [0,6,0,0,0,0,0,0,0,0,6,0,0],\n        [0,0,6,0,0,0,0,0,0,6,0,0,0],\n        [0,0,0,6,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,6,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,8,8,8,8,8,8,8,8,8,0,0],\n        [0,0,8,8,8,8,8,8,8,8,8,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # gear tooth falls from (3,10) to (9,10)\\n    out = [row[:] for row in grid]\\n    out[3][10] = 0\\n    out[9][10] = 6\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,4,0,0],\n        [0,4,0,0,0,0,0,4,0],\n        [4,0,4,0,0,0,4,0,4],\n        [4,0,0,4,4,4,0,0,4],\n        [4,0,0,0,0,0,0,0,4],\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1],\n        [0,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,4,0,0],\n        [0,0,0,0,0,0,0,4,0],\n        [4,0,4,0,0,0,4,0,4],\n        [4,0,0,4,4,4,0,0,4],\n        [4,0,0,0,0,0,0,0,4],\n        [0,4,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1],\n        [0,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    # smile-eye falls from (2,1) to (6,1)\\n    out = [row[:] for row in grid]\\n    out[2][1] = 0\\n    out[6][1] = 4\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,9,0,0,0,0,0,0],\n        [0,0,0,0,9,9,9,0,0,0,0,0],\n        [0,0,0,9,9,9,9,9,0,0,0,0],\n        [0,0,9,9,9,9,9,9,9,9,0,0],\n        [0,9,9,9,9,9,9,9,9,9,9,0],\n        [9,9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,9,0,0,0,0,0,0],\n        [0,0,0,0,9,9,9,0,0,0,0,0],\n        [0,0,0,9,9,9,9,9,0,0,0,0],\n        [0,0,9,0,9,9,9,9,9,9,0,0],\n        [0,9,9,9,9,9,9,9,9,9,9,0],\n        [9,9,9,9,9,9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # arrow tip falls from (3,3) to (9,3)\\n    out = [row[:] for row in grid]\\n    out[3][3] = 0\\n    out[9][3] = 9\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "8654d512-4344-47e2-8a8f-3ebd74c0b378.json",
    "uuid": "8654d512-4344-47e2-8a8f-3ebd74c0b378",
    "created": "2025-04-28 22:44:49",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        \"00000000000\",\n        \"02000000020\",\n        \"00200000002\",\n        \"00000300003\",\n        \"00000000000\",\n        \"20000000002\",\n        \"00000000000\",\n        \"00000002200\",\n        \"00000000000\",\n        \"00300030000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"00000200000\",\n        \"00200000200\",\n        \"00000300000\",\n        \"00000000000\",\n        \"02030003020\",\n        \"00000000000\",\n        \"00000300000\",\n        \"00200000200\",\n        \"00000200000\",\n        \"00000000000\"\n      ],\n      \"code\": \"import math\\nfrom collections import Counter\\n\\ndef solve(input):\\n    # input: list of equal-length strings\\n    n = len(input)\\n    grid = [list(row) for row in input]\\n    center = n // 2\\n    # count non-zero values\\n    cnt = Counter(c for row in grid for c in row if c != '0')\\n    # identify outer and inner values by count\\n    vals = sorted(cnt.keys(), key=lambda v: cnt[v], reverse=True)\\n    v_outer, v_inner = vals[0], vals[1]\\n    # fixed radii for all tasks\\n    r_outer, r_inner = 4, 2\\n    out = [['0'] * n for _ in range(n)]\\n    # place outer objects equally around circle\\n    for k in range(cnt[v_outer]):\\n        θ = 2 * math.pi * k / cnt[v_outer]\\n        x = center + int(round(r_outer * math.sin(θ)))\\n        y = center + int(round(r_outer * math.cos(θ)))\\n        out[x][y] = v_outer\\n    # place inner objects around smaller circle\\n    for k in range(cnt[v_inner]):\\n        θ = 2 * math.pi * k / cnt[v_inner]\\n        x = center + int(round(r_inner * math.sin(θ)))\\n        y = center + int(round(r_inner * math.cos(θ)))\\n        out[x][y] = v_inner\\n    return [''.join(row) for row in out]\\n\\n# 예시 실행\\n# result = solve([...] )\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"04000000040\",\n        \"00400000004\",\n        \"00000500005\",\n        \"00000000000\",\n        \"40000000004\",\n        \"00000000000\",\n        \"00000004400\",\n        \"00000000000\",\n        \"00500050000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"00000400000\",\n        \"00400000400\",\n        \"00000500000\",\n        \"00000000000\",\n        \"04050050400\",\n        \"00000000000\",\n        \"00000500000\",\n        \"00400000400\",\n        \"00000400000\",\n        \"00000000000\"\n      ],\n      \"code\": \"import math\\nfrom collections import Counter\\n\\ndef solve(input):\\n    n = len(input)\\n    grid = [list(row) for row in input]\\n    center = n // 2\\n    cnt = Counter(c for row in grid for c in row if c != '0')\\n    vals = sorted(cnt.keys(), key=lambda v: cnt[v], reverse=True)\\n    v_outer, v_inner = vals[0], vals[1]\\n    r_outer, r_inner = 4, 2\\n    out = [['0'] * n for _ in range(n)]\\n    for k in range(cnt[v_outer]):\\n        θ = 2 * math.pi * k / cnt[v_outer]\\n        x = center + int(round(r_outer * math.sin(θ)))\\n        y = center + int(round(r_outer * math.cos(θ)))\\n        out[x][y] = v_outer\\n    for k in range(cnt[v_inner]):\\n        θ = 2 * math.pi * k / cnt[v_inner]\\n        x = center + int(round(r_inner * math.sin(θ)))\\n        y = center + int(round(r_inner * math.cos(θ)))\\n        out[x][y] = v_inner\\n    return [''.join(row) for row in out]\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"06000000060\",\n        \"00600000006\",\n        \"00000700007\",\n        \"00000000000\",\n        \"60000000006\",\n        \"00000000000\",\n        \"00000006600\",\n        \"00000000000\",\n        \"00700070000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"00000600000\",\n        \"00600000600\",\n        \"00000700000\",\n        \"00000000000\",\n        \"06070070600\",\n        \"00000000000\",\n        \"00000700000\",\n        \"00600000600\",\n        \"00000600000\",\n        \"00000000000\"\n      ],\n      \"code\": \"import math\\nfrom collections import Counter\\n\\ndef solve(input):\\n    n = len(input)\\n    grid = [list(row) for row in input]\\n    center = n // 2\\n    cnt = Counter(c for row in grid for c in row if c != '0')\\n    vals = sorted(cnt.keys(), key=lambda v: cnt[v], reverse=True)\\n    v_outer, v_inner = vals[0], vals[1]\\n    r_outer, r_inner = 4, 2\\n    out = [['0'] * n for _ in range(n)]\\n    for k in range(cnt[v_outer]):\\n        θ = 2 * math.pi * k / cnt[v_outer]\\n        x = center + int(round(r_outer * math.sin(θ)))\\n        y = center + int(round(r_outer * math.cos(θ)))\\n        out[x][y] = v_outer\\n    for k in range(cnt[v_inner]):\\n        θ = 2 * math.pi * k / cnt[v_inner]\\n        x = center + int(round(r_inner * math.sin(θ)))\\n        y = center + int(round(r_inner * math.cos(θ)))\\n        out[x][y] = v_inner\\n    return [''.join(row) for row in out]\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"08000000080\",\n        \"00800000008\",\n        \"00000900009\",\n        \"00000000000\",\n        \"80000000008\",\n        \"00000000000\",\n        \"00000008800\",\n        \"00000000000\",\n        \"00900090000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"00000800000\",\n        \"00800000800\",\n        \"00000900000\",\n        \"00000000000\",\n        \"08090009080\",\n        \"00000000000\",\n        \"00000900000\",\n        \"00800000800\",\n        \"00000800000\",\n        \"00000000000\"\n      ],\n      \"code\": \"import math\\nfrom collections import Counter\\n\\ndef solve(input):\\n    n = len(input)\\n    grid = [list(row) for row in input]\\n    center = n // 2\\n    cnt = Counter(c for row in grid for c in row if c != '0')\\n    vals = sorted(cnt.keys(), key=lambda v: cnt[v], reverse=True)\\n    v_outer, v_inner = vals[0], vals[1]\\n    r_outer, r_inner = 4, 2\\n    out = [['0'] * n for _ in range(n)]\\n    for k in range(cnt[v_outer]):\\n        θ = 2 * math.pi * k / cnt[v_outer]\\n        x = center + int(round(r_outer * math.sin(θ)))\\n        y = center + int(round(r_outer * math.cos(θ)))\\n        out[x][y] = v_outer\\n    for k in range(cnt[v_inner]):\\n        θ = 2 * math.pi * k / cnt[v_inner]\\n        x = center + int(round(r_inner * math.sin(θ)))\\n        y = center + int(round(r_inner * math.cos(θ)))\\n        out[x][y] = v_inner\\n    return [''.join(row) for row in out]\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "58ebfc3f-ad08-46d9-87ed-bad970a34d54.json",
    "uuid": "58ebfc3f-ad08-46d9-87ed-bad970a34d54",
    "created": "2025-04-28 22:34:15",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,0,0,0,6,6,6,6,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0,0,0,0,7,7,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    g = copy.deepcopy(grid)\\n    R,C = len(g), len(g[0])\\n    sy=sx=ey=ex=None\\n    for i in range(R):\\n        for j in range(C):\\n            if g[i][j]==2:\\n                sy,sx = i,j\\n                g[i][j]=0\\n            if g[i][j]==5:\\n                ey,ex = i,j\\n    dx = ex - sx\\n    # choose peak height proportional to dx\\n    peak = dx//2\\n    # quadratic coefficient for arc through (0,0),(dx/2,-peak),(dx,0)\\n    a = (4.0*peak)/(dx*dx) if dx!=0 else 0\\n    for k in range(1, dx):\\n        x = k\\n        yoff = round(-a*(x - dx/2)**2 + peak)\\n        y = sy - yoff\\n        j = sx + x\\n        if 0<=y<R and 0<=j<C and g[y][j]==0:\\n            g[y][j] = 4\\n    return g\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,7,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    g = copy.deepcopy(grid)\\n    R,C = len(g), len(g[0])\\n    sy=sx=ey=ex=None\\n    for i in range(R):\\n        for j in range(C):\\n            if g[i][j]==2:\\n                sy,sx = i,j\\n                g[i][j]=0\\n            if g[i][j]==5:\\n                ey,ex = i,j\\n    dx = ex - sx\\n    peak = dx//2\\n    a = (4.0*peak)/(dx*dx) if dx!=0 else 0\\n    for k in range(1, dx):\\n        x = k\\n        yoff = round(-a*(x - dx/2)**2 + peak)\\n        y = sy - yoff\\n        j = sx + x\\n        if 0<=y<R and 0<=j<C and g[y][j]==0:\\n            g[y][j] = 4\\n    return g\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,8,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,6,6,6,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    g = copy.deepcopy(grid)\\n    R,C = len(g), len(g[0])\\n    sy=sx=ey=ex=None\\n    for i in range(R):\\n        for j in range(C):\\n            if g[i][j]==2:\\n                sy,sx = i,j\\n                g[i][j]=0\\n            if g[i][j]==5:\\n                ey,ex = i,j\\n    dx = ex - sx\\n    peak = dx//2\\n    a = (4.0*peak)/(dx*dx) if dx!=0 else 0\\n    for k in range(1, dx):\\n        x = k\\n        yoff = round(-a*(x - dx/2)**2 + peak)\\n        y = sy - yoff\\n        j = sx + x\\n        if 0<=y<R and 0<=j<C and g[y][j]==0:\\n            g[y][j] = 4\\n    return g\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,9,4,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0]\n      ],\n      \"code\": \"def solve(grid):\\n    import copy\\n    g = copy.deepcopy(grid)\\n    R,C = len(g), len(g[0])\\n    sy=sx=ey=ex=None\\n    for i in range(R):\\n        for j in range(C):\\n            if g[i][j]==2:\\n                sy,sx = i,j\\n                g[i][j]=0\\n            if g[i][j]==5:\\n                ey,ex = i,j\\n    dx = ex - sx\\n    peak = dx//2\\n    a = (4.0*peak)/(dx*dx) if dx!=0 else 0\\n    for k in range(1, dx):\\n        x = k\\n        yoff = round(-a*(x - dx/2)**2 + peak)\\n        y = sy - yoff\\n        j = sx + x\\n        if 0<=y<R and 0<=j<C and g[y][j]==0:\\n            g[y][j] = 4\\n    return g\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "31e3df51-090f-4d82-a53f-e7ede1336ac4.json",
    "uuid": "31e3df51-090f-4d82-a53f-e7ede1336ac4",
    "created": "2025-04-28 22:33:35",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,7,0,0,2],\n        [2,3,3,4,4,4,2],\n        [2,5,0,7,0,0,2],\n        [2,5,0,6,0,7,2],\n        [2,5,0,6,6,0,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,7,3,3,2],\n        [2,4,0,0,5,0,2],\n        [2,4,0,0,6,0,2],\n        [2,4,0,0,6,0,2],\n        [2,5,7,5,6,7,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"code\": \"grid = [\\n  [2,2,2,2,2,2,2],\\n  [2,3,3,7,0,0,2],\\n  [2,3,3,4,4,4,2],\\n  [2,5,0,7,0,0,2],\\n  [2,5,0,6,0,7,2],\\n  [2,5,0,6,6,0,2],\\n  [2,2,2,2,2,2,2]\\n]\\n\\ndef transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    # 0·2 제외하고 내부 객체를 행 우선 수집\\n    objs = [grid[r][c] for r in range(rows) for c in range(cols) if grid[r][c] not in (0,2)]\\n    # 첫 번째 링 좌표 생성 (테두리 한 칸 안쪽)\\n    ring = []\\n    ring += [(1, c) for c in range(1, cols-1)]\\n    for r in range(2, rows-2):\\n        ring.append((r, 1))\\n        ring.append((r, cols-2))\\n    ring += [(rows-2, c) for c in range(1, cols-1)]\\n    # 출력 초기화: 테두리만 그대로, 나머지 0\\n    out = [[grid[r][c] if grid[r][c]==2 else 0 for c in range(cols)] for r in range(rows)]\\n    # 수집한 objs를 링 좌표에 1:1 대응 배치\\n    for (r,c), v in zip(ring, objs):\\n        out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2],\n        [2,5,5,0,0,6,2],\n        [2,5,5,4,0,6,2],\n        [2,0,4,4,4,6,2],\n        [2,0,3,4,3,0,2],\n        [2,0,0,3,0,7,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2],\n        [2,5,5,6,5,5,2],\n        [2,4,0,0,0,3,2],\n        [2,6,0,0,0,3,2],\n        [2,4,0,0,0,7,2],\n        [2,4,4,6,3,4,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"code\": \"grid = [\\n  [2,2,2,2,2,2,2],\\n  [2,5,5,0,0,6,2],\\n  [2,5,5,4,0,6,2],\\n  [2,0,4,4,4,6,2],\\n  [2,0,3,4,3,0,2],\\n  [2,0,0,3,0,7,2],\\n  [2,2,2,2,2,2,2]\\n]\\n\\ndef transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    objs = [grid[r][c] for r in range(rows) for c in range(cols) if grid[r][c] not in (0,2)]\\n    ring = []\\n    ring += [(1, c) for c in range(1, cols-1)]\\n    for r in range(2, rows-2):\\n        ring.append((r, 1))\\n        ring.append((r, cols-2))\\n    ring += [(rows-2, c) for c in range(1, cols-1)]\\n    out = [[grid[r][c] if grid[r][c]==2 else 0 for c in range(cols)] for r in range(rows)]\\n    for (r,c), v in zip(ring, objs):\\n        out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,0,0,4,2],\n        [2,3,3,0,4,0,2],\n        [2,0,0,5,0,4,2],\n        [2,0,5,5,5,0,2],\n        [2,6,6,6,6,6,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,4,3,3,2],\n        [2,4,0,0,6,0,2],\n        [2,5,0,0,6,0,2],\n        [2,4,0,0,6,0,2],\n        [2,5,5,5,6,6,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"code\": \"grid = [\\n  [2,2,2,2,2,2,2],\\n  [2,3,3,0,0,4,2],\\n  [2,3,3,0,4,0,2],\\n  [2,0,0,5,0,4,2],\\n  [2,0,5,5,5,0,2],\\n  [2,6,6,6,6,6,2],\\n  [2,2,2,2,2,2,2]\\n]\\n\\ndef transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    objs = [grid[r][c] for r in range(rows) for c in range(cols) if grid[r][c] not in (0,2)]\\n    ring = []\\n    ring += [(1, c) for c in range(1, cols-1)]\\n    for r in range(2, rows-2):\\n        ring.append((r, 1))\\n        ring.append((r, cols-2))\\n    ring += [(rows-2, c) for c in range(1, cols-1)]\\n    out = [[grid[r][c] if grid[r][c]==2 else 0 for c in range(cols)] for r in range(rows)]\\n    for (r,c), v in zip(ring, objs):\\n        out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,3,0,5,2],\n        [2,3,3,3,5,0,2],\n        [2,4,4,5,0,0,2],\n        [2,4,0,0,6,0,2],\n        [2,4,0,0,6,6,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2],\n        [2,3,3,3,5,3,2],\n        [2,3,0,0,4,0,2],\n        [2,3,0,0,6,0,2],\n        [2,5,0,0,6,0,2],\n        [2,4,4,5,4,6,2],\n        [2,2,2,2,2,2,2]\n      ],\n      \"code\": \"grid = [\\n  [2,2,2,2,2,2,2],\\n  [2,3,3,3,0,5,2],\\n  [2,3,3,3,5,0,2],\\n  [2,4,4,5,0,0,2],\\n  [2,4,0,0,6,0,2],\\n  [2,4,0,0,6,6,2],\\n  [2,2,2,2,2,2,2]\\n]\\n\\ndef transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    objs = [grid[r][c] for r in range(rows) for c in range(cols) if grid[r][c] not in (0,2)]\\n    ring = []\\n    ring += [(1, c) for c in range(1, cols-1)]\\n    for r in range(2, rows-2):\\n        ring.append((r, 1))\\n        ring.append((r, cols-2))\\n    ring += [(rows-2, c) for c in range(1, cols-1)]\\n    out = [[grid[r][c] if grid[r][c]==2 else 0 for c in range(cols)] for r in range(rows)]\\n    for (r,c), v in zip(ring, objs):\\n        out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "51b7e1fb-486b-4cb6-9ea1-17d32fa6ce0f.json",
    "uuid": "51b7e1fb-486b-4cb6-9ea1-17d32fa6ce0f",
    "created": "2025-04-28 22:30:26",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,0,0,0,0,0,0,0,0],\n        [0,3,3,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,3,3,0],\n        [0,0,0,0,0,0,0,0,3,3,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_grid_90_cw(grid):\\n    N = len(grid)\\n    C = N//2\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            v = grid[r][c]\\n            if v != 0:\\n                r2 = C + (c - C)\\n                c2 = C - (r - C)\\n                if 0 <= r2 < N and 0 <= c2 < N:\\n                    out[r2][c2] = v\\n    return out\\n\\n# 사용 예시\\n# result = rotate_grid_90_cw(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,6,6,6,6,6,0,0],\n        [0,0,0,0,6,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,7,0,0,0,0,0,0,0],\n        [0,0,7,0,0,0,0,0,0],\n        [0,0,0,7,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,7,0,0,0,0],\n        [0,0,0,7,0,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0],\n        [0,0,6,6,6,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_grid_90_cw(grid):\\n    N = len(grid)\\n    C = N//2\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            v = grid[r][c]\\n            if v != 0:\\n                r2 = C + (c - C)\\n                c2 = C - (r - C)\\n                if 0 <= r2 < N and 0 <= c2 < N:\\n                    out[r2][c2] = v\\n    return out\\n\\n# 사용 예시\\n# result = rotate_grid_90_cw(input_matrix)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9f1ce84d-9c88-45de-95da-e05e3db97c69.json",
    "uuid": "9f1ce84d-9c88-45de-95da-e05e3db97c69",
    "created": "2025-04-28 22:34:31",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0],\n        [0,1,0,0,1,0,2,0],\n        [0,1,0,0,1,0,2,0],\n        [0,0,1,1,2,2,2,2],\n        [0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,2,0],\n        [0,1,0,0,0,0,2,0],\n        [0,1,0,0,0,0,2,0],\n        [0,1,0,0,0,0,2,0],\n        [0,1,0,0,0,0,2,0],\n        [0,1,1,1,2,2,2,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n  # Extract nonzero values in row-major order\\n  vals = []\\n  for r in range(8):\\n    for c in range(8):\\n      if grid[r][c] != 0:\\n        vals.append(grid[r][c])\\n  # Prepare output filled with 0\\n  out = [[0]*8 for _ in range(8)]\\n  # Build anticlockwise perimeter of inner 6×6 (rows 1–6, cols 1–6)\\n  pos = []\\n  # left edge down\\n  for r in range(1,7): pos.append((r,1))\\n  # bottom edge right\\n  for c in range(2,7): pos.append((6,c))\\n  # right edge up\\n  for r in range(5,0,-1): pos.append((r,6))\\n  # top edge left\\n  for c in range(5,1,-1): pos.append((1,c))\\n  # Fill first len(vals) positions\\n  for i,v in enumerate(vals):\\n    r,c = pos[i]\\n    out[r][c] = v\\n  return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,3,3,0,4,4,0,0],\n        [0,0,3,3,0,4,4,0],\n        [0,0,0,3,3,0,4,4],\n        [0,0,0,0,3,3,4,4],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,0,4,0],\n        [0,3,0,0,0,0,4,0],\n        [0,3,0,0,0,0,4,0],\n        [0,3,0,0,0,0,4,0],\n        [0,3,0,0,0,0,4,0],\n        [0,3,3,3,4,4,4,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n  vals=[]\\n  for r in range(8):\\n    for c in range(8):\\n      if grid[r][c]!=0: vals.append(grid[r][c])\\n  out=[[0]*8 for _ in range(8)]\\n  pos=[]\\n  for r in range(1,7): pos.append((r,1))\\n  for c in range(2,7): pos.append((6,c))\\n  for r in range(5,0,-1): pos.append((r,6))\\n  for c in range(5,1,-1): pos.append((1,c))\\n  for i,v in enumerate(vals):\\n    r,c=pos[i]\\n    out[r][c]=v\\n  return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,0],\n        [0,0,5,5,5,0,0,0],\n        [0,5,5,5,5,0,0,0],\n        [0,0,6,6,6,0,0,0],\n        [0,0,6,6,6,0,0,0],\n        [0,0,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,5,0,0,0,0,6,0],\n        [0,5,0,0,0,0,6,0],\n        [0,5,0,0,0,0,6,0],\n        [0,5,0,0,0,0,6,0],\n        [0,5,0,0,0,0,6,0],\n        [0,5,5,5,6,6,6,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n  vals=[]\\n  for r in range(8):\\n    for c in range(8):\\n      if grid[r][c]!=0: vals.append(grid[r][c])\\n  out=[[0]*8 for _ in range(8)]\\n  pos=[]\\n  for r in range(1,7): pos.append((r,1))\\n  for c in range(2,7): pos.append((6,c))\\n  for r in range(5,0,-1): pos.append((r,6))\\n  for c in range(5,1,-1): pos.append((1,c))\\n  for i,v in enumerate(vals):\\n    r,c=pos[i]\\n    out[r][c]=v\\n  return out\"\n    },\n    {\n      \"input\": [\n        [7,0,0,0,0,0,0,8],\n        [0,7,0,0,0,0,8,0],\n        [0,0,7,0,0,8,0,0],\n        [0,0,0,7,8,0,0,0],\n        [0,0,0,8,7,0,0,0],\n        [0,0,8,0,0,7,0,0],\n        [0,8,0,0,0,0,7,0],\n        [8,0,0,0,0,0,0,7]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,7,0,0,0,0,8,0],\n        [0,7,0,0,0,0,8,0],\n        [0,7,0,0,0,0,8,0],\n        [0,7,0,0,0,0,8,0],\n        [0,7,0,0,0,0,8,0],\n        [0,7,7,7,8,8,8,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n  vals=[]\\n  for r in range(8):\\n    for c in range(8):\\n      if grid[r][c]!=0: vals.append(grid[r][c])\\n  out=[[0]*8 for _ in range(8)]\\n  pos=[]\\n  for r in range(1,7): pos.append((r,1))\\n  for c in range(2,7): pos.append((6,c))\\n  for r in range(5,0,-1): pos.append((r,6))\\n  for c in range(5,1,-1): pos.append((1,c))\\n  for i,v in enumerate(vals):\\n    r,c=pos[i]\\n    out[r][c]=v\\n  return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "dd8c6b58-1819-4160-82fa-8d67a09d5d9b.json",
    "uuid": "dd8c6b58-1819-4160-82fa-8d67a09d5d9b",
    "created": "2025-04-28 22:46:56",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,1,0,0,0,1,0,1,0],\n        [1,0,0,0,1,0,1,0,0,0,1],\n        [0,1,0,1,0,0,0,1,0,1,0],\n        [0,0,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,0,1,0,0,0,1,0,1,0],\n        [1,0,0,0,1,0,1,0,0,0,1],\n        [0,1,0,1,0,0,0,1,0,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0]\n      ],\n      \"output\": [\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,2,1,0,0,0,1,2,1,0],\n        [1,2,3,2,1,0,1,2,3,2,1],\n        [0,1,2,1,0,0,0,1,2,1,0],\n        [0,0,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,1,0,0],\n        [0,1,2,1,0,0,0,1,2,1,0],\n        [1,2,3,2,1,0,1,2,3,2,1],\n        [0,1,2,1,0,0,0,1,2,1,0],\n        [0,0,1,0,0,0,0,0,1,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    output = [[0]*m for _ in range(n)]\\n    centers = [(2,2),(2,8),(8,2),(8,8)]; r = 2\\n    for i in range(n):\\n        for j in range(m):\\n            for cx, cy in centers:\\n                d = abs(i-cx) + abs(j-cy)\\n                if d <= r:\\n                    output[i][j] = max(output[i][j], r+1-d)\\n    return output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,1,2,3,4,3,2,1,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    output = [[0]*m for _ in range(n)]\\n    cx, cy = 4, 4; r = 3\\n    for i in range(n):\\n        for j in range(m):\\n            if (i == cx and abs(j-cy) <= r) or (j == cy and abs(i-cx) <= r):\\n                d = abs(i-cx) + abs(j-cy)\\n                if d <= r:\\n                    output[i][j] = r+1-d\\n    return output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,0,0,0,0,0],\n        [0,1,0,0,0,1,0,0,0,0,0],\n        [0,0,1,0,1,0,0,1,0,0,0],\n        [0,0,0,1,0,0,1,0,1,0,0],\n        [0,0,0,0,0,1,0,0,0,1,0],\n        [0,0,0,0,1,0,0,0,0,0,1],\n        [0,0,0,0,0,1,0,0,0,1,0],\n        [0,0,0,0,0,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,1,2,1,0,0,0,0,0,0],\n        [0,1,2,3,2,1,0,0,0,0,0],\n        [0,0,1,2,1,0,0,1,0,0,0],\n        [0,0,0,1,0,0,1,2,1,0,0],\n        [0,0,0,0,0,1,2,3,2,1,0],\n        [0,0,0,0,1,2,3,4,3,2,1],\n        [0,0,0,0,0,1,2,3,2,1,0],\n        [0,0,0,0,0,0,1,2,1,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    output = [[0]*m for _ in range(n)]\\n    for cx, cy, r in [(3,3,2), (7,7,3)]:\\n        for i in range(n):\\n            for j in range(m):\\n                d = abs(i-cx) + abs(j-cy)\\n                if d <= r:\\n                    output[i][j] = max(output[i][j], r+1-d)\\n    return output\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,1,0,0,0,0,0,1,0,0,1],\n        [1,0,0,0,1,0,0,0,1,0,0,0,1],\n        [1,0,0,0,0,1,0,1,0,0,0,0,1],\n        [1,0,0,0,0,0,1,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,3,3,3,3,3,3,3,3,3,2,1],\n        [1,2,3,4,4,4,1,4,4,2,1,2,1],\n        [1,2,3,4,5,1,2,1,5,4,3,2,1],\n        [1,2,3,4,1,2,3,2,1,4,3,2,1],\n        [1,2,3,1,2,3,4,3,2,1,3,2,1],\n        [1,2,3,4,1,2,3,2,1,4,3,2,1],\n        [1,2,3,4,5,1,2,1,5,4,3,2,1],\n        [1,2,3,4,4,4,1,4,4,2,1,2,1],\n        [1,2,3,3,3,3,3,3,3,3,3,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    output = [[0]*m for _ in range(n)]\\n    cx, cy = 6, 6; r1, r2 = 3, 6\\n    for i in range(n):\\n        for j in range(m):\\n            d1 = abs(i-cx) + abs(j-cy)\\n            if d1 <= r1:\\n                output[i][j] = r1+1-d1\\n            else:\\n                d2 = max(abs(i-cx), abs(j-cy))\\n                if d2 <= r2:\\n                    output[i][j] = r2+1-d2\\n    return output\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e1091589-4e41-4fc0-b70f-67125858b94d.json",
    "uuid": "e1091589-4e41-4fc0-b70f-67125858b94d",
    "created": "2025-04-28 22:47:00",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,0],\n        [0,3,2,2,2,2,2,3,0],\n        [0,3,2,2,2,2,2,3,0],\n        [0,3,2,2,2,2,2,3,0],\n        [0,3,2,2,2,2,2,3,0],\n        [0,3,3,3,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    out = [row[:] for row in grid]\\n    ones = [(i,j) for i in range(H) for j in range(W) if grid[i][j] == 1]\\n    for i,j in ones:\\n        out[i][j] = 2\\n    for i,j in ones:\\n        for di,dj in [(-1,0),(1,0),(0,-1),(0,1)]:\\n            ni, nj = i+di, j+dj\\n            if 0 <= ni < H and 0 <= nj < W and grid[ni][nj] == 0:\\n                out[ni][nj] = 3\\n    return out\\n\\n# Example usage\\ninput_grid = [\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,1,1,1,1,1,0,0],\\n  [0,0,1,0,0,0,1,0,0],\\n  [0,0,1,0,0,0,1,0,0],\\n  [0,0,1,0,0,0,1,0,0],\\n  [0,0,1,1,1,1,1,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0]\\n]\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,0,0,0,0],\n        [3,2,3,0,0,0,0,0,0],\n        [0,3,2,3,0,0,0,0,0],\n        [0,0,3,2,3,0,0,0,0],\n        [0,0,0,3,2,3,0,0,0],\n        [0,0,0,0,3,2,3,0,0],\n        [0,0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    out = [row[:] for row in grid]\\n    ones = [(i,j) for i in range(H) for j in range(W) if grid[i][j] == 1]\\n    for i,j in ones:\\n        out[i][j] = 2\\n    for i,j in ones:\\n        for di,dj in [(-1,0),(1,0),(0,-1),(0,1)]:\\n            ni, nj = i+di, j+dj\\n            if 0 <= ni < H and 0 <= nj < W and grid[ni][nj] == 0:\\n                out[ni][nj] = 3\\n    return out\\n\\n# Example usage\\ninput_grid = [\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,1,0,0,0,0,0,0,0],\\n  [0,0,1,0,0,0,0,0,0],\\n  [0,0,0,1,0,0,0,0,0],\\n  [0,0,0,0,1,0,0,0,0],\\n  [0,0,0,0,0,1,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0]\\n]\\nprint(transform(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4681bd7d-1103-4653-9f83-174bc063fdd7.json",
    "uuid": "4681bd7d-1103-4653-9f83-174bc063fdd7",
    "created": "2025-04-28 22:44:06",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,1,0,0,2,0,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [0,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,0,0],\n        [0,1,1,0,1,0,1,0,0],\n        [0,1,0,1,3,1,1,0,0],\n        [0,1,1,3,3,3,1,0,0],\n        [0,1,0,1,3,1,1,0,0],\n        [0,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"from collections import deque\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # 1) Flood-fill exterior (cells !=1) to mark outside\\n    visited = [[False]*W for _ in range(H)]\\n    q = deque()\\n    for r in range(H):\\n        for c in (0, W-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    for c in range(W):\\n        for r in (0, H-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    while q:\\n        r, c = q.popleft()\\n        for dr, dc in ((1,0),(-1,0),(0,1),(0,-1)):\\n            nr, nc = r+dr, c+dc\\n            if 0<=nr<H and 0<=nc<W and not visited[nr][nc] and grid[nr][nc]!=1:\\n                visited[nr][nc] = True; q.append((nr,nc))\\n\\n    # 2) Checker-fill interior: (r+c)%2==0 -> 1\\n    res = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if not visited[r][c] and (r+c)%2==0:\\n                res[r][c] = 1\\n\\n    # 3) Dilate plus-centers (value 2) by Chebyshev radius=1 -> 3\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                for dr in (-1,0,1):\\n                    for dc in (-1,0,1):\\n                        nr, nc = r+dr, c+dc\\n                        if 0<=nr<H and 0<=nc<W and res[nr][nc] != 1:\\n                            res[nr][nc] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [1,0,0,0,2,0,0,0,1],\n        [0,1,0,0,0,0,0,1,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,1,1,0,1,1,0,0],\n        [0,1,1,0,1,0,1,1,0],\n        [1,1,0,3,3,3,0,1,1],\n        [0,1,0,3,1,3,0,1,0],\n        [0,0,1,1,0,1,1,0,0],\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"from collections import deque\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    visited = [[False]*W for _ in range(H)]\\n    q = deque()\\n    for r in range(H):\\n        for c in (0, W-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    for c in range(W):\\n        for r in (0, H-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    while q:\\n        r, c = q.popleft()\\n        for dr, dc in ((1,0),(-1,0),(0,1),(0,-1)):\\n            nr, nc = r+dr, c+dc\\n            if 0<=nr<H and 0<=nc<W and not visited[nr][nc] and grid[nr][nc]!=1:\\n                visited[nr][nc] = True; q.append((nr,nc))\\n    res = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if not visited[r][c] and (r+c)%2==0:\\n                res[r][c] = 1\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                for dr in (-1,0,1):\\n                    for dc in (-1,0,1):\\n                        nr, nc = r+dr, c+dc\\n                        if 0<=nr<H and 0<=nc<W and res[nr][nc] != 1:\\n                            res[nr][nc] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,1,0,1,0,1,0],\n        [1,0,0,0,1,0,0,0,1],\n        [0,1,0,1,0,1,0,1,0],\n        [0,0,1,0,2,0,1,0,0],\n        [0,1,0,1,0,1,0,1,0],\n        [1,0,0,0,1,0,0,0,1],\n        [0,1,0,1,0,1,0,1,0],\n        [0,0,1,0,0,0,1,0,0]\n      ],\n      \"output\": [\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,1,0,1,0,1,0],\n        [1,0,1,0,1,0,1,0,1],\n        [0,1,0,1,3,1,0,1,0],\n        [0,0,1,3,3,3,1,0,0],\n        [0,1,0,1,3,1,0,1,0],\n        [1,0,1,0,1,0,1,0,1],\n        [0,1,0,1,0,1,0,1,0],\n        [0,0,1,0,0,0,1,0,0]\n      ],\n      \"code\": \"from collections import deque\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    visited = [[False]*W for _ in range(H)]\\n    q = deque()\\n    for r in range(H):\\n        for c in (0, W-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    for c in range(W):\\n        for r in (0, H-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    while q:\\n        r, c = q.popleft()\\n        for dr, dc in ((1,0),(-1,0),(0,1),(0,-1)):\\n            nr, nc = r+dr, c+dc\\n            if 0<=nr<H and 0<=nc<W and not visited[nr][nc] and grid[nr][nc]!=1:\\n                visited[nr][nc] = True; q.append((nr,nc))\\n    res = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if not visited[r][c] and (r+c)%2==0:\\n                res[r][c] = 1\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                for dr in (-1,0,1):\\n                    for dc in (-1,0,1):\\n                        nr, nc = r+dr, c+dc\\n                        if 0<=nr<H and 0<=nc<W and res[nr][nc] != 1:\\n                            res[nr][nc] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,1,0,0,0,0,0,1,0],\n        [1,0,1,0,0,0,1,0,1],\n        [1,0,0,1,0,1,0,0,1],\n        [0,1,0,0,1,0,0,1,0],\n        [0,0,1,0,2,0,1,0,0],\n        [0,1,0,0,1,0,0,1,0],\n        [1,0,0,1,0,1,0,0,1],\n        [1,0,1,0,0,0,1,0,1],\n        [0,1,0,0,0,0,0,1,0]\n      ],\n      \"output\": [\n        [0,1,0,0,0,0,0,1,0],\n        [1,1,1,0,1,0,1,1,1],\n        [1,0,0,1,0,1,0,0,1],\n        [0,1,0,3,3,3,0,1,0],\n        [0,0,1,3,3,3,1,0,0],\n        [0,1,0,3,3,3,0,1,0],\n        [1,0,0,1,0,1,0,0,1],\n        [1,1,1,0,1,0,1,1,1],\n        [0,1,0,0,0,0,0,1,0]\n      ],\n      \"code\": \"from collections import deque\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    visited = [[False]*W for _ in range(H)]\\n    q = deque()\\n    for r in range(H):\\n        for c in (0, W-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    for c in range(W):\\n        for r in (0, H-1):\\n            if grid[r][c] != 1 and not visited[r][c]:\\n                visited[r][c] = True; q.append((r,c))\\n    while q:\\n        r, c = q.popleft()\\n        for dr, dc in ((1,0),(-1,0),(0,1),(0,-1)):\\n            nr, nc = r+dr, c+dc\\n            if 0<=nr<H and 0<=nc<W and not visited[nr][nc] and grid[nr][nc]!=1:\\n                visited[nr][nc] = True; q.append((nr,nc))\\n    res = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if not visited[r][c] and (r+c)%2==0:\\n                res[r][c] = 1\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                for dr in (-1,0,1):\\n                    for dc in (-1,0,1):\\n                        nr, nc = r+dr, c+dc\\n                        if 0<=nr<H and 0<=nc<W and res[nr][nc] != 1:\\n                            res[nr][nc] = 3\\n    return res\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "564fd6c6-b4b4-496a-8c95-7880f6a10e27.json",
    "uuid": "564fd6c6-b4b4-496a-8c95-7880f6a10e27",
    "created": "2025-04-28 22:33:51",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0],\n        [2,2,2,2,2,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,2,0,0],\n        [2,2,2,3,3,3,3,3,3,3,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,2,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = w//2, h//2\\n    out = [row[:] for row in grid]\\n    # draw horizontal line\\n    for x in range(w):\\n        if out[cy][x] == 0:\\n            out[cy][x] = 3\\n    # draw vertical line\\n    for y in range(h):\\n        if out[y][cx] == 0:\\n            out[y][cx] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,2,2,2,0,0,0,0,0,2,2,2,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,2,0,0,3,0,0,0,0,2,0,0],\n        [0,2,2,2,3,3,3,3,3,2,2,2,0],\n        [0,0,2,0,0,3,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,3,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = w//2, h//2\\n    out = [row[:] for row in grid]\\n    for x in range(w):\\n        if out[cy][x] == 0:\\n            out[cy][x] = 3\\n    for y in range(h):\\n        if out[y][cx] == 0:\\n            out[y][cx] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,2,2,2,0,0,0,0,0,2,2,2,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,2,2,2,0,0,0,0,0,2,2,2,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,3,0,0,0,2,0,0],\n        [0,2,2,2,0,0,3,0,0,2,2,2,0],\n        [0,0,2,0,0,0,3,0,0,0,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,3,3,3,3,3,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,2,0,0,0,3,0,0,0,2,0,0],\n        [0,2,2,2,0,0,3,0,0,2,2,2,0],\n        [0,0,2,0,0,0,3,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = w//2, h//2\\n    out = [row[:] for row in grid]\\n    for x in range(w):\\n        if out[cy][x] == 0:\\n            out[cy][x] = 3\\n    for y in range(h):\\n        if out[y][cx] == 0:\\n            out[y][cx] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,2,2,2,0,0,0,0,0,2,2,2,0],\n        [0,0,2,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,2,0,0,3,0,0,0,0,2,0,0],\n        [0,2,2,2,3,3,3,3,3,2,2,2,0],\n        [0,0,2,0,0,3,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = w//2, h//2\\n    out = [row[:] for row in grid]\\n    for x in range(w):\\n        if out[cy][x] == 0:\\n            out[cy][x] = 3\\n    for y in range(h):\\n        if out[y][cx] == 0:\\\\n            out[y][cx] = 3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "91836f03-e427-4fd6-b025-ccb69c813e30.json",
    "uuid": "91836f03-e427-4fd6-b025-ccb69c813e30",
    "created": "2025-04-28 22:34:51",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,9,0,0,1,0,0,0],\n        [0,0,0,1,0,6,0,2,0,1,0,0,0],\n        [4,4,4,1,8,0,0,0,0,1,5,5,5],\n        [4,4,4,0,0,7,0,3,0,0,5,5,5],\n        [4,4,4,1,0,0,0,0,0,1,5,5,5],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,8,0,0,1,0,0,0],\n        [0,0,0,1,0,7,0,6,0,1,0,0,0],\n        [4,4,4,1,0,0,0,0,9,1,5,5,5],\n        [4,4,4,0,0,3,0,2,0,0,5,5,5],\n        [4,4,4,1,0,0,0,0,0,1,5,5,5],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    H, W = len(grid), len(grid[0])\\n    cy, cx = H//2, W//2  # (6,6)\\n    # 대상 값들\\n    targets = {2,3,6,7,8,9}\\n    # 출력 그리드 복사\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v in targets:\\n                dy, dx = i - cy, j - cx\\n                # 90° CCW: (dy,dx) -> (-dx, dy)\\n                ni, nj = cy - dx, cx + dy\\n                out[ni][nj] = v\\n                out[i][j] = 0\\n    return out\\n\\n# 예시 실행\\nres = rotate_ccw(input_grid)\\nassert res == output_grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,2,0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0,0,3,1,0,0,0],\n        [4,4,4,1,9,0,0,0,0,1,5,5,5],\n        [4,4,4,0,0,0,0,6,0,0,5,5,5],\n        [4,4,4,1,0,0,8,0,0,1,5,5,5],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,1,0,0,9,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0,0,2,1,0,0,0],\n        [4,4,4,1,8,0,0,0,0,1,5,5,5],\n        [4,4,4,0,0,6,0,0,0,0,5,5,5],\n        [4,4,4,1,0,0,0,3,0,1,5,5,5],\n        [0,0,0,1,1,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    H, W = len(grid), len(grid[0])\\n    cy, cx = H//2, W//2  # (6,6)\\n    targets = {2,3,6,8,9}\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v in targets:\\n                dy, dx = i - cy, j - cx\\n                ni, nj = cy - dx, cx + dy\\n                out[ni][nj] = v\\n                out[i][j] = 0\\n    return out\\n\\n# 검증\\nassert rotate_ccw(input_grid) == output_grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "360f166f-aed1-4de8-9279-4d41983350ef.json",
    "uuid": "360f166f-aed1-4de8-9279-4d41983350ef",
    "created": "2025-04-28 22:39:14",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [4,4,4,0,0,0,2,0,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,4,4,4,0,0,0,2,0],\n        [0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,3,3,3,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy portal\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 9:\\n                out[i][j] = 9\\n    # move fragments\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v == 1:\\n                di, dj = 1, 0\\n            elif v == 2:\\n                di, dj = 0, -1\\n            elif v == 3:\\n                di, dj = -1, 0\\n            elif v == 4:\\n                di, dj = 0, 1\\n            else:\\n                continue\\n            ni, nj = i + di, j + dj\\n            if 0 <= ni < h and 0 <= nj < w:\\n                out[ni][nj] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,4,0,0,0,9,0,2,0,2,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,3,3,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,4,0,0,9,2,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,3,3,3,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy portal\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 9:\\n                out[i][j] = 9\\n    # move fragments\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v == 1:\\n                di, dj = 1, 0\\n            elif v == 2:\\n                di, dj = 0, -1\\n            elif v == 3:\\n                di, dj = -1, 0\\n            elif v == 4:\\n                di, dj = 0, 1\\n            else:\\n                continue\\n            ni, nj = i + di, j + dj\\n            if 0 <= ni < h and 0 <= nj < w:\\n                out[ni][nj] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "48bd6d6a-056b-451e-9c4f-160590f1eb1e.json",
    "uuid": "48bd6d6a-056b-451e-9c4f-160590f1eb1e",
    "created": "2025-04-28 22:54:32",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,8,0,3,0,0,0,0],\n        [0,0,0,6,0,9,0,7,0,0,0],\n        [0,0,0,0,2,0,1,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,7,0,6,0,0,0,0],\n        [0,0,0,3,0,9,0,4,0,0,0],\n        [0,0,0,0,5,0,8,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_animals(grid):\\n    # 11×11 grid, center at (5,5), radius=2 ring\\n    neighbors = [(3,5),(4,6),(5,7),(6,6),(7,5),(6,4),(5,3),(4,4)]\\n    # mapping c → (c+1 mod 8), domain 1..8\\n    def map_c(c): return ((c) % 8) + 1\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for (r,c) in neighbors]\\n    # rotate clockwise: new at i ← old from (i-1)\\n    for i,(r,c) in enumerate(neighbors):\\n        out[r][c] = map_c(vals[(i-1) % 8])\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,8,0,3,0,0,0,0],\n        [0,0,0,4,0,9,0,7,0,0,0],\n        [0,0,0,0,6,0,1,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,3,0,1,0,0,0,0],\n        [0,0,0,5,0,9,0,2,0,0,0],\n        [0,0,0,0,4,0,6,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_fruits(grid):\\n    # mapping c → (c-1 mod 8), domain 1..8\\n    def map_c(c): return ((c-2) % 8) + 1\\n    neighbors = [(3,5),(4,6),(5,7),(6,6),(7,5),(6,4),(5,3),(4,4)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for (r,c) in neighbors]\\n    for i,(r,c) in enumerate(neighbors):\\n        out[r][c] = map_c(vals[(i-1) % 8])  # clockwise rotate\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,2,0,4,0,0,0,0],\n        [0,0,0,5,0,9,0,6,0,0,0],\n        [0,0,0,0,1,0,7,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,7,0,2,0,0,0,0],\n        [0,0,0,3,0,9,0,6,0,0,0],\n        [0,0,0,0,5,0,8,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_instruments(grid):\\n    # mapping c → (c+2 mod 8), domain 1..8\\n    def map_c(c): return ((c+1) % 8) + 1\\n    neighbors = [(3,5),(4,6),(5,7),(6,6),(7,5),(6,4),(5,3),(4,4)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for (r,c) in neighbors]\\n    for i,(r,c) in enumerate(neighbors):\\n        out[r][c] = map_c(vals[(i-1) % 8])\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,6,0,7,0,0,0,0],\n        [0,0,0,4,0,9,0,1,0,0,0],\n        [0,0,0,0,8,0,5,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,8,0,7,0,0,0,0],\n        [0,0,0,6,0,9,0,3,0,0,0],\n        [0,0,0,0,4,0,5,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_utensils(grid):\\n    # mapping c → (c+4 mod 8), domain 1..8\\n    def map_c(c): return ((c+3) % 8) + 1\\n    neighbors = [(3,5),(4,6),(5,7),(6,6),(7,5),(6,4),(5,3),(4,4)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for (r,c) in neighbors]\\n    for i,(r,c) in enumerate(neighbors):\\n        out[r][c] = map_c(vals[(i-1) % 8])\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "2abac4e1-996c-440a-a8cc-1abd8f04887c.json",
    "uuid": "2abac4e1-996c-440a-a8cc-1abd8f04887c",
    "created": "2025-04-28 22:36:22",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [1,0,1,0,0,0,0,0,2,2],\n        [1,1,1,0,0,0,0,0,2,0],\n        [1,0,1,0,0,0,0,0,2,2],\n        [0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0],\n        [1,0,1,0,0,0,0,0,2,2],\n        [1,1,1,0,0,0,0,0,2,0],\n        [1,0,1,0,0,0,0,0,2,2]\n      ],\n      \"output\": [\n        [1,0,1,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,2,2],\n        [1,0,1,0,0,0,0,0,0,0],\n        [1,1,1,0,0,0,0,0,2,2],\n        [1,0,1,0,3,0,0,0,2,0],\n        [0,0,0,0,3,3,3,0,2,2],\n        [0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [1,0,1,0,0,0,0,0,0,0],\n        [1,1,1,0,0,0,0,0,2,2]\n      ],\n      \"code\": \"grid = [\\n  [0,0,0,0,0,0,0,0,0,0],\\n  [1,0,1,0,0,0,0,0,2,2],\\n  [1,1,1,0,0,0,0,0,2,0],\\n  [1,0,1,0,0,0,0,0,2,2],\\n  [0,0,0,0,3,0,0,0,0,0],\\n  [0,0,0,0,3,3,3,0,0,0],\\n  [0,0,0,0,3,0,0,0,0,0],\\n  [1,0,1,0,0,0,0,0,2,2],\\n  [1,1,1,0,0,0,0,0,2,0],\\n  [1,0,1,0,0,0,0,0,2,2]\\n]\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                out[(r+1)%H][c] = 1\\n            elif v == 2:\\n                out[(r+2)%H][c] = 2\\n            else:\\n                out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [4,0,0,0,0,0,2,0,0,0],\n        [0,1,0,1,0,0,0,2,0,0],\n        [0,0,1,0,0,0,0,0,2,0],\n        [0,1,0,1,0,0,0,0,0,2],\n        [0,0,0,0,3,3,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,4]\n      ],\n      \"output\": [\n        [4,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,2,0,0,0],\n        [0,0,1,0,0,0,0,2,0,0],\n        [0,1,0,1,3,3,0,0,2,0],\n        [0,0,0,0,3,3,0,0,0,2],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,0,0],\n        [0,1,0,1,0,0,0,0,0,4]\n      ],\n      \"code\": \"grid = [\\n  [4,0,0,0,0,0,2,0,0,0],\\n  [0,1,0,1,0,0,0,2,0,0],\\n  [0,0,1,0,0,0,0,0,2,0],\\n  [0,1,0,1,0,0,0,0,0,2],\\n  [0,0,0,0,3,3,0,0,0,0],\\n  [0,0,0,0,3,3,0,0,0,0],\\n  [0,1,0,1,0,0,0,0,0,0],\\n  [0,0,1,0,0,0,0,0,0,0],\\n  [0,1,0,1,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,4]\\n]\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                out[(r+1)%H][c] = 1\\n            elif v == 2:\\n                out[(r+2)%H][c] = 2\\n            else:\\n                out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0],\n        [0,0,0,0,3,3,0,2,0,0],\n        [0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,0,0,0,0,0,0],\n        [0,0,1,0,0,0,0,0,0,0],\n        [0,1,0,0,3,3,0,0,0,0],\n        [0,0,0,0,3,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,0,2,0]\n      ],\n      \"code\": \"grid = [\\n  [0,0,0,0,0,0,0,0,0,0],\\n  [0,1,1,1,0,0,0,0,0,0],\\n  [0,1,0,0,0,0,0,0,0,0],\\n  [0,1,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,3,3,0,0,0,0],\\n  [0,0,0,0,3,3,0,2,0,0],\\n  [0,0,0,0,0,0,2,2,2,0],\\n  [0,0,0,0,0,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0]\\n]\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                out[(r+1)%H][c] = 1\\n            elif v == 2:\\n                out[(r+2)%H][c] = 2\\n            else:\\n                out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,3,0,0,0,2,0],\n        [1,1,0,0,0,0,3,0,2,0],\n        [1,1,0,0,0,0,0,3,2,0],\n        [0,0,0,0,0,0,0,0,2,0],\n        [1,1,0,0,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0],\n        [1,1,0,0,0,0,0,3,2,0],\n        [1,1,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,2,0],\n        [1,1,0,0,0,0,0,0,2,0],\n        [1,1,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,2,0]\n      ],\n      \"code\": \"grid = [\\n  [0,0,0,0,0,3,0,0,0,0],\\n  [0,0,0,0,3,0,0,0,2,0],\\n  [1,1,0,0,0,0,3,0,2,0],\\n  [1,1,0,0,0,0,0,3,2,0],\\n  [0,0,0,0,0,0,0,0,2,0],\\n  [1,1,0,0,0,0,0,0,0,0],\\n  [1,1,0,0,0,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0]\\n]\\n\\ndef transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                out[(r+1)%H][c] = 1\\n            elif v == 2:\\n                out[(r+2)%H][c] = 2\\n            else:\\n                out[r][c] = v\\n    return out\\n\\nprint(transform(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "75509f52-faf1-4806-91fc-79a57517af1d.json",
    "uuid": "75509f52-faf1-4806-91fc-79a57517af1d",
    "created": "2025-04-28 22:30:12",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,1,0,0],\n                [0,1,1,1,0],\n                [1,1,1,1,1],\n                [0,1,2,1,0],\n                [0,2,2,2,0]\n            ],\n            \"output\": [\n                [0,0,0,0,1,1,0,0,0,0],\n                [0,0,0,0,1,1,0,0,0,0],\n                [0,0,1,1,1,1,1,1,0,0],\n                [0,0,1,1,1,1,1,1,0,0],\n                [1,1,1,1,1,1,1,1,1,1],\n                [1,1,1,1,1,1,1,1,1,1],\n                [0,0,1,1,2,2,1,1,0,0],\n                [0,0,1,1,2,2,1,1,0,0],\n                [0,0,2,2,2,2,2,2,0,0],\n                [0,0,2,2,2,2,2,2,0,0]\n            ],\n            \"code\": \"def scale_2x2(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [[0]*(w*2) for _ in range(h*2)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            for dr in (0,1):\\n                for dc in (0,1):\\n                    out[2*r+dr][2*c+dc] = v\\n    return out\\n\\ninput_grid = [\\n    [0,0,1,0,0],\\n    [0,1,1,1,0],\\n    [1,1,1,1,1],\\n    [0,1,2,1,0],\\n    [0,2,2,2,0]\\n]\\n\\noutput_grid = scale_2x2(input_grid)\\nprint(output_grid)\"\n        },\n        {\n            \"input\": [\n                [0,0,3,3,0,0],\n                [0,0,3,3,0,0],\n                [0,0,0,4,0,0],\n                [0,0,0,4,0,0],\n                [0,0,0,4,0,0],\n                [0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,3,3,3,3,0,0,0,0],\n                [0,0,0,0,3,3,3,3,0,0,0,0],\n                [0,0,0,0,3,3,3,3,0,0,0,0],\n                [0,0,0,0,3,3,3,3,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def scale_2x2(grid):\\n    h, w = len(grid), len(grid[0])\\n    out = [[0]*(w*2) for _ in range(h*2)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            for dr in (0,1):\\n                for dc in (0,1):\\n                    out[2*r+dr][2*c+dc] = v\\n    return out\\n\\ninput_grid = [\\n    [0,0,3,3,0,0],\\n    [0,0,3,3,0,0],\\n    [0,0,0,4,0,0],\\n    [0,0,0,4,0,0],\\n    [0,0,0,4,0,0],\\n    [0,0,0,0,0,0]\\n]\\n\\noutput_grid = scale_2x2(input_grid)\\nprint(output_grid)\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "e243cd30-4fcd-44f1-b44a-eb97190ad385.json",
    "uuid": "e243cd30-4fcd-44f1-b44a-eb97190ad385",
    "created": "2025-04-28 22:36:44",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,2,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [5,0,0,0,0,0,0,0,0,0,3],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,4,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,5,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [4,0,0,0,0,0,0,0,0,0,2],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,3,1,1,1,1,1]\n      ],\n      \"code\": \"import copy\\ninput_grid = [\\n    [1,1,1,1,1,2,1,1,1,1,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [5,0,0,0,0,0,0,0,0,0,3],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,1],\\n    [1,1,1,1,1,4,1,1,1,1,1]\\n]\\n\\ndef rotate_square_border(grid):\\n    h, w = len(grid), len(grid[0])\\n    coords = []\\n    # top row\\n    for j in range(w): coords.append((0,j))\\n    # right column\\n    for i in range(1,h): coords.append((i,w-1))\\n    # bottom row\\n    for j in range(w-2,-1,-1): coords.append((h-1,j))\\n    # left column\\n    for i in range(h-2,0,-1): coords.append((i,0))\\n    # extract and rotate tokens (>1)\\n    vals = [grid[i][j] for i,j in coords if grid[i][j] > 1]\\n    vals = vals[-1:] + vals[:-1]\\n    it = iter(vals)\\n    out = copy.deepcopy(grid)\\n    for i,j in coords:\\n        if grid[i][j] > 1:\\n            out[i][j] = next(it)\\n    return out\\n\\noutput = rotate_square_border(input_grid)\\nprint(output)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,2,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,6,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [5,0,1,1,1,1,1,1,1,1,1,0,3],\n        [1,0,1,1,1,1,9,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,8,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,4,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,5,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,9,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [4,0,1,1,1,1,7,1,1,1,1,0,2],\n        [1,0,1,1,1,1,6,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,1,1,1,8,1,1,1,1,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,3,1,1,1,1,1,1]\n      ],\n      \"code\": \"import copy\\ninput_grid = [\\n    [1,1,1,1,1,1,2,1,1,1,1,1,1],\\n    [1,0,0,0,0,0,0,0,0,0,0,0,1],\\n    [1,0,1,1,1,1,1,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,6,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,1,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,1,1,1,1,1,0,1],\\n    [5,0,1,1,1,1,1,1,1,1,1,0,3],\\n    [1,0,1,1,1,1,9,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,1,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,8,1,1,1,1,0,1],\\n    [1,0,1,1,1,1,1,1,1,1,1,0,1],\\n    [1,0,0,0,0,0,0,0,0,0,0,0,1],\\n    [1,1,1,1,1,1,4,1,1,1,1,1,1]\\n]\\n\\ndef rotate(coords, grid):\\n    vals = [grid[i][j] for i,j in coords if grid[i][j] > 1]\\n    vals = vals[-1:] + vals[:-1]\\n    it = iter(vals)\\n    for i,j in coords:\\n        if grid[i][j] > 1:\\n            grid[i][j] = next(it)\\n    return grid\\n\\nh, w = len(input_grid), len(input_grid[0])\\n# outer border coords\\nouter = [(0,j) for j in range(w)] + [(i,w-1) for i in range(1,h)] + [(h-1,j) for j in range(w-2,-1,-1)] + [(i,0) for i in range(h-2,0,-1)]\\n# inner border coords: rows/cols 3..9\\ninner = [(3,j) for j in range(3,10)] + [(i,9) for i in range(4,10)] + [(9,j) for j in range(8,2,-1)] + [(i,3) for i in range(8,3,-1)]\\n\\ngrid_cp = copy.deepcopy(input_grid)\\ngrid_cp = rotate(outer, grid_cp)\\ngrid_cp = rotate(inner, grid_cp)\\nprint(grid_cp)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,4,0,0,0,2,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [1,1,1,1,3,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,0,1,0,1,0,0,0],\n        [0,0,2,0,0,0,3,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,1,0,0,0,0,0,1,0],\n        [1,1,1,1,4,1,1,1,1]\n      ],\n      \"code\": \"input_grid = [\\n    [0,0,0,0,1,0,0,0,0],\\n    [0,0,0,0,1,0,0,0,0],\\n    [0,0,0,1,0,1,0,0,0],\\n    [0,0,0,1,0,1,0,0,0],\\n    [0,0,4,0,0,0,2,0,0],\\n    [0,0,1,0,0,0,1,0,0],\\n    [0,1,0,0,0,0,0,1,0],\\n    [0,1,0,0,0,0,0,1,0],\\n    [1,1,1,1,3,1,1,1,1]\\n]\\n# triangle border in clockwise order starting at apex\\ncoords = [\\n    (0,4),(2,5),(4,6),(6,7),(8,8),\\n    (8,7),(8,6),(8,5),(8,4),(8,3),(8,2),(8,1),(8,0),\\n    (6,1),(4,2),(2,3)\\n]\\n# extract and rotate\\nvals = [input_grid[i][j] for i,j in coords if input_grid[i][j] > 1]\\nvals = vals[-1:] + vals[:-1]\\nit = iter(vals)\\n# build output\\nout = [row[:] for row in input_grid]\\nfor i,j in coords:\\n    if input_grid[i][j] > 1:\\n        out[i][j] = next(it)\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [1,1,2,1,1,0,0,0,0,0,0],\n        [1,0,0,0,1,0,0,0,0,0,0],\n        [5,0,0,0,3,0,0,0,0,0,0],\n        [1,0,0,0,1,0,0,0,0,0,0],\n        [1,1,4,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,6,1,1],\n        [0,0,0,0,0,0,1,0,0,0,1],\n        [0,0,0,0,0,0,9,1,0,0,7],\n        [0,0,0,0,0,0,1,0,0,0,1],\n        [0,0,0,0,0,0,1,1,8,1,1]\n      ],\n      \"output\": [\n        [1,1,5,1,1,0,0,0,0,0,0],\n        [1,0,0,0,1,0,0,0,0,0,0],\n        [4,0,0,0,2,0,0,0,0,0,0],\n        [1,0,0,0,1,0,0,0,0,0,0],\n        [1,1,3,1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,1,9,1,1],\n        [0,0,0,0,0,0,1,0,0,0,1],\n        [0,0,0,0,0,0,8,1,0,0,6],\n        [0,0,0,0,0,0,1,0,0,0,1],\n        [0,0,0,0,0,0,1,1,7,1,1]\n      ],\n      \"code\": \"import copy\\ninput_grid = [\\n    [1,1,2,1,1,0,0,0,0,0,0],\\n    [1,0,0,0,1,0,0,0,0,0,0],\\n    [5,0,0,0,3,0,0,0,0,0,0],\\n    [1,0,0,0,1,0,0,0,0,0,0],\\n    [1,1,4,1,1,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,1,1,6,1,1],\\n    [0,0,0,0,0,0,1,0,0,0,1],\\n    [0,0,0,0,0,0,9,1,0,0,7],\\n    [0,0,0,0,0,0,1,0,0,0,1],\\n    [0,0,0,0,0,0,1,1,8,1,1]\\n]\\n\\ndef get_ring(r0,c0,n):\\n    coords = []\\n    # top edge\\n    for j in range(c0, c0+n): coords.append((r0,j))\\n    # right edge\\n    for i in range(r0+1, r0+n): coords.append((i,c0+n-1))\\n    # bottom edge\\n    for j in range(c0+n-2, c0-1, -1): coords.append((r0+n-1,j))\\n    # left edge\\n    for i in range(r0+n-2, r0, -1): coords.append((i,c0))\\n    return coords\\n\\n# two 5×5 rings at (0,0) and (6,6)\\ncoords1 = get_ring(0,0,5)\\ncoords2 = get_ring(6,6,5)\\n\\nout = copy.deepcopy(input_grid)\\nfor coords in [coords1, coords2]:\\n    vals = [input_grid[i][j] for i,j in coords if input_grid[i][j] > 1]\\n    vals = vals[-1:] + vals[:-1]\\n    it = iter(vals)\\n    for i,j in coords:\\n        if input_grid[i][j] > 1:\\n            out[i][j] = next(it)\\nprint(out)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "15485612-9b3f-485b-bd1d-ad1a5809806c.json",
    "uuid": "15485612-9b3f-485b-bd1d-ad1a5809806c",
    "created": "2025-04-28 22:31:23",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,9,0,0,2,0],\n        [0,3,0,8,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,7,0,5,0,0],\n        [4,0,0,0,0,0,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,8,7,0,0,0],\n        [0,0,0,2,9,5,0,0,0],\n        [0,0,0,0,1,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_grid = [[0,0,0,0,0,0,0],\\n              [0,0,0,0,0,0,0],\\n              [0,0,9,0,0,2,0],\\n              [0,3,0,8,0,0,0],\\n              [0,0,0,0,0,0,0],\\n              [0,0,7,0,5,0,0],\\n              [4,0,0,0,0,0,1]]\\n\\ndef anticlockwise_spiral_transform(grid, out_h, out_w):\\n    vals = [x for row in grid for x in row if x != 0]\\n    out = [[0]*out_w for _ in range(out_h)]\\n    r, c = out_h//2, out_w//2\\n    dirs = [(0,-1), (-1,0), (0,1), (1,0)]  # left, up, right, down\\n    step = 1\\n    dir_idx = 0\\n    moved = 0\\n    i, j = r, c\\n    for v in vals:\\n        out[i][j] = v\\n        di, dj = dirs[dir_idx % 4]\\n        i += di; j += dj\\n        moved += 1\\n        if moved == step:\\n            moved = 0\\n            dir_idx += 1\\n            if dir_idx % 2 == 0:\\n                step += 1\\n    return out\\n\\noutput_grid = anticlockwise_spiral_transform(input_grid, 9, 9)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,2,0],\n        [0,0,0,3,0,0,0,0],\n        [0,0,0,0,0,4,0,0],\n        [0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,6,0],\n        [7,0,0,0,8,0,0,0],\n        [0,0,0,0,0,0,0,9]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,4,5,0,0,0,0],\n        [0,0,0,0,2,1,6,0,0,0,0],\n        [0,0,0,0,9,8,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_grid = [[0,0,0,0,0,0,0,0],\\n              [0,1,0,0,0,0,2,0],\\n              [0,0,0,3,0,0,0,0],\\n              [0,0,0,0,0,4,0,0],\\n              [0,0,5,0,0,0,0,0],\\n              [0,0,0,0,0,0,6,0],\\n              [7,0,0,0,8,0,0,0],\\n              [0,0,0,0,0,0,0,9]]\\n\\n# reuse the same spiral function\\ndef anticlockwise_spiral_transform(grid, out_h, out_w):\\n    vals = [x for row in grid for x in row if x != 0]\\n    out = [[0]*out_w for _ in range(out_h)]\\n    r, c = out_h//2, out_w//2\\n    dirs = [(0,-1), (-1,0), (0,1), (1,0)]\\n    step = 1; dir_idx = 0; moved = 0\\n    i, j = r, c\\n    for v in vals:\\n        out[i][j] = v\\n        di, dj = dirs[dir_idx % 4]\\n        i += di; j += dj\\n        moved += 1\\n        if moved == step:\\n            moved = 0; dir_idx += 1\\n            if dir_idx % 2 == 0: step += 1\\n    return out\\n\\noutput_grid = anticlockwise_spiral_transform(input_grid, 11, 11)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0],\n        [1,0,0,0,0,2],\n        [0,3,0,0,4,0],\n        [0,0,5,6,0,0],\n        [0,0,0,0,0,0],\n        [0,0,7,8,0,0],\n        [0,0,0,0,0,0],\n        [0,9,0,0,0,0],\n        [0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,2,3,0,0,0,0],\n        [0,0,0,0,4,5,6,0,0,0,0],\n        [0,0,0,0,9,8,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_grid = [[0,0,0,0,0,0],\\n              [1,0,0,0,0,2],\\n              [0,3,0,0,4,0],\\n              [0,0,5,6,0,0],\\n              [0,0,0,0,0,0],\\n              [0,0,7,8,0,0],\\n              [0,0,0,0,0,0],\\n              [0,9,0,0,0,0],\\n              [0,0,0,0,0,0]]\\n\\ndef anticlockwise_spiral_transform(grid, out_h, out_w):\\n    vals = [x for row in grid for x in row if x != 0]\\n    out = [[0]*out_w for _ in range(out_h)]\\n    r, c = out_h//2, out_w//2\\n    dirs = [(0,-1), (-1,0), (0,1), (1,0)]\\n    step = 1; dir_idx = 0; moved = 0\\n    i, j = r, c\\n    for v in vals:\\n        out[i][j] = v\\n        di, dj = dirs[dir_idx % 4]\\n        i += di; j += dj\\n        moved += 1\\n        if moved == step:\\n            moved = 0; dir_idx += 1\\n            if dir_idx % 2 == 0: step += 1\\n    return out\\n\\noutput_grid = anticlockwise_spiral_transform(input_grid, 11, 11)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,2,0,0],\n        [0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,0,5],\n        [0,0,6,0,0,0,0,0,7,0],\n        [0,0,0,8,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,4,5,0,0,0],\n        [0,0,0,2,1,6,0,0,0],\n        [0,0,0,0,8,7,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_grid = [[0,0,0,0,0,0,0,0,0,0],\\n              [0,1,0,0,0,0,0,2,0,0],\\n              [0,0,0,3,0,0,0,0,0,0],\\n              [0,0,0,0,4,0,0,0,0,5],\\n              [0,0,6,0,0,0,0,0,7,0],\\n              [0,0,0,8,0,0,0,0,0,0]]\\n\\ndef anticlockwise_spiral_transform(grid, out_h, out_w):\\n    vals = [x for row in grid for x in row if x != 0]\\n    out = [[0]*out_w for _ in range(out_h)]\\n    r, c = out_h//2, out_w//2\\n    dirs = [(0,-1), (-1,0), (0,1), (1,0)]\\n    step = 1; dir_idx = 0; moved = 0\\n    i, j = r, c\\n    for v in vals:\\n        out[i][j] = v\\n        di, dj = dirs[dir_idx % 4]\\n        i += di; j += dj\\n        moved += 1\\n        if moved == step:\\n            moved = 0; dir_idx += 1\\n            if dir_idx % 2 == 0: step += 1\\n    return out\\n\\noutput_grid = anticlockwise_spiral_transform(input_grid, 9, 9)\\nprint(output_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a7d41bcb-a01f-48f0-93fc-193403ec4b42.json",
    "uuid": "a7d41bcb-a01f-48f0-93fc-193403ec4b42",
    "created": "2025-04-28 22:43:22",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,1,0,0],\n        [0,0,1,1,1,1,1,1,1,1,1,0],\n        [0,1,1,2,2,2,2,2,2,3,1,1],\n        [0,0,0,0,0,0,0,0,1,0,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_mat = [\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,1,0],\\n  [1,1,1,1,1,1,1,1,1],\\n  [0,0,0,0,0,0,0,1,0],\\n  [0,0,0,0,0,0,0,0,0]\\n]\\nsr, sc = 2, 2\\nv1 = (1, 1)\\nv2 = (1, -1)\\nh = len(input_mat)\\nw = len(input_mat[0])\\nnew_h = h + sr + max(v1[0], v2[0])\\nnew_w = w + sc + max(v1[1], -v2[1])\\noutput = [[0]*new_w for _ in range(new_h)]\\nfor i in range(h):\\n    for j in range(w):\\n        if input_mat[i][j] != 0:\\n            for dr, dc in [(0,0), v1, v2]:\\n                ni = i + sr + dr\\n                nj = j + sc + dc\\n                output[ni][nj] += input_mat[i][j]\\nfor row in output:\\n    print(row)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0],\n        [1,1,1,1,1,1,1],\n        [0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,1,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0],\n        [0,0,1,1,2,2,2,1,1,0],\n        [0,1,1,2,3,3,3,2,1,1],\n        [0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,0,1,0,0,0]\n      ],\n      \"code\": \"input_mat = [\\n  [0,0,0,1,0,0,0],\\n  [0,0,0,1,0,0,0],\\n  [0,0,0,1,0,0,0],\\n  [1,1,1,1,1,1,1],\\n  [0,0,0,1,0,0,0],\\n  [0,0,0,1,0,0,0],\\n  [0,0,0,1,0,0,0]\\n]\\nsr, sc = 2, 2\\nv1 = (1, 1)\\nv2 = (1, -1)\\nh = len(input_mat)\\nw = len(input_mat[0])\\nnew_h = h + sr + max(v1[0], v2[0])\\nnew_w = w + sc + max(v1[1], -v2[1])\\noutput = [[0]*new_w for _ in range(new_h)]\\nfor i in range(h):\\n    for j in range(w):\\n        if input_mat[i][j] != 0:\\n            for dr, dc in [(0,0), v1, v2]:\\n                ni = i + sr + dr\\n                nj = j + sc + dc\\n                output[ni][nj] += input_mat[i][j]\\nfor row in output:\\n    print(row)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0],\n        [0,1,1,1,0],\n        [0,1,1,1,0],\n        [0,1,1,1,0],\n        [0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0],\n        [0,0,1,2,3,2,1,0],\n        [0,0,1,2,3,2,1,0],\n        [0,0,1,1,2,1,1,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_mat = [\\n  [0,0,0,0,0],\\n  [0,1,1,1,0],\\n  [0,1,1,1,0],\\n  [0,1,1,1,0],\\n  [0,0,0,0,0]\\n]\\nsr, sc = 2, 2\\nv1 = (1, 1)\\nv2 = (1, -1)\\nh = len(input_mat)\\nw = len(input_mat[0])\\nnew_h = h + sr + max(v1[0], v2[0])\\nnew_w = w + sc + max(v1[1], -v2[1])\\noutput = [[0]*new_w for _ in range(new_h)]\\nfor i in range(h):\\n    for j in range(w):\\n        if input_mat[i][j] != 0:\\n            for dr, dc in [(0,0), v1, v2]:\\n                ni = i + sr + dr\\n                nj = j + sc + dc\\n                output[ni][nj] += input_mat[i][j]\\nfor row in output:\\n    print(row)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,1,1],\n        [0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,1,0,0],\n        [0,0,0,0,0,1,1,1],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,1,1,0],\n        [0,0,0,0,0,0,1,2,2,1,1],\n        [0,0,0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,0,0,1,1,2,1,0],\n        [0,0,0,0,0,0,1,1,2,1,1],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"input_mat = [\\n  [0,0,0,0,0,1,1,1],\\n  [0,0,0,0,0,1,0,0],\\n  [0,0,0,0,0,1,0,0],\\n  [0,0,0,0,0,1,1,1],\\n  [0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0]\\n]\\nsr, sc = 2, 2\\nv1 = (1, 1)\\nv2 = (1, -1)\\nh = len(input_mat)\\nw = len(input_mat[0])\\nnew_h = h + sr + max(v1[0], v2[0])\\nnew_w = w + sc + max(v1[1], -v2[1])\\noutput = [[0]*new_w for _ in range(new_h)]\\nfor i in range(h):\\n    for j in range(w):\\n        if input_mat[i][j] != 0:\\n            for dr, dc in [(0,0), v1, v2]:\\n                ni = i + sr + dr\\n                nj = j + sc + dc\\n                output[ni][nj] += input_mat[i][j]\\nfor row in output:\\n    print(row)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "74ed7171-fb5a-4341-a83f-71e4551cbadd.json",
    "uuid": "74ed7171-fb5a-4341-a83f-71e4551cbadd",
    "created": "2025-04-28 22:41:38",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,0,0,0,0,5,5,5],\n        [0,4,4,4,4,4,0,0,0,0,5,5,5],\n        [0,0,4,4,4,4,0,0,0,0,5,5,5],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,3,3,3,0,0],\n        [0,0,0,0,0,0,0,0,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,4,4,4,4,0],\n        [0,0,0,3,0,0,0,0,4,4,4,4,0],\n        [0,0,0,3,3,3,0,0,4,4,4,4,0],\n        [0,0,0,3,0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,5,5,5,5,0],\n        [0,0,0,0,0,0,0,0,0,5,5,5,0],\n        [0,0,0,0,0,0,0,0,0,5,5,5,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rotate 90° clockwise\\n    rotated = [list(row) for row in zip(*grid[::-1])]\\n    # swap all 2↔3\\n    return [[3 if x==2 else 2 if x==3 else x for x in row] for row in rotated]\\n\\n# Example:\\n# input_grid = [ ... ]\\n# print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,4,0,0,0,0,0,0,2,0,0],\n        [0,0,0,4,0,0,0,0,0,0,2,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0],\n        [0,4,4,4,4,4,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [3,3,3,3,3,3,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,2,0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,4,0,0,0,0,0,0,0],\n        [0,2,0,0,0,4,0,0,0,0,0,0,0],\n        [0,2,0,0,0,4,0,0,0,0,0,0,0],\n        [0,0,0,4,4,4,4,4,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,3,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rotate 90° clockwise\\n    rotated = [list(row) for row in zip(*grid[::-1])]\\n    # swap all 2↔3\\n    return [[3 if x==2 else 2 if x==3 else x for x in row] for row in rotated]\\n\\n# Example:\\n# input_grid = [ ... ]\\n# print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [1,1,1,0,0,0,0,4,4,4,4],\n        [0,1,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0],\n        [0,2,0,0,0,3,3,3,0,0,0],\n        [0,2,3,3,3,3,3,0,0,0,0],\n        [0,2,0,0,0,3,3,3,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,2,0,0],\n        [0,0,0,0,0,0,0,2,2,0,0],\n        [0,0,3,3,3,3,3,3,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,3,0],\n        [0,0,0,2,0,0,0,0,0,3,0],\n        [3,0,0,2,0,0,0,0,0,3,0],\n        [3,2,0,2,0,0,0,0,4,3,0],\n        [3,2,2,2,0,0,0,4,4,3,0],\n        [3,2,2,2,0,0,0,4,4,4,0],\n        [3,2,2,2,0,0,0,4,4,0,0],\n        [3,2,0,2,0,0,0,0,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rotate 90° clockwise\\n    rotated = [list(row) for row in zip(*grid[::-1])]\\n    # swap all 2↔3\\n    return [[3 if x==2 else 2 if x==3 else x for x in row] for row in rotated]\\n\\n# Example:\\n# input_grid = [ ... ]\\n# print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [2,0,0,0,0,0,0,0,0,0,3],\n        [0,2,0,0,0,0,0,0,0,3,0],\n        [0,0,2,0,0,0,0,3,0,0,0],\n        [0,0,0,2,0,0,3,0,0,0,0],\n        [0,0,0,4,4,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,2],\n        [0,0,0,0,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,5,5,5],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rotate 90° clockwise\\n    rotated = [list(row) for row in zip(*grid[::-1])]\\n    # swap all 2↔3\\n    return [[3 if x==2 else 2 if x==3 else x for x in row] for row in rotated]\\n\\n# Example:\\n# input_grid = [ ... ]\\n# print(transform(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "0237355a-fd2f-4ea4-b227-6b8c51f6171c.json",
    "uuid": "0237355a-fd2f-4ea4-b227-6b8c51f6171c",
    "created": "2025-04-28 22:45:55",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,2,0,1,0,2,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,4,0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,3,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,3,0,1,0,3,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,3,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,4,0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    mid = n//2\\n    out = [row[:] for row in grid]\\n    # swap small ring values 2<->3 at radius 2\\n    for dx,dy in [(0,2),(0,-2),(2,0),(-2,0)]:\\n        i,j = mid+dx, mid+dy\\n        if out[i][j]==2: out[i][j]=3\\n        elif out[i][j]==3: out[i][j]=2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,2,0,1,0,2,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,4,0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,4,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,2,0,1,0,2,0,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,0,0,5,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    mid = n//2\\n    out = [row[:] for row in grid]\\n    # swap large ring values 4<->5 at radius 4\\n    for dx,dy in [(0,4),(0,-4),(4,0),(-4,0)]:\\n        i,j = mid+dx, mid+dy\\n        if out[i][j]==4: out[i][j]=5\\n        elif out[i][j]==5: out[i][j]=4\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,2,0,1,0,2,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,2,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,4,0,0,0,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,2,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,0,2,0,1,0,2,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,5,0,2,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,0,0,4,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    mid = n//2\\n    out = [row[:] for row in grid]\\n    # swap small ring 3<->5 and large ring 3<->5\\n    for r in (2,4):\\n        for dx,dy in [(0,r),(0,-r),(r,0),(-r,0)]:\\n            i,j = mid+dx, mid+dy\\n            if out[i][j]==3: out[i][j]=5\\n            elif out[i][j]==5: out[i][j]=3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "f076a87c-6a46-4d1a-a672-4a2e59541427.json",
    "uuid": "f076a87c-6a46-4d1a-a672-4a2e59541427",
    "created": "2025-04-28 21:24:52",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,0,0,0,0,0],\n        [0,2,2,2,2,2,0,0,0,0,0],\n        [0,2,2,2,2,2,0,0,0,0,0],\n        [0,2,2,2,2,2,0,0,0,0,0],\n        [0,2,2,2,2,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,2,2,2,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,7,7,7,7,7,0],\n        [0,0,0,0,0,7,2,2,2,7,0],\n        [0,0,0,0,0,7,2,2,2,7,0],\n        [0,0,0,0,0,7,2,2,2,7,0],\n        [0,0,0,0,0,7,7,7,7,7,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,7,2,7,0,0,0,0,0,0],\n        [0,0,7,7,7,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # rotate 90° clockwise\\n    m, n = len(grid), len(grid[0])\\n    new = [[grid[m-1-r][c] for r in range(m)] for c in range(n)]\\n    h, w = len(new), len(new[0])\\n    res = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            if new[i][j] == 2:\\n                # boundary if any neighbor is 0 or out of bounds\\n                for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                    ni, nj = i+dx, j+dy\\n                    if ni<0 or ni>=h or nj<0 or nj>=w or new[ni][nj]==0:\\n                        res[i][j] = 7\\n                        break\\n                else:\\n                    res[i][j] = 2\\n    return res\\n\\ngrid = [\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,2,2,2,2,2,0,0,0,0,0],\\n  [0,2,2,2,2,2,0,0,0,0,0],\\n  [0,2,2,2,2,2,0,0,0,0,0],\\n  [0,2,2,2,2,2,0,0,0,0,0],\\n  [0,2,2,2,2,2,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,2,2,2,0],\\n  [0,0,0,0,0,0,0,2,2,2,0],\\n  [0,0,0,0,0,0,0,2,2,2,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,0,0,0,0,0,0,0],\n        [0,2,2,2,0,2,0,0,0,0,0],\n        [0,2,2,2,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,7,7,7,0,0],\n        [0,0,0,0,0,7,0,7,2,7,0],\n        [0,0,0,0,0,7,0,7,7,7,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,7,7,7,2,7,7,7,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m, n = len(grid), len(grid[0])\\n    new = [[grid[m-1-r][c] for r in range(m)] for c in range(n)]\\n    h, w = len(new), len(new[0])\\n    res = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            if new[i][j] == 2:\\n                for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                    ni, nj = i+dx, j+dy\\n                    if ni<0 or ni>=h or nj<0 or nj>=w or new[ni][nj]==0:\\n                        res[i][j] = 7\\n                        break\\n                else:\\n                    res[i][j] = 2\\n    return res\\n\\ngrid = [\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,2,2,2,0,0,0,0,0,0,0],\\n  [0,2,2,2,0,2,0,0,0,0,0],\\n  [0,2,2,2,0,2,0,0,0,0,0],\\n  [0,0,0,0,0,2,0,0,0,0,0],\\n  [0,0,2,2,2,2,2,2,0,0,0],\\n  [0,0,0,0,0,2,0,0,0,0,0],\\n  [0,0,0,0,0,2,0,0,0,0,0],\\n  [0,0,0,0,0,2,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,2,2,2,0,0,2],\n        [2,0,0,2,2,2,0,0,2],\n        [2,0,0,2,2,2,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [7,7,7,7,7,7,7,7,7],\n        [7,0,0,0,0,0,0,0,7],\n        [7,0,0,0,0,0,0,0,7],\n        [7,0,0,7,7,7,0,0,7],\n        [7,0,0,7,2,7,0,0,7],\n        [7,0,0,7,7,7,0,0,7],\n        [7,0,0,0,0,0,0,0,7],\n        [7,0,0,0,0,0,0,0,7],\n        [7,7,7,7,7,7,7,7,7]\n      ],\n      \"code\": \"def transform(grid):\\n    m, n = len(grid), len(grid[0])\\n    new = [[grid[m-1-r][c] for r in range(m)] for c in range(n)]\\n    h, w = len(new), len(new[0])\\n    res = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            if new[i][j] == 2:\\n                for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                    ni, nj = i+dx, j+dy\\n                    if ni<0 or ni>=h or nj<0 or nj>=w or new[ni][nj]==0:\\n                        res[i][j] = 7\\n                        break\\n                else:\\n                    res[i][j] = 2\\n    return res\\n\\ngrid = [\\n  [2,2,2,2,2,2,2,2,2],\\n  [2,0,0,0,0,0,0,0,2],\\n  [2,0,0,0,0,0,0,0,2],\\n  [2,0,0,2,2,2,0,0,2],\\n  [2,0,0,2,2,2,0,0,2],\\n  [2,0,0,2,2,2,0,0,2],\\n  [2,0,0,0,0,0,0,0,2],\\n  [2,0,0,0,0,0,0,0,2],\\n  [2,2,2,2,2,2,2,2,2]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,0,7,2,7,0,0,0,0],\n        [0,0,0,0,7,2,7,0,0,0,0],\n        [0,0,0,0,7,2,7,0,0,0,0],\n        [0,0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    m, n = len(grid), len(grid[0])\\n    new = [[grid[m-1-r][c] for r in range(m)] for c in range(n)]\\n    h, w = len(new), len(new[0])\\n    res = [[0]*w for _ in range(h)]\\n    for i in range(h):\\n        for j in range(w):\\n            if new[i][j] == 2:\\n                for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                    ni, nj = i+dx, j+dy\\n                    if ni<0 or ni>=h or nj<0 or nj>=w or new[ni][nj]==0:\\n                        res[i][j] = 7\\n                        break\\n                else:\\n                    res[i][j] = 2\\n    return res\\n\\ngrid = [\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,2,2,2,2,2,0,0,0],\\n  [0,0,0,2,2,2,2,2,0,0,0],\\n  [0,0,0,2,2,2,2,2,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "f890b2d9-01c1-4cb8-9770-173f9ef0fddf.json",
    "uuid": "f890b2d9-01c1-4cb8-9770-173f9ef0fddf",
    "created": "2025-04-28 22:35:44",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,7,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [9,0,0,0,1,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,7,0,0,0,3,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx, cy = n//2, m//2\\n    # initialize result\\n    res = [[0]*m for _ in range(n)]\\n    # mark original object positions (except center)\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] != 0 and not (i==cx and j==cy):\\n                res[i][j] = 3\\n    # place rotated objects 90° CW around center\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v != 0 and not (i==cx and j==cy):\\n                di, dj = i-cx, j-cy\\n                ni, nj = cx + dj, cy - di\\n                res[ni][nj] = v\\n    # keep center fixed\\n    res[cx][cy] = grid[cx][cy]\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,0,0,0,0,0,0],\n        [0,2,2,0,0,0,0,0,0],\n        [0,0,0,0,0,0,4,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,3,0,0,0,2,2,0],\n        [0,3,3,0,0,0,2,2,0],\n        [0,0,0,0,0,0,3,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    cx, cy = n//2, m//2\\n    res = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] != 0 and not (i==cx and j==cy):\\n                res[i][j] = 3\\n    for i in range(n):\\n        for j in range(m):\\n            v = grid[i][j]\\n            if v != 0 and not (i==cx and j==cy):\\n                di, dj = i-cx, j-cy\\n                ni, nj = cx + dj, cy - di\\n                res[ni][nj] = v\\n    res[cx][cy] = grid[cx][cy]\\n    return res\"\n    }\n  ]\n}\n```"
  }
]