[
  {
    "filename": "04da47bb-5d7f-4f8e-a8ef-4516854ce538.json",
    "uuid": "04da47bb-5d7f-4f8e-a8ef-4516854ce538",
    "created": "2025-04-27 19:11:38",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "067e202c-67a6-4111-9077-3ef982279b30.json",
    "uuid": "067e202c-67a6-4111-9077-3ef982279b30",
    "created": "2025-04-27 11:33:14",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,3,0,0],\n        [0,3,1,3,0],\n        [3,1,1,1,0],\n        [0,2,2,2,0],\n        [3,1,1,1,0],\n        [0,3,1,3,0],\n        [0,0,3,0,0]\n      ],\n      \"output\": [\n        [0,0,3,0,0,0,3,0,0],\n        [0,3,1,3,0,3,1,3,0],\n        [3,1,1,1,0,1,1,1,3],\n        [0,2,2,2,0,2,2,2,0],\n        [3,1,1,1,0,1,1,1,3],\n        [0,3,1,3,0,3,1,3,0],\n        [0,0,3,0,0,0,3,0,0]\n      ],\n      \"code\": \"def mirror(grid):\\n    # take each row and append its left part (excluding center) reversed\\n    return [row + row[:-1][::-1] for row in grid]\\n\\ninput_grid = [\\n    [0,0,3,0,0],\\n    [0,3,1,3,0],\\n    [3,1,1,1,0],\\n    [0,2,2,2,0],\\n    [3,1,1,1,0],\\n    [0,3,1,3,0],\\n    [0,0,3,0,0]\\n]\\noutput_grid = mirror(input_grid)\\nprint(output_grid)  # matches expected output\"\n    },\n    {\n      \"input\": [\n        [0,0,4,0,0],\n        [0,4,4,4,0],\n        [4,4,4,4,0],\n        [0,0,2,0,0],\n        [0,0,2,0,0],\n        [0,0,5,0,0],\n        [0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,4,0,0,0,4,0,0],\n        [0,4,4,4,0,4,4,4,0],\n        [4,4,4,4,0,4,4,4,4],\n        [0,0,2,0,0,0,2,0,0],\n        [0,0,2,0,0,0,2,0,0],\n        [0,0,5,0,0,0,5,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def mirror(grid):\\n    return [row + row[:-1][::-1] for row in grid]\\n\\ninput_grid = [\\n    [0,0,4,0,0],\\n    [0,4,4,4,0],\\n    [4,4,4,4,0],\\n    [0,0,2,0,0],\\n    [0,0,2,0,0],\\n    [0,0,5,0,0],\\n    [0,0,0,0,0]\\n]\\noutput_grid = mirror(input_grid)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,6,0,0],\n        [0,6,6,6,0],\n        [6,6,7,6,0],\n        [0,6,6,6,0],\n        [0,0,6,0,0],\n        [0,0,0,0,0],\n        [0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,6,0,0,0,6,0,0],\n        [0,6,6,6,0,6,6,6,0],\n        [6,6,7,6,0,6,7,6,6],\n        [0,6,6,6,0,6,6,6,0],\n        [0,0,6,0,0,0,6,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def mirror(grid):\\n    return [row + row[:-1][::-1] for row in grid]\\n\\ninput_grid = [\\n    [0,0,6,0,0],\\n    [0,6,6,6,0],\\n    [6,6,7,6,0],\\n    [0,6,6,6,0],\\n    [0,0,6,0,0],\\n    [0,0,0,0,0],\\n    [0,0,0,0,0]\\n]\\noutput_grid = mirror(input_grid)\\nprint(output_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0],\n        [0,8,8,0,0],\n        [0,8,8,0,0],\n        [0,8,8,0,0],\n        [0,8,8,0,0],\n        [0,9,0,0,0],\n        [0,9,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,8,8,0,0,0,8,8,0],\n        [0,8,8,0,0,0,8,8,0],\n        [0,8,8,0,0,0,8,8,0],\n        [0,8,8,0,0,0,8,8,0],\n        [0,9,0,0,0,0,0,9,0],\n        [0,9,0,0,0,0,0,9,0]\n      ],\n      \"code\": \"def mirror(grid):\\n    return [row + row[:-1][::-1] for row in grid]\\n\\ninput_grid = [\\n    [0,0,0,0,0],\\n    [0,8,8,0,0],\\n    [0,8,8,0,0],\\n    [0,8,8,0,0],\\n    [0,8,8,0,0],\\n    [0,9,0,0,0],\\n    [0,9,0,0,0]\\n]\\noutput_grid = mirror(input_grid)\\nprint(output_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "0389a911-ffa4-48f0-a899-350637358909.json",
    "uuid": "0389a911-ffa4-48f0-a899-350637358909",
    "created": "2025-04-27 07:22:00",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,0,0,7,7,7,7,7,0],\n        [0,0,0,3,3,3,0,0,0,7,7,7,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0,7,0,5,0,0],\n        [0,0,0,3,3,3,0,0,0,0,0,5,5,5,0],\n        [0,0,0,0,0,0,0,0,0,0,5,5,5,5,5],\n        [0,0,0,0,0,0,0,0,0,0,0,5,5,5,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,5,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,0,3,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,3,0,0,7,7,7,7,7,0],\n        [0,0,0,3,0,3,0,0,0,7,0,7,0,0,0],\n        [0,0,0,0,3,0,0,0,0,0,7,0,5,0,0],\n        [0,0,0,3,3,3,0,0,0,0,0,5,0,5,0],\n        [0,0,0,0,0,0,0,0,0,0,5,0,0,0,5],\n        [0,0,0,0,0,0,0,0,0,0,0,5,0,5,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,5,0,0]\n      ],\n      \"code\": \"def hollow_shapes(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    visited = [[False]*W for _ in range(H)]\\n    result = [row[:] for row in grid]\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    for i in range(H):\\n        for j in range(W):\\n            if grid[i][j] != 0 and not visited[i][j]:\\n                val = grid[i][j]\\n                stack = [(i,j)]\\n                visited[i][j] = True\\n                comp = []\\n                while stack:\\n                    x,y = stack.pop()\\n                    comp.append((x,y))\\n                    for dx,dy in dirs:\\n                        nx,ny = x+dx, y+dy\\n                        if 0 <= nx < H and 0 <= ny < W and not visited[nx][ny] and grid[nx][ny] == val:\\n                            visited[nx][ny] = True\\n                            stack.append((nx,ny))\\n                comp_set = set(comp)\\n                for x,y in comp:\\n                    interior = True\\n                    for dx,dy in dirs:\\n                        nx,ny = x+dx, y+dy\\n                        if (nx,ny) not in comp_set:\\n                            interior = False\\n                            break\\n                    if interior:\\n                        result[x][y] = 0\\n    return result\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,2,2,2,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,2,0],\n        [0,0,0,0,4,0,0,0,8,8,8,0,0],\n        [0,4,4,4,4,4,0,0,0,8,8,0,0],\n        [0,0,0,0,4,0,0,0,0,0,8,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,2,0,0,0],\n   "
  },
  {
    "filename": "0a580050-348c-4b7e-8020-8d3ae8b2def6.json",
    "uuid": "0a580050-348c-4b7e-8020-8d3ae8b2def6",
    "created": "2025-04-27 17:53:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,7,0,0,2,0,0,6,0,0],\n        [0,0,0,0,1,1,1,1,1,0,0],\n        [0,6,0,1,1,1,3,1,1,1,0],\n        [0,0,1,1,1,3,1,3,1,1,1],\n        [0,1,1,1,1,4,1,1,1,6,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,5,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,0,0,0,0,0],\n        [0,1,1,0,6,0,0],\n        [0,1,1,1,0,0,7],\n        [0,1,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [5,1,4,3,1,1,2],\n        [0,1,1,1,3,1,0],\n        [0,1,1,3,1,1,0],\n        [0,1,1,1,1,1,6],\n        [0,1,6,1,1,0,0],\n        [0,1,1,1,0,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(grid):\\n    R, C = len(grid), len(grid[0])\\n    return [[grid[R-1-i][j] for i in range(R)] for j in range(C)]\\n\\ninput_grid = [\\n    [0,0,7,0,0,2,0,0,6,0,0],\\n    [0,0,0,0,1,1,1,1,1,0,0],\\n    [0,6,0,1,1,1,3,1,1,1,0],\\n    [0,0,1,1,1,3,1,3,1,1,1],\\n    [0,1,1,1,1,4,1,1,1,6,1],\\n    [1,1,1,1,1,1,1,1,1,1,1],\\n    [0,0,0,0,0,5,0,0,0,0,0]\\n]\\noutput_grid = rotate_clockwise(input_grid)\\nprint(output_grid)  # Should match the above 'output'\"\n    },\n    {\n      \"input\": [\n        [0,9,0,0,0,2,0,0,8,0,0],\n        [0,0,0,0,1,1,1,1,1,0,0],\n        [0,8,0,1,1,1,3,1,1,1,0],\n        [0,0,1,1,1,3,1,3,1,1,1],\n        [0,1,1,1,1,4,1,1,1,9,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,5,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,0,0,0,0,0],\n        [0,1,1,0,8,0,9],\n        [0,1,1,1,0,0,0],\n        [0,1,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [5,1,4,3,1,1,2],\n        [0,1,1,1,3,1,0],\n        [0,1,1,3,1,1,0],\n        [0,1,1,1,1,1,8],\n        [0,1,9,1,1,0,0],\n        [0,1,1,1,0,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(grid):\\n    R, C = len(grid), len(grid[0])\\n    return [[grid[R-1-i][j] for i in range(R)] for j in range(C)]\\n\\ninput_grid = [\\n    [0,9,0,0,0,2,0,0,8,0,0],\\n    [0,0,0,0,1,1,1,1,1,0,0],\\n    [0,8,0,1,1,1,3,1,1,1,0],\\n    [0,0,1,1,1,3,1,3,1,1,1],\\n    [0,1,1,1,1,4,1,1,1,9,1],\\n    [1,1,1,1,1,1,1,1,1,1,1],\\n    [0,0,0,0,0,5,0,0,0,0,0]\\n]\\noutput_grid = rotate_clockwise(input_grid)\\nprint(output_grid)  # Should match the above 'output'\"\n    },\n    {\n      \"input\": [\n        [0,0,6,0,0,2,0,0,6,0,0],\n        [0,0,0,0,1,1,1,1,1,0,0],\n        [0,8,0,1,1,1,3,1,1,1,0],\n        [0,0,1,1,1,3,1,3,1,1,1],\n        [0,1,1,1,1,4,1,1,1,8,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,5,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,0,0,0,0,0],\n        [0,1,1,0,8,0,0],\n        [0,1,1,1,0,0,6],\n        [0,1,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [5,1,4,3,1,1,2],\n        [0,1,1,1,3,1,0],\n        [0,1,1,3,1,1,0],\n        [0,1,1,1,1,1,6],\n        [0,1,8,1,1,0,0],\n        [0,1,1,1,0,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(grid):\\n    R, C = len(grid), len(grid[0])\\n    return [[grid[R-1-i][j] for i in range(R)] for j in range(C)]\\n\\ninput_grid = [\\n    [0,0,6,0,0,2,0,0,6,0,0],\\n    [0,0,0,0,1,1,1,1,1,0,0],\\n    [0,8,0,1,1,1,3,1,1,1,0],\\n    [0,0,1,1,1,3,1,3,1,1,1],\\n    [0,1,1,1,1,4,1,1,1,8,1],\\n    [1,1,1,1,1,1,1,1,1,1,1],\\n    [0,0,0,0,0,5,0,0,0,0,0]\\n]\\noutput_grid = rotate_clockwise(input_grid)\\nprint(output_grid)  # Should match the above 'output'\"\n    },\n    {\n      \"input\": [\n        [0,7,0,0,0,2,0,0,9,0,0],\n        [0,0,0,0,1,1,1,1,1,0,0],\n        [0,8,0,1,1,1,3,1,1,1,0],\n        [0,0,1,1,1,3,1,3,1,1,1],\n        [0,1,1,1,1,4,1,1,1,8,1],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,0,0,0,5,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,0,0,0,0,0],\n        [0,1,1,0,8,0,7],\n        [0,1,1,1,0,0,0],\n        [0,1,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [5,1,4,3,1,1,2],\n        [0,1,1,1,3,1,0],\n        [0,1,1,3,1,1,0],\n        [0,1,1,1,1,1,9],\n        [0,1,8,1,1,0,0],\n        [0,1,1,1,0,0,0]\n      ],\n      \"code\": \"def rotate_clockwise(grid):\\n    R, C = len(grid), len(grid[0])\\n    return [[grid[R-1-i][j] for i in range(R)] for j in range(C)]\\n\\ninput_grid = [\\n    [0,7,0,0,0,2,0,0,9,0,0],\\n    [0,0,0,0,1,1,1,1,1,0,0],\\n    [0,8,0,1,1,1,3,1,1,1,0],\\n    [0,0,1,1,1,3,1,3,1,1,1],\\n    [0,1,1,1,1,4,1,1,1,8,1],\\n    [1,1,1,1,1,1,1,1,1,1,1],\\n    [0,0,0,0,0,5,0,0,0,0,0]\\n]\\noutput_grid = rotate_clockwise(input_grid)\\nprint(output_grid)  # Should match the above 'output'\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "13527521-f07f-4604-83f3-1bd91569ac3b.json",
    "uuid": "13527521-f07f-4604-83f3-1bd91569ac3b",
    "created": "2025-04-28 03:17:02",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "1a81a137-82c9-4e32-bfd4-923101c4cbac.json",
    "uuid": "1a81a137-82c9-4e32-bfd4-923101c4cbac",
    "created": "2025-04-27 01:18:31",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0]\n      ],\n      \"output\": [\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0],\n        [0,0,0,1,3,1,3,0,0,2,4,2,4,0,0,0],\n        [0,0,0,0,1,3,1,3,2,4,2,4,0,0,0,0],\n        [0,0,0,0,0,1,3,9,9,2,4,0,0,0,0,0],\n        [0,0,0,0,1,3,1,3,2,4,2,4,0,0,0,0],\n        [0,0,0,1,3,1,3,0,0,2,4,2,4,0,0,0],\n        [0,0,1,3,1,3,0,0,0,0,2,4,2,4,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    d_seq = [0,1,2,3,2,1,0]\\n    patternA = [1,3,1,3]\\n    patternB = [2,4,2,4]\\n    startA, startB = 2, 10\\n    output = []\\n    for d in d_seq:\\n        row = [0]*cols\\n        for i,v in enumerate(patternA):\\n            row[startA + d + i] = v\\n        for i,v in enumerate(patternB):\\n            idx = startB - d + i\\n            row[idx] = 9 if row[idx] != 0 else v\\n        output.append(row)\\n    return output\\n\\n# result = transform(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0]\n      ],\n      \"output\": [\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0],\n        [0,0,0,1,2,3,4,0,0,5,6,7,8,0,0,0],\n        [0,0,0,0,1,2,3,4,5,6,7,8,0,0,0,0],\n        [0,0,0,0,0,1,2,9,9,7,8,0,0,0,0,0],\n        [0,0,0,0,1,2,3,4,5,6,7,8,0,0,0,0],\n        [0,0,0,1,2,3,4,0,0,5,6,7,8,0,0,0],\n        [0,0,1,2,3,4,0,0,0,0,5,6,7,8,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    d_seq = [0,1,2,3,2,1,0]\\n    patternA = [1,2,3,4]\\n    patternB = [5,6,7,8]\\n    startA, startB = 2, 10\\n    output = []\\n    for d in d_seq:\\n        row = [0]*cols\\n        for i,v in enumerate(patternA):\\n            row[startA + d + i] = v\\n        for i,v in enumerate(patternB):\\n            idx = startB - d + i\\n            row[idx] = 9 if row[idx] != 0 else v\\n        output.append(row)\\n    return output\\n\\n# result = transform(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0],\n        [0,0,5,1,5,1,0,0,0,0,6,2,6,2,0,0],\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0],\n        [0,0,5,1,5,1,0,0,0,0,6,2,6,2,0,0],\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0],\n        [0,0,5,1,5,1,0,0,0,0,6,2,6,2,0,0],\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0]\n      ],\n      \"output\": [\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0],\n        [0,0,0,1,5,1,5,0,0,2,6,2,6,0,0,0],\n        [0,0,0,0,1,5,1,5,2,6,2,6,0,0,0,0],\n        [0,0,0,0,0,1,5,9,9,2,6,0,0,0,0,0],\n        [0,0,0,0,1,5,1,5,2,6,2,6,0,0,0,0],\n        [0,0,0,1,5,1,5,0,0,2,6,2,6,0,0,0],\n        [0,0,1,5,1,5,0,0,0,0,2,6,2,6,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    d_seq = [0,1,2,3,2,1,0]\\n    startA, startB = 2, 10\\n    patternA = {0:[1,5,1,5],1:[5,1,5,1]}\\n    patternB = {0:[2,6,2,6],1:[6,2,6,2]}\\n    output = []\\n    for r,d in enumerate(d_seq):\\n        row = [0]*cols\\n        pa = patternA[r%2]\\n        pb = patternB[r%2]\\n        for i,v in enumerate(pa): row[startA + d + i] = v\\n        for i,v in enumerate(pb):\\n            idx = startB - d + i\\n            row[idx] = 9 if row[idx] != 0 else v\\n        output.append(row)\\n    return output\\n\\n# result = transform(input)\"\n    },\n    {\n      \"input\": [\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,1,1,0,0,0,0,0,2,0,0,2,0,0],\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,1,1,0,0,0,0,0,2,0,0,2,0,0],\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,1,1,0,0,0,0,0,2,0,0,2,0,0],\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0]\n      ],\n      \"output\": [\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,2,0,0,2,0,0],\n        [0,0,0,0,1,0,0,1,0,2,0,0,2,0,0,0],\n        [0,0,0,0,0,1,0,9,0,0,2,0,0,2,0,0],\n        [0,0,0,0,1,0,0,1,0,2,0,0,2,0,0,0],\n        [0,0,0,1,0,0,1,0,0,0,2,0,0,2,0,0],\n        [0,0,1,0,0,1,0,0,0,0,0,2,2,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    d_seq = [0,1,2,3,2,1,0]\\n    startA, startB = 2, 11\\n    patternA = {0:[1,0,0,1],1:[0,1,1,0]}\\n    patternB = {0:[0,2,2,0],1:[2,0,0,2]}\\n    output = []\\n    for r,d in enumerate(d_seq):\\n        row = [0]*cols\\n        pa = patternA[r%2]\\n        pb = patternB[r%2]\\n        for i,v in enumerate(pa): row[startA + d + i] = v\\n        for i,v in enumerate(pb):\\n            idx = startB - d + i\\n            row[idx] = 9 if row[idx] != 0 else v\\n        output.append(row)\\n    return output\\n\\n# result = transform(input)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "1b22fbaa-78f3-43a1-9ffa-467ee19c2855.json",
    "uuid": "1b22fbaa-78f3-43a1-9ffa-467ee19c2855",
    "created": "2025-04-27 03:11:46",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [4,4,4,0,0,0,0,0,3,0,0,0],\n        [4,4,4,0,0,0,0,0,3,0,0,0],\n        [4,4,4,0,0,0,0,0,3,0,0,0],\n        [4,4,4,0,0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,1,1,1],\n        [0,0,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,4,4,4,0,0,0,0,3,0],\n        [0,0,0,4,4,4,0,0,0,0,3,0],\n        [0,0,0,4,4,4,0,0,0,0,3,0],\n        [0,0,0,4,4,4,0,0,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0,0,1,1,1],\n        [0,0,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def solve(grid):\\n    # grid: list of lists of ints\\n    # goal: move each non-0/1 object so its center aligns with the two mountain peaks\\n    R = len(grid)\\n    C = len(grid[0])\\n    # find apex row (first row containing any 1)\\n    for r in range(R):\\n        if any(v == 1 for v in grid[r]):\\n            apex = r\\n            break\\n    # find peak segments on apex row\\n    segs = []\\n    c = 0\\n    while c < C:\\n        if grid[apex][c] == 1:\\n            start = c\\n            while c < C and grid[apex][c] == 1:\\n                c += 1\\n            segs.append((start, c - 1))\\n        else:\\n            c += 1\\n    peaks = [(s + e) / 2 for s, e in segs]\\n    # find other shape IDs\\n    shape_ids = sorted({v for row in grid for v in row if v not in (0, 1)})\\n    # get bounding boxes and centers for each shape\\n    shapes = []\\n    for sid in shape_ids:\\n        min_r = R; min_c = C; max_r = 0; max_c = 0\\n        for i in range(R):\\n            for j in range(C):\\n                if grid[i][j] == sid:\\n                    min_r = min(min_r, i)\\n                    max_r = max(max_r, i)\\n                    min_c = min(min_c, j)\\n                    max_c = max(max_c, j)\\n        center = (min_c + max_c) / 2\\n        shapes.append((center, sid, min_r, max_r, min_c, max_c))\\n    shapes.sort(key=lambda x: x[0])\\n    # build output grid (start with mountains copied)\\n    out = [[0] * C for _ in range(R)]\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 1:\\n                out[i][j] = 1\\n    # move each shape to its corresponding peak\\n    for (src_center, sid, r0, r1, c0, c1), tgt_center in zip(shapes, peaks):\\n        dx = int(round(tgt_center - src_center))\\n        for i in range(r0, r1 + 1):\\n            for j in range(c0, c1 + 1):\\n                if grid[i][j] == sid:\\n                    out[i][j + dx] = sid\\n    return out\"\n    },\n    {\n      \"input\": [\n        [5,5,5,0,0,0,0,0,0,0,0,6,6,6],\n        [5,5,5,0,0,0,0,0,0,0,0,6,6,6],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0,1,1,1,0,0],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,5,5,5,0,0,0,0,6,6,6,0,0],\n        [0,0,5,5,5,0,0,0,0,6,6,6,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n     "
  },
  {
    "filename": "1c1c1c9d-2746-4c53-ad05-3113d93a0900.json",
    "uuid": "1c1c1c9d-2746-4c53-ad05-3113d93a0900",
    "created": "2025-04-28 04:22:04",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0, 0, 3, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 0],\n        [0, 0, 2, 0, 0],\n        [0, 0, 0, 0, 0]\n      ],\n      \"output\": [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 1, 2, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 3, 0, 0]\n      ],\n      \"code\": \"def transform_p1(grid):\\n    n, m = len(grid), len(grid[0])\\n    r0, c0 = n//2, m//2\\n    out = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            k = grid[i][j]\\n            dr, dc = i-r0, j-c0\\n            if k == 1:\\n                i2, j2 = i, j\\n            elif k == 2:\\n                # 90° CCW\\n                dr2, dc2 = -dc, dr\\n                i2, j2 = r0+dr2, c0+dc2\\n            elif k == 3:\\n                # 180°\\n                dr2, dc2 = -dr, -dc\\n                i2, j2 = r0+dr2, c0+dc2\\n            else:\\n                i2, j2 = i, j\\n            out[i2][j2] = k\\n    return out\\n\\n# Example usage\\n# grid1 = [[...],[...],...]\\n# print(transform_p1(grid1))\"\n    },\n    {\n      \"input\": [\n        [4, 4, 4, 4, 4, 4, 4],\n        [4, 3, 3, 3, 3, 3, 4],\n        [4, 3, 2, 2, 2, 3, 4],\n        [4, 3, 2, 1, 2, 3, 4],\n        [4, 3, 2, 2, 2, 3, 4],\n        [4, 3, 3, 3, 3, 3, 4],\n        [4, 4, 4, 4, 4, 4, 4]\n      ],\n      \"output\": [\n        [4, 4, 4, 4, 4, 4, 4],\n        [4, 3, 3, 3, 3, 3, 4],\n        [4, 3, 2, 2, 2, 3, 4],\n        [4, 3, 2, 1, 2, 3, 4],\n        [4, 3, 2, 2, 2, 3, 4],\n        [4, 3, 3, 3, 3, 3, 4],\n        [4, 4, 4, 4, 4, 4, 4]\n      ],\n      \"code\": \"def transform_p2(grid):\\n    n, m = len(grid), len(grid[0])\\n    r0, c0 = n//2, m//2\\n    out = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            k = grid[i][j]\\n            dr, dc = i-r0, j-c0\\n            if k == 1:\\n                i2, j2 = i, j\\n            elif k == 2:\\n                # 90° CCW\\n                dr2, dc2 = -dc, dr\\n                i2, j2 = r0+dr2, c0+dc2\\n            elif k == 3:\\n                # 180°\\n                dr2, dc2 = -dr, -dc\\n                i2, j2 = r0+dr2, c0+dc2\\n            elif k == 4:\\n                # 90° CW\\n                dr2, dc2 = dc, -dr\\n                i2, j2 = r0+dr2, c0+dc2\\n            else:\\n                i2, j2 = i, j\\n            out[i2][j2] = k\\n    return out\\n\\n# Example usage\\n# grid2 = [[...],[...],...]\\n# print(transform_p2(grid2))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "1c8d6fd6-b897-4b54-9c93-fe06c3f56ce2.json",
    "uuid": "1c8d6fd6-b897-4b54-9c93-fe06c3f56ce2",
    "created": "2025-04-27 01:07:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,3,0,0,0,0,0,0,0,1],\n        [1,0,0,3,3,3,0,0,0,0,0,1],\n        [1,0,0,3,0,0,0,0,0,4,0,1],\n        [1,0,0,0,0,0,0,0,4,4,0,1],\n        [1,0,0,0,0,2,0,0,0,4,0,1],\n        [1,0,0,0,2,2,2,0,0,0,0,1],\n        [1,0,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,0,0,0,0,0,0,1],\n        [1,0,0,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,3,0,0,0,0,4,0,1],\n        [1,0,0,0,0,0,0,0,4,4,0,1],\n        [1,0,0,0,0,0,2,0,0,4,0,1],\n        [1,0,0,0,0,2,2,2,0,0,0,1],\n        [1,0,0,0,0,0,2,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    # initialize output with zeros\\n    out = [[0]*cols for _ in range(rows)]\\n    # copy boundary cells (value==1)\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] == 1:\\n                out[r][c] = 1\\n    # translate shape cells (value>1) by (-1,+1)\\n    for r in range(rows):\\n        for c in range(cols):\\n            v = grid[r][c]\\n            if v > 1:\\n                nr, nc = r-1, c+1\\n                if 0 <= nr < rows and 0 <= nc < cols:\\n                    out[nr][nc] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,4,4,4,1],\n        [1,0,0,3,0,0,0,2,2,4,0,1],\n        [1,0,0,0,3,0,2,2,2,0,0,1],\n        [1,0,0,3,0,0,2,2,0,0,0,1],\n        [1,0,0,0,3,0,0,0,0,0,0,1],\n        [1,0,0,3,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,4,4,4,1],\n        [1,0,0,0,0,0,0,4,0,0,0,1],\n        [1,0,0,3,0,0,2,2,2,4,0,1],\n        [1,0,0,0,3,0,0,2,2,2,0,1],\n        [1,0,0,3,0,0,0,2,2,0,0,1],\n        [1,0,0,0,3,0,0,0,0,0,0,1],\n        [1,0,0,3,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    out = [[0]*cols for _ in range(rows)]\\n    for r in range(rows):\\n        for c in range(cols):\\n            if grid[r][c] == 1:\\n                out[r][c] = 1\\n    for r in range(rows):\\n        for c in range(cols):\\n            v = grid[r][c]\\n            if v > 1:\\n                nr, nc = r-1, c+1\\n                if 0 <= nr < rows and 0 <= nc < cols:\\n                    out[nr][nc] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "251b81d6-bdd6-4884-97b0-47c4bf986cc8.json",
    "uuid": "251b81d6-bdd6-4884-97b0-47c4bf986cc8",
    "created": "2025-04-27 09:59:05",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [3,3,3,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,9,9,9],\n        [3,3,3,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,9,9,9],\n        [3,3,3,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,9,9,9]\n      ],\n      \"code\": \"def transform(grid):\\n    # NewCradle: move active block from cols 0-2 to cols 20-22\\n    out = [row[:] for row in grid]\\n    for r in range(7, 10):\\n        # reset old active block to its original shape (3)\\n        for c in range(0, 3):\\n            out[r][c] = 3\\n        # activate new block\\n        for c in range(20, 23):\\n            out[r][c] = 9\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [9,9,9,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,3,3,3],\n        [9,9,9,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,3,3,3],\n        [9,9,9,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,3,3,3]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,9,9,9],\n        [4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,9,9,9],\n        [4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7,0,0,9,9,9]\n      ],\n      \"code\": \"def transform(grid):\\n    out = [row[:] for row in grid]\\n    for r in range(7, 10):\\n        # old active block -> its original shape 5\\n        for c in range(0, 3): out[r][c] = 5\\n        # new active block\\n        for c in range(20, 23): out[r][c] = 9\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7],\n        [9,9,9,0,0,4,4,4,0,0,5,5,5,0,0,6,6,6,0,0,7,7,7]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\n        [6,6,6,0,0,7,7,7,0,0,3,3,3,0,0,4,4,4,0,0,9,9,9],\n        [6,6,6,0,0,7,7,7,0,0,3,3,3,0,0,4,4,4,0,0,9,9,9],\n        [6,6,6,0,0,7,7,7,0,0,3,3,3,0,0,4,4,4,0,0,9,9,9]\n      ],\n      \"code\": \"def transform(grid):\\n    out = [row[:] for row in grid]\\n    for r in range(7, 10):\\n        # old active block -> its original shape 6\\n        for c in range(0, 3): out[r][c] = 6\\n        # new active block\\n        for c in range(20, 23): out[r][c] = 9\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "2a2e9800-d49f-4b73-8fc4-0813a8a90681.json",
    "uuid": "2a2e9800-d49f-4b73-8fc4-0813a8a90681",
    "created": "2025-04-27 21:05:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,1,1,1,2,1,1,1,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,1,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,0,0,0,1,0,0,0,0,0,0,0,1,0,9],\n        [9,0,0,1,0,0,0,0,0,0,0,1,0,0,9],\n        [9,0,1,0,0,0,0,0,0,0,1,0,0,0,9],\n        [9,0,0,1,0,0,0,0,0,1,0,0,0,0,9],\n        [9,0,0,0,1,0,0,0,1,0,0,0,0,0,9],\n        [9,0,0,0,0,0,0,2,0,0,0,0,0,0,9],\n        [9,0,0,0,1,0,0,0,1,0,0,0,0,0,9],\n        [9,0,0,1,0,0,0,0,0,1,0,0,0,0,9],\n        [9,0,1,0,0,0,0,0,0,0,1,0,0,0,9],\n        [9,0,0,1,0,0,0,0,0,0,0,1,0,0,9],\n        [9,0,0,0,1,0,0,0,0,0,0,0,1,0,9],\n        [9,0,0,0,0,0,0,0,0,0,0,0,0,0,9],\n        [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def rotate_cross(grid, center_val, arm_val):\\n    n = len(grid)\\n    # find center coordinates\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == center_val:\\n                ci, cj = i, j\\n    # prepare output copy\\n    out = [row[:] for row in grid]\\n    # remove original arms\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == arm_val:\\n                out[i][j] = 0\\n    # rotate each arm cell\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == arm_val:\\n                di, dj = i - ci, j - cj\\n                # cardinal to diagonal mapping\\n                if di == 0 and dj > 0:\\n                    ni, nj = ci + dj, cj + dj\\n                elif di == 0 and dj < 0:\\n                    ni, nj = ci - dj, cj + dj\\n                elif dj == 0 and di > 0:\\n                    ni, nj = ci + di, cj - di\\n                elif dj == 0 and di < 0:\\n                    ni, nj = ci + di, cj + di\\n                else:\\n                    continue\\n                out[ni][nj] = arm_val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0],\n        [0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0"
  },
  {
    "filename": "30664cd9-0732-421e-8251-8f08e0091740.json",
    "uuid": "30664cd9-0732-421e-8251-8f08e0091740",
    "created": "2025-04-27 19:14:46",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "33794f18-61ae-44b6-a2f5-d691538e7a13.json",
    "uuid": "33794f18-61ae-44b6-a2f5-d691538e7a13",
    "created": "2025-04-28 03:15:52",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        \"000000000000\",\n        \"050005000000\",\n        \"000000000009\",\n        \"006000000000\",\n        \"000000003300\",\n        \"000000003300\",\n        \"003000000000\",\n        \"000000800000\",\n        \"000000007000\",\n        \"000050000000\",\n        \"000220002220\",\n        \"111111111111\"\n      ],\n      \"output\": [\n        \"000000000000\",\n        \"050005000000\",\n        \"000000000009\",\n        \"006000000000\",\n        \"000000000000\",\n        \"000000000000\",\n        \"000000000000\",\n        \"000000800000\",\n        \"000000044000\",\n        \"000450044000\",\n        \"000220002220\",\n        \"111111111111\"\n      ],\n      \"code\": \"def transform(grid):\\n    import math\\n    # parse to int matrix\\n    mat = [list(map(int, row)) for row in grid]\\n    H, W = len(mat), len(mat[0])\\n    # find rock clusters (value==2)\\n    clusters = []\\n    for i in range(H):\\n        j = 0\\n        while j < W:\\n            if mat[i][j] == 2:\\n                start = j\\n                while j < W and mat[i][j] == 2:\\n                    j += 1\\n                end = j - 1\\n                clusters.append((i, start, end))\\n            else:\\n                j += 1\\n    clusters.sort(key=lambda x: x[1])\\n    # count dust per cluster\\n    counts = [0] * len(clusters)\\n    for i in range(H):\\n        for j in range(W):\\n            if mat[i][j] == 3:\\n                for idx, (ci, cs, ce) in enumerate(clusters):\\n                    if cs <= j <= ce:\\n                        counts[idx] += 1\\n                        break\\n    # remove all dust\\n    for i in range(H):\\n        for j in range(W):\\n            if mat[i][j] == 3:\\n                mat[i][j] = 0\\n    # place clouds\\n    for (ci, cs, ce), c in zip(clusters, counts):\\n        if c > 0:\\n            d = int(math.isqrt(c))\\n            # center column of rock\\n            center = (cs + ce) // 2\\n            start_col = center - d // 2\\n            for dr in range(d):\\n                for dc in range(d):\\n                    r = ci - 1 - dr\\n                    co = start_col + dc\\n                    mat[r][co] = 4\\n    # format back to strings\\n    return [\\\"\\\".join(str(x) for x in row) for row in mat]\\n\\n# Example:\\n# out = transform(input_data)\"\n    },\n    {\n      \"input\": [\n        \"000000000000\",\n        \"000007000000\",\n        \"009000000600\",\n        \"000000000000\",\n        \"000000003300\",\n        \"000000003300\",\n        \"000030000000\",\n        \"000050000000\",\n        \"000000000000\",\n        \"000220002220\",\n        \"000000000000\",\n        \"111111111111\"\n      ],\n      \"output\": [\n        \"000000000000\",\n        \"000007000000\",\n        \"009000000600\",\n        \"000000000000\",\n        \"000000000000\",\n        \"000000000000\",\n        \"000000000000\",\n        \"000050004400\",\n        \"000400000044\",\n        \"000220002220\",\n        \"000000000000\",\n        \"111111111111\"\n      ],\n      \"code\": \"def transform(grid):\\n    import math\\n    mat = [list(map(int, row)) for row in grid]\\n    H, W = len(mat), len(mat[0])\\n    clusters = []\\n    for i in range(H):\\n        j = 0\\n        while j < W:\\n            if mat[i][j] == 2:\\n                start = j\\n                while j < W and mat[i][j] == 2:\\n                    j += 1\\n                end = j - 1\\n                clusters.append((i, start, end))\\n            else:\\n                j += 1\\n    clusters.sort(key=lambda x: x[1])\\n    counts = [0] * len(clusters)\\n    for i in range(H):\\n        for j in range(W):\\n            if mat[i][j] == 3:\\n                for idx, (ci, cs, ce) in enumerate(clusters):\\n                    if cs <= j <= ce:\\n                        counts[idx] += 1\\n                        break\\n    for i in range(H):\\n        for j in range(W):\\n            if mat[i][j] == 3:\\n                mat[i][j] = 0\\n    for (ci, cs, ce), c in zip(clusters, counts):\\n        if c > 0:\\n            d = int(math.isqrt(c))\\n            center = (cs + ce) // 2\\n            start_col = center - d // 2\\n            for dr in range(d):\\n                for dc in range(d):\\n                    r = ci - 1 - dr\\n                    co = start_col + dc\\n                    mat[r][co] = 4\\n    return [\\\"\\\".join(str(x) for x in row) for row in mat]\\n\\n# Example:\\n# out = transform(input_data)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "3883983d-8357-4796-a314-2bd40f89c077.json",
    "uuid": "3883983d-8357-4796-a314-2bd40f89c077",
    "created": "2025-04-27 01:08:12",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "2581e174-4d39-4d9f-a606-426d38afb55c.json",
    "uuid": "2581e174-4d39-4d9f-a606-426d38afb55c",
    "created": "2025-04-28 01:58:22",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,3,3,0,0,0,2],\n        [2,0,0,3,3,0,0,0,2],\n        [2,0,0,0,0,1,0,0,2],\n        [2,0,0,0,1,1,1,0,2],\n        [2,0,0,0,0,1,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,3,3,0,2],\n        [2,0,0,1,0,3,3,0,2],\n        [2,0,1,1,1,0,0,0,2],\n        [2,0,0,0,1,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def rotate90(grid):\\n    n = len(grid)\\n    center = n // 2\\n    out = [[0] * n for _ in range(n)]\\n    # copy border\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                out[i][j] = 2\\n    # rotate inner objects\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v not in (0, 2):\\n                dr = i - center\\n                dc = j - center\\n                ni = center + dc\\n                nj = center - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# usage:\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,4,0,0,0,0,0,2],\n        [2,0,0,4,0,5,0,0,2],\n        [2,0,0,0,4,5,5,5,2],\n        [2,0,0,0,0,4,5,0,0,2],\n        [2,0,0,0,0,0,4,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,4,0,2],\n        [2,0,0,0,0,4,0,0,2],\n        [2,0,0,0,4,0,0,0,2],\n        [2,0,0,0,4,5,0,0,2],\n        [2,0,4,5,5,5,0,0,2],\n        [2,0,0,0,5,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def rotate90(grid):\\n    n = len(grid)\\n    center = n // 2\\n    out = [[0] * n for _ in range(n)]\\n    # copy border\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                out[i][j] = 2\\n    # rotate inner objects\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v not in (0, 2):\\n                dr = i - center\\n                dc = j - center\\n                ni = center + dc\\n                nj = center - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,8,8,0,0,0,2],\n        [2,0,0,8,8,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,6,0,0,0,2],\n        [2,0,0,6,6,6,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,8,8,0,2],\n        [2,0,6,0,0,8,8,0,2],\n        [2,0,6,6,0,0,0,0,2],\n        [2,0,0,6,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def rotate90(grid):\\n    n = len(grid)\\n    center = n // 2\\n    out = [[0] * n for _ in range(n)]\\n    # copy border\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                out[i][j] = 2\\n    # rotate inner objects\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v not in (0, 2):\\n                dr = i - center\\n                dc = j - center\\n                ni = center + dc\\n                nj = center - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# result = rotate90(input_grid)\"\n    },\n    {\n      \"input\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,9,0,0,0,2],\n        [2,0,0,9,9,9,0,0,2],\n        [2,0,0,7,7,7,0,0,2],\n        [2,0,0,7,0,7,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"output\": [\n        [2,2,2,2,2,2,2,2,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,0,0,7,7,9,0,0,2],\n        [2,0,0,7,7,9,9,0,2],\n        [2,0,0,7,7,9,0,0,2],\n        [2,0,0,0,9,0,0,0,2],\n        [2,0,0,0,0,0,0,0,2],\n        [2,2,2,2,2,2,2,2,2]\n      ],\n      \"code\": \"def rotate90(grid):\\n    n = len(grid)\\n    center = n // 2\\n    out = [[0] * n for _ in range(n)]\\n    # copy border\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                out[i][j] = 2\\n    # rotate inner objects\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v not in (0, 2):\\n                dr = i - center\\n                dc = j - center\\n                ni = center + dc\\n                nj = center - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# result = rotate90(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "37d5647c-2917-4b42-a6d6-22402b36b54d.json",
    "uuid": "37d5647c-2917-4b42-a6d6-22402b36b54d",
    "created": "2025-04-27 19:27:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,9,9,9,9,9,9,0,0,0,0],\n        [0,9,0,0,0,0,0,0,9,0,0,0],\n        [0,9,0,0,0,0,0,0,9,0,0,0],\n        [0,0,9,9,9,9,9,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,9,9,9,9,9,9,0,0,0,0],\n        [0,9,2,2,2,2,2,2,9,0,0,0],\n        [0,9,0,0,0,0,0,0,9,0,0,0],\n        [0,0,9,9,9,2,9,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    OBJ=1; CONT=9; FILL=2\\n    # count and remove input object\\n    P=sum(cell==OBJ for row in grid for cell in row)\\n    grid=[[0 if cell==OBJ else cell for cell in row] for row in grid]\\n    # locate container bounds\\n    rows,lenrow=len(grid),len(grid[0])\\n    top=next(i for i,row in enumerate(grid) if row.count(CONT)>2)\\n    bot=next(i for i in range(rows-1,-1,-1) if grid[i].count(CONT)>2)\\n    left=grid[top].index(CONT)\\n    right=lenrow-1-grid[top][::-1].index(CONT)\\n    # fill P rows inside\\n    for dr in range(P):\\n        r=top+1+dr\\n        for c in range(left+1,right): grid[r][c]=FILL\\n    # drop overflow\\n    drop_col=left+1+(right-left-1)//2\\n    grid[bot][drop_col]=FILL\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,5,5,5,5,5,0,0,0,0],\n        [0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,5,5,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,5,5,5,5,0,0,0,0],\n        [0,0,0,5,7,7,7,5,0,0,0,0],\n        [0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,0,0,0,5,0,0,0,0],\n        [0,0,0,5,5,7,5,5,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    OBJ=4; CONT=5; FILL=7\\n    P=sum(cell==OBJ for row in grid for cell in row)\\n    grid=[[0 if cell==OBJ else cell for cell in row] for row in grid]\\n    rows,lenrow=len(grid),len(grid[0])\\n    top=next(i for i,row in enumerate(grid) if row.count(CONT)>2)\\n    bot=next(i for i in range(rows-1,-1,-1) if grid[i].count(CONT)>2)\\n    left=grid[top].index(CONT)\\n    right=lenrow-1-grid[top][::-1].index(CONT)\\n    for dr in range(P):\\n        r=top+1+dr\\n        for c in range(left+1,right): grid[r][c]=FILL\\n    drop_col=left+1+(right-left-1)//2\\n    grid[bot][drop_col]=FILL\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0,0],\n        [0,0,8,8,8,8,8,8,0,0],\n        [0,0,8,0,0,0,0,8,0,0],\n        [0,0,8,0,0,0,0,8,0,0],\n        [0,0,8,8,8,8,8,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,8,8,8,8,8,8,0,0],\n        [0,0,8,1,1,1,1,8,0,0],\n        [0,0,8,0,0,0,0,8,0,0],\n        [0,0,8,8,8,1,8,8,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    OBJ=6; CONT=8; FILL=1\\n    P=sum(cell==OBJ for row in grid for cell in row)\\n    grid=[[0 if cell==OBJ else cell for cell in row] for row in grid]\\n    rows,lenrow=len(grid),len(grid[0])\\n    top=next(i for i,row in enumerate(grid) if row.count(CONT)>2)\\n    bot=next(i for i in range(rows-1,-1,-1) if grid[i].count(CONT)>2)\\n    left=grid[top].index(CONT)\\n    right=lenrow-1-grid[top][::-1].index(CONT)\\n    for dr in range(P):\\n        r=top+1+dr\\n        for c in range(left+1,right): grid[r][c]=FILL\\n    drop_col=left+1+(right-left-1)//2\\n    grid[bot][drop_col]=FILL\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,3,0,0,0,0,0,3,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0],\n        [0,0,3,4,4,4,3,0,0],\n        [0,3,0,0,0,0,0,3,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,0,0,3,4,3,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    OBJ=2; CONT=3; FILL=4\\n    P=sum(cell==OBJ for row in grid for cell in row)\\n    grid=[[0 if cell==OBJ else cell for cell in row] for row in grid]\\n    rows,lenrow=len(grid),len(grid[0])\\n    top=next(i for i,row in enumerate(grid) if row.count(CONT)>2)\\n    bot=next(i for i in range(rows-1,-1,-1) if grid[i].count(CONT)>2)\\n    left=grid[top].index(CONT)\\n    right=lenrow-1-grid[top][::-1].index(CONT)\\n    for dr in range(P):\\n        r=top+1+dr\\n        for c in range(left+1,right): grid[r][c]=FILL\\n    drop_col=left+1+(right-left-1)//2\\n    grid[bot][drop_col]=FILL\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,8,0,0,0,0,0,0],\n        [0,0,0,0,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,6,0,0,0,6,0,0,0,0],\n        [0,0,0,0,6,0,0,0,6,0,0,0,0],\n        [0,0,0,0,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,6,9,9,9,6,0,0,0,0],\n        [0,0,0,0,6,0,0,0,6,0,0,0,0],\n        [0,0,0,0,6,6,9,6,6,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    OBJ=8; CONT=6; FILL=9\\n    P=sum(cell==OBJ for row in grid for cell in row)\\n    grid=[[0 if cell==OBJ else cell for cell in row] for row in grid]\\n    rows,lenrow=len(grid),len(grid[0])\\n    top=next(i for i,row in enumerate(grid) if row.count(CONT)>2)\\n    bot=next(i for i in range(rows-1,-1,-1) if grid[i].count(CONT)>2)\\n    left=grid[top].index(CONT)\\n    right=lenrow-1-grid[top][::-1].index(CONT)\\n    for dr in range(P):\\n        r=top+1+dr\\n        for c in range(left+1,right): grid[r][c]=FILL\\n    drop_col=left+1+(right-left-1)//2\\n    grid[bot][drop_col]=FILL\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "374dd953-c183-4353-821b-0ec71aa51ced.json",
    "uuid": "374dd953-c183-4353-821b-0ec71aa51ced",
    "created": "2025-04-28 04:44:08",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0],\n        [0,0,2,3,2,2,2,3,2,0,0],\n        [0,0,3,0,0,0,0,0,3,0,0],\n        [0,3,2,0,0,1,0,0,2,3,0],\n        [3,0,2,0,1,0,1,0,0,0,3],\n        [0,3,2,0,0,0,0,0,2,3,0],\n        [0,0,3,0,0,0,0,0,3,0,0],\n        [0,0,2,3,2,2,2,3,2,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0],\n        [0,0,2,3,2,0,2,3,2,0,0],\n        [0,0,3,0,0,0,0,0,3,0,0],\n        [0,3,2,0,0,1,0,0,2,3,0],\n        [3,0,2,0,0,0,1,0,0,0,3],\n        [0,3,2,0,0,1,0,0,2,3,0],\n        [0,0,3,0,0,0,0,0,3,0,0],\n        [0,0,2,3,2,2,2,3,2,0,0],\n        [0,0,0,0,3,0,3,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def rotate_holes(grid, rotations):\\n    n = len(grid)\\n    cx, cy = n//2, n//2\\n    out = [row[:] for row in grid]\\n    # compute ring radii by Chebyshev distance\\n    ring_dist = {}\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v>0:\\n                ring_dist.setdefault(v, []).append(max(abs(i-cx), abs(j-cy)))\\n    for v in ring_dist:\\n        ring_dist[v] = round(sum(ring_dist[v]) / len(ring_dist[v]))\\n    # rotate each hole\\n    for v, angle in rotations.items():\\n        r = ring_dist[v]\\n        holes = [(i,j) for i in range(n) for j in range(n)\\n                 if grid[i][j]==0 and max(abs(i-cx), abs(j-cy))==r]\\n        for i,j in holes:\\n            di, dj = i-cx, j-cy\\n            if angle==90:\\n                ni, nj = dj, -di\\n            elif angle==180:\\n                ni, nj = -di, -dj\\n            elif angle==270:\\n                ni, nj = -dj, di\\n            else:\\n                ni, nj = di, dj\\n            ni += cx; nj += cy\\n            out[i][j] = v\\n            out[ni][nj] = 0\\n    return out\\n\\n# Puzzle A\\ninput_grid = \"above input array\"\\nrotations = {3:180, 2:90, 1:270}\\nprint(rotate_holes(input_grid, rotations))\"\n    },\n    {\n      \"input\": [\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [3,0,0,2,0,0,0,2,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,1,0,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,2,0,0,0,2,0,0,3],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,0,3,3,3,0,3,3,3,0,0]\n      ],\n      \"output\": [\n        [0,0,3,3,3,0,3,3,3,0,0],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [3,0,0,2,0,0,0,2,0,0,3],\n        [3,0,0,0,1,0,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,2,0,0,0,2,0,0,3],\n        [3,0,2,0,0,0,0,0,2,0,3],\n        [0,3,0,0,0,0,0,0,0,3,0],\n        [0,0,3,3,3,3,3,3,3,0,0]\n      ],\n      \"code\": \"def rotate_holes(grid, rotations):\\n    n = len(grid)\\n    cx, cy = n//2, n//2\\n    out = [row[:] for row in grid]\\n    ring_dist = {}\\n    for i in range(n):\\n        for j in range(n):\\n            v = grid[i][j]\\n            if v>0:\\n                ring_dist.setdefault(v, []).append(max(abs(i-cx), abs(j-cy)))\\n    for v in ring_dist:\\n        ring_dist[v] = round(sum(ring_dist[v]) / len(ring_dist[v]))\\n    for v, angle in rotations.items():\\n        r = ring_dist[v]\\n        holes = [(i,j) for i in range(n) for j in range(n)\\n                 if grid[i][j]==0 and max(abs(i-cx), abs(j-cy))==r]\\n        for i,j in holes:\\n            di, dj = i-cx, j-cy\\n            if angle==90:\\n                ni, nj = dj, -di\\n            elif angle==180:\\n                ni, nj = -di, -dj\\n            elif angle==270:\\n                ni, nj = -dj, di\\n            else:\\n                ni, nj = di, dj\\n            ni += cx; nj += cy\\n            out[i][j] = v\\n            out[ni][nj] = 0\\n    return out\\n\\n# Puzzle B\\ninput_grid = \\\"above input array\\\"\\nrotations = {3:90, 2:180, 1:270}\\nprint(rotate_holes(input_grid, rotations))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "3abd1291-0f05-4fdc-ba86-dda3e3d63e4e.json",
    "uuid": "3abd1291-0f05-4fdc-ba86-dda3e3d63e4e",
    "created": "2025-04-27 14:35:06",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,4,2,2,2,0,0],\n        [0,0,2,5,6,7,9,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,8,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,9,7,6,5,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # copy and open door\\n    out = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 4:\\n                out[r][c] = 8\\n    # collect objects in row 4\\n    objs = [(c, grid[4][c]) for c in range(W) if grid[4][c] in (5,6,7,9)]\\n    # clear inside and restore walls\\n    for c, v in objs:\\n        out[4][c] = 2\\n    # compute new positions col+2, row+3, then reverse order\\n    cols = [c for c, _ in sorted(objs)]\\n    vals = [v for _, v in sorted(objs)]\\n    new_row = 4 + 3\\n    new_cols = [c + 2 for c in cols]\\n    for i, val in enumerate(reversed(vals)):\\n        out[new_row][ new_cols[i] ] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,4,2,2,2,0,0],\n        [0,0,2,5,6,7,9,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,8,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,9,7,6,5,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 4:\\n                out[r][c] = 8\\n    objs = [(c, grid[4][c]) for c in range(W) if grid[4][c] in (5,6,7,9)]\\n    for c, v in objs:\\n        out[4][c] = 2\\n    cols = [c for c, _ in sorted(objs)]\\n    vals = [v for _, v in sorted(objs)]\\n    nr = 7\\n    new_cols = [c + 2 for c in cols]\\n    for i, val in enumerate(reversed(vals)):\\n        out[nr][ new_cols[i] ] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,4,2,2,2,0,0],\n        [0,0,2,5,6,7,9,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,8,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,9,7,6,5,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 4:\\n                out[r][c] = 8\\n    objs = [(c, grid[4][c]) for c in range(W) if grid[4][c] in (5,6,7,9)]\\n    for c, v in objs:\\n        out[4][c] = 2\\n    cols = [c for c, _ in sorted(objs)]\\n    vals = [v for _, v in sorted(objs)]\\n    new_row = 7\\n    new_cols = [c + 2 for c in cols]\\n    for i, val in enumerate(reversed(vals)):\\n        out[new_row][ new_cols[i] ] = val\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,4,2,2,2,0,0],\n        [0,0,2,5,6,7,9,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,1,1,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,3,3,3,3,0,0,0],\n        [0,0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,3,3,3,3,3,3,3,3,0],\n        [0,0,2,2,2,2,8,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,2,2,2,2,2,2,2,2,0,0],\n        [0,0,1,1,1,9,7,6,5,1,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 4:\\n                out[r][c] = 8\\n    objs = [(c, grid[4][c]) for c in range(W) if grid[4][c] in (5,6,7,9)]\\n    for c, v in objs:\\n        out[4][c] = 2\\n    cols = [c for c, _ in sorted(objs)]\\n    vals = [v for _, v in sorted(objs)]\\n    new_r = 7\\n    new_cols = [c + 2 for c in cols]\\n    for i, v in enumerate(reversed(vals)):\\n        out[new_r][ new_cols[i] ] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "38a2f56f-a798-4033-8ae2-457dabd97c12.json",
    "uuid": "38a2f56f-a798-4033-8ae2-457dabd97c12",
    "created": "2025-04-27 06:34:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,4,4,0,2,0,0,0,0],\n        [0,4,4,0,2,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [2,2,2,2,1,2,2,2,2],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,2,0,5,5,5],\n        [0,0,0,0,2,0,5,0,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,0],\n        [0,4,4,3,2,3,0,0,0],\n        [0,4,3,0,2,0,3,0,0],\n        [0,3,0,0,2,0,0,3,0],\n        [3,2,2,2,1,2,2,2,3],\n        [0,3,0,0,2,0,0,3,0],\n        [0,0,3,0,2,0,3,5,5],\n        [0,0,0,3,2,3,5,0,0],\n        [0,0,0,0,3,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    r0 = c0 = 0\\n    # find hub\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                r0, c0 = i, j\\n    res = [row[:] for row in grid]\\n    # draw Manhattan ring of radius 4\\n    for i in range(h):\\n        for j in range(w):\\n            if abs(i - r0) + abs(j - c0) == 4:\\n                res[i][j] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [6,0,0,0,2,0,0,0,0],\n        [0,6,0,0,2,0,0,0,0],\n        [0,0,6,0,2,0,0,0,0],\n        [0,0,0,6,2,0,0,0,0],\n        [2,2,2,2,1,2,2,2,2],\n        [0,0,0,6,2,0,0,0,0],\n        [0,0,6,0,2,0,0,0,0],\n        [0,6,0,0,2,0,0,0,0],\n        [6,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [6,0,0,0,3,0,0,0,0],\n        [0,6,0,3,2,3,0,0,0],\n        [0,0,3,0,2,0,3,0,0],\n        [0,3,0,6,2,0,0,3,0],\n        [3,2,2,2,1,2,2,2,3],\n        [0,3,0,6,2,0,0,3,0],\n        [0,0,3,0,2,0,3,0,0],\n        [0,6,0,3,2,3,0,0,0],\n        [6,0,0,0,3,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    r0 = c0 = 0\\n    # find hub\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                r0, c0 = i, j\\n    res = [row[:] for row in grid]\\n    # draw Manhattan ring of radius 4\\n    for i in range(h):\\n        for j in range(w):\\n            if abs(i - r0) + abs(j - c0) == 4:\\n                res[i][j] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,4,4,4,4,4,0,0],\n        [0,0,0,0,2,0,5,0,0],\n        [0,0,0,0,2,0,5,0,0],\n        [2,2,2,2,1,2,5,2,2],\n        [0,0,0,0,2,0,5,0,0],\n        [0,0,0,0,2,0,5,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,4,3,4,3,4,0,0],\n        [0,0,3,0,2,0,3,0,0],\n        [0,3,0,0,2,0,5,3,0],\n        [3,2,2,2,1,2,5,2,3],\n        [0,3,0,0,2,0,5,3,0],\n        [0,0,3,0,2,0,3,0,0],\n        [0,0,0,3,2,3,0,0,0],\n        [0,0,0,0,3,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    r0 = c0 = 0\\n    # find hub\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                r0, c0 = i, j\\n    res = [row[:] for row in grid]\\n    # draw Manhattan ring of radius 4\\n    for i in range(h):\\n        for j in range(w):\\n            if abs(i - r0) + abs(j - c0) == 4:\\n                res[i][j] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,6],\n        [0,0,0,0,2,0,0,6,0],\n        [0,0,0,0,2,0,0,0,6],\n        [0,0,0,0,2,0,0,6,0],\n        [2,2,2,2,1,2,2,2,6],\n        [0,0,0,0,2,0,0,6,0],\n        [0,0,0,0,2,0,0,0,6],\n        [0,0,0,0,2,0,0,6,0],\n        [0,0,0,0,2,0,0,0,6]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,6],\n        [0,0,0,3,2,3,0,6,0],\n        [0,0,3,0,2,0,3,0,6],\n        [0,3,0,6,2,0,0,3,0],\n        [3,2,2,2,1,2,2,2,3],\n        [0,3,0,0,2,0,0,3,0],\n        [0,0,3,0,2,0,3,0,6],\n        [0,0,0,3,2,3,0,6,0],\n        [0,0,0,0,3,0,0,0,6]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    r0 = c0 = 0\\n    # find hub\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                r0, c0 = i, j\\n    res = [row[:] for row in grid]\\n    # draw Manhattan ring of radius 4\\n    for i in range(h):\\n        for j in range(w):\\n            if abs(i - r0) + abs(j - c0) == 4:\\n                res[i][j] = 3\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0],\n        [0,0,7,0,0,0,7,0,0],\n        [0,7,0,0,0,0,0,7,0],\n        [2,2,2,2,1,2,2,2,2],\n        [0,7,0,0,0,0,0,7,0],\n        [0,0,7,0,0,0,7,0,0],\n        [0,0,0,7,7,7,0,0,0],\n        [0,0,0,0,2,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,3,7,3,0,0,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,3,0,0,0,0,0,3,0],\n        [3,2,2,2,1,2,2,2,3],\n        [0,3,0,0,0,0,0,3,0],\n        [0,0,3,0,0,0,3,0,0],\n        [0,0,0,3,7,3,0,0,0],\n        [0,0,0,0,3,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    r0 = c0 = 0\\n    # find hub\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                r0, c0 = i, j\\n    res = [row[:] for row in grid]\\n    # draw Manhattan ring of radius 4\\n    for i in range(h):\\n        for j in range(w):\\n            if abs(i - r0) + abs(j - c0) == 4:\\n                res[i][j] = 3\\n    return res\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "446cbab8-d53e-4ce4-a76f-b987f9eab2c9.json",
    "uuid": "446cbab8-d53e-4ce4-a76f-b987f9eab2c9",
    "created": "2025-04-27 12:45:44",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,2,0,2,0,2,0,0,0,1],\n        [1,0,0,2,0,2,0,2,0,0,1],\n        [1,0,0,0,2,0,2,0,2,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,3,0,3,0,3,0,0,0,1],\n        [1,0,0,3,0,3,0,3,0,0,1],\n        [1,0,0,0,3,0,3,0,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,2,2,2,2,2,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,3,0,3,0,3,0,0,1],\n        [1,0,3,0,0,0,0,0,3,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    # initialize border and empty interior\\n    out = [[1]*n] + [[1]+[0]*(n-2)+[1] for _ in range(n-2)] + [[1]*n]\\n    # count tokens\\n    c2 = sum(row.count(2) for row in grid)\\n    c3 = sum(row.count(3) for row in grid)\\n    # shape for token 2: plus sign arm length 2 centered at (4,4)\\n    if c2 == 9:\\n        cx, cy = 4, 4\\n        for d in range(-2, 3):\\n            out[cy][cx+d] = 2\\n            out[cy+d][cx] = 2\\n    # shape for token 3: diagonal X arm length 2 centered at (8,4)\\n    if c3 == 9:\\n        cx, cy = 8, 4\\n        for d in range(-2, 3):\\n            out[cy+d][cx+d] = 3\\n            out[cy+d][cx-d] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,0,2,0,2,0,0,0,0,1],\n        [1,0,2,0,2,0,2,0,0,0,1],\n        [1,2,0,2,0,2,0,2,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,3,3,3,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,2,2,2,0,0,0,0,0,1],\n        [1,0,2,2,2,0,0,0,0,0,1],\n        [1,0,2,2,2,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,3,3,3,3,3,0,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    # initialize border and empty interior\\n    out = [[1]*n] + [[1]+[0]*(n-2)+[1] for _ in range(n-2)] + [[1]*n]\\n    # count tokens\\n    c2 = sum(row.count(2) for row in grid)\\n    c3 = sum(row.count(3) for row in grid)\\n    # shape for token 2: 3×3 filled square at rows 2–4, cols 2–4\\n    if c2 == 9:\\n        for i in range(2, 5):\\n            for j in range(2, 5):\\n                out[i][j] = 2\\n    # shape for token 3: small diamond centered at (5,5)\\n    if c3 == 9:\\n        mid = 5\\n        out[mid-2][mid] = 3\\n        out[mid-1][mid-1] = 3; out[mid-1][mid] = 3; out[mid-1][mid+1] = 3\\n        out[mid][mid-2] = 3; out[mid][mid-1] = 3; out[mid][mid] = 3; out[mid][mid+1] = 3; out[mid][mid+2] = 3\\n        out[mid+1][mid-1] = 3; out[mid+1][mid] = 3; out[mid+1][mid+1] = 3\\n        out[mid+2][mid] = 3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "45ac93f8-2383-4337-946f-8d6b67e17c1a.json",
    "uuid": "45ac93f8-2383-4337-946f-8d6b67e17c1a",
    "created": "2025-04-27 15:55:26",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,1,1,0,0,0,0],\n                [0,0,0,1,1,0,0,0,0],\n                [0,0,0,0,5,0,0,0,0],\n                [4,4,0,0,0,0,0,2,2],\n                [4,4,6,0,9,0,8,2,2],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,7,0,0,0,0],\n                [0,0,0,3,3,0,0,0,0],\n                [0,0,0,3,3,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,4,4,0,0,0,0],\n                [0,0,0,4,4,0,0,0,0],\n                [0,0,0,0,8,0,0,0,0],\n                [3,3,0,0,0,0,0,1,1],\n                [3,3,5,0,9,0,7,1,1],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,6,0,0,0,0],\n                [0,0,0,2,2,0,0,0,0],\n                [0,0,0,2,2,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cR, cC = h//2, w//2\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v == 0:\\n                continue\\n            dr, dc = r - cR, c - cC\\n            if 1 <= v <= 4:\\n                # outer ring: rotate 90° clockwise around center\\n                nr = cR - dc\\n                nc = cC + dr\\n            elif 5 <= v <= 8:\\n                # rotor blade: rotate 90° counter‑clockwise around center\\n                nr = cR + dc\\n                nc = cC - dr\\n            else:\\n                # hub remains in place\\n                nr, nc = r, c\\n            out[nr][nc] = v\\n    return out\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,1,1,1,0,0,0,0],\n                [0,0,0,0,1,1,1,0,0,0,0],\n                [0,0,0,0,1,1,1,0,0,0,0],\n                [0,0,0,0,0,5,0,0,0,0,0],\n                [4,4,4,0,0,0,0,0,2,2,2],\n                [0,0,0,6,0,9,0,7,0,0,0],\n                [4,4,4,0,0,0,0,0,2,2,2],\n                [0,0,0,0,0,8,0,0,0,0,0],\n                [0,0,0,0,3,3,3,0,0,0,0],\n                [0,0,0,0,3,3,3,0,0,0,0],\n                [0,0,0,0,3,3,3,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,4,4,4,0,0,0,0],\n                [0,0,0,0,4,4,4,0,0,0,0],\n                [0,0,0,0,4,4,4,0,0,0,0],\n                [0,0,0,0,0,6,0,0,0,0,0],\n                [3,3,3,0,0,0,0,0,1,1,1],\n                [3,3,3,8,0,9,0,5,1,1,1],\n                [3,3,3,0,0,0,0,0,1,1,1],\n                [0,0,0,0,0,7,0,0,0,0,0],\n                [0,0,0,0,2,2,2,0,0,0,0],\n                [0,0,0,0,2,2,2,0,0,0,0],\n                [0,0,0,0,2,2,2,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cR, cC = h//2, w//2\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v == 0:\\n                continue\\n            dr, dc = r - cR, c - cC\\n            if 1 <= v <= 4:\\n                # outer ring: rotate 90° clockwise around center\\n                nr = cR - dc\\n                nc = cC + dr\\n            elif 5 <= v <= 8:\\n                # rotor blade: rotate 90° counter‑clockwise around center\\n                nr = cR + dc\\n                nc = cC - dr\\n            else:\\n                # hub remains in place\\n                nr, nc = r, c\\n            out[nr][nc] = v\\n    return out\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "46dab5cb-0d10-4657-871e-3e78b78d1b55.json",
    "uuid": "46dab5cb-0d10-4657-871e-3e78b78d1b55",
    "created": "2025-04-28 00:21:49",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "4bae6638-7902-46a6-abd9-ec7e64e1f2b9.json",
    "uuid": "4bae6638-7902-46a6-abd9-ec7e64e1f2b9",
    "created": "2025-04-27 06:49:33",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [5,1,1,1,0,0,0,0],\n        [5,0,0,1,0,0,0,0],\n        [5,0,1,0,0,0,0,0],\n        [5,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,5,5],\n        [0,0,0,0,0,0,1,1],\n        [0,0,0,0,0,0,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,9,9,9,9],\n        [0,0,0,0,1,1,1,1],\n        [0,0,0,0,0,1,1,1],\n        [0,0,0,0,0,0,1,1],\n        [0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,0,0],\n        [0,1,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = (w-1)/2.0, (h-1)/2.0\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            v = grid[y][x]\\n            if v != 0:\\n                dx, dy = x - cx, y - cy\\n                ndx, ndy = -dy, dx       # 90° CCW rotation\\n                nx = int(round(ndx + cx))\\n                ny = int(round(ndy + cy))\\n                out[ny][nx] = 9 if v == 5 else 1\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,1,1,1,1],\n        [0,0,0,0,1,1,0,0],\n        [0,0,0,0,1,1,0,0],\n        [0,0,0,0,0,0,0,0],\n        [5,5,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,1,1,9,0,0,0,0],\n        [0,1,1,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,0,0,0],\n        [0,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cx, cy = (w-1)/2.0, (h-1)/2.0\\n    out = [[0]*w for _ in range(h)]\\n    for y in range(h):\\n        for x in range(w):\\n            v = grid[y][x]\\n            if v != 0:\\n                dx, dy = x - cx, y - cy\\n                ndx, ndy = -dy, dx       # 90° CCW rotation\\n                nx = int(round(ndx + cx))\\n                ny = int(round(ndy + cy))\\n                out[ny][nx] = 9 if v == 5 else 1\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4cc0ae23-2826-4bfc-b436-c4726694b5fa.json",
    "uuid": "4cc0ae23-2826-4bfc-b436-c4726694b5fa",
    "created": "2025-04-27 10:04:35",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "51ec0079-86ab-40e9-a72c-d16f68723159.json",
    "uuid": "51ec0079-86ab-40e9-a72c-d16f68723159",
    "created": "2025-04-28 07:16:39",
    "description": ""
  },
  {
    "filename": "59ab748c-a832-41ba-a79f-c0c9265e2973.json",
    "uuid": "59ab748c-a832-41ba-a79f-c0c9265e2973",
    "created": "2025-04-27 10:36:41",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,5,0,3,0,5,0],\n        [0,2,0,0,7,0,4,0,0],\n        [0,2,0,0,3,0,0,0,0],\n        [0,2,7,0,0,0,4,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,5,3,5,0,2,0],\n        [0,2,0,4,0,7,0,2,0],\n        [0,2,0,7,3,4,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    # 1) Extract objects (non-zero and not border=2) in row-major order\\n    objs = [grid[i][j] for i in range(H) for j in range(W) if grid[i][j] != 0 and grid[i][j] != 2]\\n    P = len(objs)\\n    # 2) Determine ring size n from P = 4n-4\\n    n = (P + 4) // 4\\n    # 3) Compute center and ring bounds\\n    cy, cx = H//2, W//2\\n    h = n//2\\n    r0, c0 = cy - h, cx - h\\n    rn, cn = cy + h, cx + h\\n    # 4) Generate clockwise ring coordinates\\n    positions = []\\n    for j in range(c0, cn+1): positions.append((r0, j))\\n    for i in range(r0+1, rn): positions.append((i, cn))\\n    for j in range(cn, c0-1, -1): positions.append((rn, j))\\n    for i in range(rn-1, r0, -1): positions.append((i, c0))\\n    # 5) Build output grid, clear old objects\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if out[i][j] not in (0,2):\\n                out[i][j] = 0\\n    # 6) Place objects onto ring\\n    for idx, (i,j) in enumerate(positions):\\n        out[i][j] = objs[idx]\\n    return out\\n\\n# Example use:\\n# result = transform(your_input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,9,0,6,0,9,0],\n        [0,2,1,0,8,0,0,0,0],\n        [0,2,0,0,9,0,8,0,0],\n        [0,2,0,8,0,1,0,0,0],\n        [0,2,0,0,0,0,6,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,9,6,1,0,2,0],\n        [0,2,0,8,0,8,0,2,0],\n        [0,2,0,1,9,6,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    objs = [grid[i][j] for i in range(H) for j in range(W) if grid[i][j] != 0 and grid[i][j] != 2]\\n    n = (len(objs) + 4) // 4\\n    cy, cx = H//2, W//2\\n    h = n//2\\n    r0, c0 = cy-h, cx-h; rn, cn = cy+h, cx+h\\n    positions = []\\n    for j in range(c0, cn+1): positions.append((r0, j))\\n    for i in range(r0+1, rn): positions.append((i, cn))\\n    for j in range(cn, c0-1, -1): positions.append((rn, j))\\n    for i in range(rn-1, r0, -1): positions.append((i, c0))\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if out[i][j] not in (0,2): out[i][j] = 0\\n    for idx, (i,j) in enumerate(positions):\\n        out[i][j] = objs[idx]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,9,0,3,0,2,0],\n        [0,2,4,0,0,0,7,0,0],\n        [0,2,0,7,0,4,0,0,0],\n        [0,2,7,0,0,0,3,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,9,3,4,0,2,0],\n        [0,2,0,0,0,7,0,2,0],\n        [0,2,0,7,4,7,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    objs = [grid[i][j] for i in range(H) for j in range(W) if grid[i][j] not in (0,2)]\\n    n = (len(objs) + 4) // 4\\n    cy, cx = H//2, W//2; h = n//2\\n    r0, c0, rn, cn = cy-h, cx-h, cy+h, cx+h\\n    positions = []\\n    for j in range(c0, cn+1): positions.append((r0,j))\\n    for i in range(r0+1, rn): positions.append((i,cn))\\n    for j in range(cn, c0-1, -1): positions.append((rn,j))\\n    for i in range(rn-1, r0, -1): positions.append((i,c0))\\n    out = [row[:] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            if out[i][j] not in (0,2): out[i][j] = 0\\n    for idx,(i,j) in enumerate(positions): out[i][j] = objs[idx]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,6,0,4,0,2,0],\n        [0,2,7,0,5,0,0,0,0],\n        [0,2,0,5,0,6,0,0,0],\n        [0,2,7,0,5,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,6,4,7,0,2,0],\n        [0,2,0,5,0,5,0,2,0],\n        [0,2,0,7,6,5,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    objs = [grid[i][j] for i in range(H) for j in range(W) if grid[i][j] not in (0,2)]\\n    n = (len(objs) + 4) // 4\\n    cy, cx = H//2, W//2; h = n//2\\n    r0, c0, rn, cn = cy-h, cx-h, cy+h, cx+h\\n    # ring coords clockwise\\n    positions = []\\n    for j in range(c0, cn+1): positions.append((r0,j))\\n    for i in range(r0+1, rn): positions.append((i,cn))\\n    for j in range(cn, c0-1, -1): positions.append((rn,j))\\n    for i in range(rn-1, r0, -1): positions.append((i,c0))\\n    out = [row[:] for row in grid]\\n    # clear old objects\\n    for i in range(H):\\n        for j in range(W):\\n            if out[i][j] not in (0,2): out[i][j] = 0\\n    # place new\\n    for idx,(i,j) in enumerate(positions): out[i][j] = objs[idx]\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "57296904-a88e-4a86-820c-1edb3f5a4027.json",
    "uuid": "57296904-a88e-4a86-820c-1edb3f5a4027",
    "created": "2025-04-27 20:27:40",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00001210000\",\n        \"00002020000\",\n        \"00001210000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"10000200001\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"20000000002\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"00000000000\",\n        \"10000200001\"\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    center_r, center_c = H//2, W//2\\n    out = [['0']*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v!='0' and not (r==center_r and c==center_c):\\n                dr, dc = r-center_r, c-center_c\\n                nr, nc = r, c\\n                # step outward along (dr,dc) until border\\n                while 0<=nr+dr<H and 0<=nc+dc<W:\\n                    nr += dr; nc += dc\\n                out[nr][nc] = v\\n    return out\\n\\n# example usage:\\n# input_grid = [list(row) for row in INPUT]\\n# result = transform(input_grid)\\n# print([''.join(r) for r in result])\"\n    },\n    {\n      \"input\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000012100000\",\n        \"0000020200000\",\n        \"0000012100000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"output\": [\n        \"1000002000001\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"2000000000002\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"1000002000001\"\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    center_r, center_c = H//2, W//2\\n    out = [['0']*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v!='0' and not (r==center_r and c==center_c):\\n                dr, dc = r-center_r, c-center_c\\n                nr, nc = r, c\\n                while 0<=nr+dr<H and 0<=nc+dc<W:\\n                    nr += dr; nc += dc\\n                out[nr][nc] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000121000000\",\n        \"000000202000000\",\n        \"000000121000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\"\n      ],\n      \"output\": [\n        \"100000020000001\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"200000000000002\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"000000000000000\",\n        \"100000020000001\"\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    center_r, center_c = H//2, W//2\\n    out = [['0']*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v!='0' and not (r==center_r and c==center_c):\\n                dr, dc = r-center_r, c-center_c\\n                nr, nc = r, c\\n                while 0<=nr+dr<H and 0<=nc+dc<W:\\n                    nr += dr; nc += dc\\n                out[nr][nc] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000001230000000\",\n        \"00000008040000000\",\n        \"00000007650000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\"\n      ],\n      \"output\": [\n        \"10000000200000003\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"80000000000000004\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"00000000000000000\",\n        \"70000000600000005\"\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    center_r, center_c = H//2, W//2\\n    out = [['0']*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v!='0' and not (r==center_r and c==center_c):\\n                dr, dc = r-center_r, c-center_c\\n                nr, nc = r, c\\n                while 0<=nr+dr<H and 0<=nc+dc<W:\\n                    nr += dr; nc += dc\\n                out[nr][nc] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "555a5a8d-bb07-4312-ad84-48246cb3399c.json",
    "uuid": "555a5a8d-bb07-4312-ad84-48246cb3399c",
    "created": "2025-04-27 22:01:45",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,2,0,0,0,2,0],\n        [0,2,2,0,2,2,0],\n        [0,0,0,1,0,0,0],\n        [0,2,2,0,2,2,0],\n        [0,2,0,0,0,2,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [5,0,0,0,0,0,5],\n        [0,3,0,0,0,3,0],\n        [0,0,4,0,4,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,4,0,4,0,0],\n        [0,3,0,0,0,3,0],\n        [5,0,0,0,0,0,5]\n      ],\n      \"code\": \"def solve(grid):\\n    from math import gcd\\n    n = len(grid)\\n    # find core (value 1)\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # initialize result with zeros and place core\\n    res = [[0]*n for _ in range(n)]\\n    res[ci][cj] = 1\\n    # for each seed (value 2), compute direction and place branch\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                di = i - ci\\n                dj = j - cj\\n                g = gcd(abs(di), abs(dj))\\n                di //= g\\n                dj //= g\\n                # steps: 1→4, 2→3, 3→5\\n                for step, val in enumerate([4,3,5], start=1):\\n                    x = ci + di*step\\n                    y = cj + dj*step\\n                    res[x][y] = val\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,2,2,2,0,2,0],\n        [0,2,0,0,0,2,2],\n        [0,2,2,2,0,2,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [5,0,0,0,0,0,5],\n        [0,3,0,0,0,3,0],\n        [0,0,4,0,4,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,4,0,4,0,0],\n        [0,3,0,0,0,3,0],\n        [5,0,0,0,0,0,5]\n      ],\n      \"code\": \"def solve(grid):\\n    from math import gcd\\n    n = len(grid)\\n    # find core (value 1)\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # initialize result with zeros and place core\\n    res = [[0]*n for _ in range(n)]\\n    res[ci][cj] = 1\\n    # for each seed (value 2), compute direction and place branch\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                di = i - ci\\n                dj = j - cj\\n                g = gcd(abs(di), abs(dj))\\n                di //= g\\n                dj //= g\\n                # steps: 1→4, 2→3, 3→5\\n                for step, val in enumerate([4,3,5], start=1):\\n                    x = ci + di*step\\n                    y = cj + dj*step\\n                    res[x][y] = val\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,2,2,2,0,0],\n        [0,2,2,0,2,2,0],\n        [0,2,0,1,0,2,0],\n        [0,2,2,0,2,2,0],\n        [0,0,2,2,2,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [5,0,0,0,0,0,5],\n        [0,3,0,0,0,3,0],\n        [0,0,4,0,4,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,4,0,4,0,0],\n        [0,3,0,0,0,3,0],\n        [5,0,0,0,0,0,5]\n      ],\n      \"code\": \"def solve(grid):\\n    from math import gcd\\n    n = len(grid)\\n    # find core (value 1)\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # initialize result with zeros and place core\\n    res = [[0]*n for _ in range(n)]\\n    res[ci][cj] = 1\\n    # for each seed (value 2), compute direction and place branch\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                di = i - ci\\n                dj = j - cj\\n                g = gcd(abs(di), abs(dj))\\n                di //= g\\n                dj //= g\\n                # steps: 1→4, 2→3, 3→5\\n                for step, val in enumerate([4,3,5], start=1):\\n                    x = ci + di*step\\n                    y = cj + dj*step\\n                    res[x][y] = val\\n    return res\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,2,0,2,0,2,0],\n        [0,2,2,2,2,2,0],\n        [0,0,0,1,0,0,0],\n        [0,2,2,2,2,2,0],\n        [0,2,0,2,0,2,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [5,0,0,0,0,0,5],\n        [0,3,0,0,0,3,0],\n        [0,0,4,0,4,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,4,0,4,0,0],\n        [0,3,0,0,0,3,0],\n        [5,0,0,0,0,0,5]\n      ],\n      \"code\": \"def solve(grid):\\n    from math import gcd\\n    n = len(grid)\\n    # find core (value 1)\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 1:\\n                ci, cj = i, j\\n    # initialize result with zeros and place core\\n    res = [[0]*n for _ in range(n)]\\n    res[ci][cj] = 1\\n    # for each seed (value 2), compute direction and place branch\\n    for i in range(n):\\n        for j in range(n):\\n            if grid[i][j] == 2:\\n                di = i - ci\\n                dj = j - cj\\n                g = gcd(abs(di), abs(dj))\\n                di //= g\\n                dj //= g\\n                # steps: 1→4, 2→3, 3→5\\n                for step, val in enumerate([4,3,5], start=1):\\n                    x = ci + di*step\\n                    y = cj + dj*step\\n                    res[x][y] = val\\n    return res\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "635f5fec-9eb8-45d6-b5db-3e5357fec196.json",
    "uuid": "635f5fec-9eb8-45d6-b5db-3e5357fec196",
    "created": "2025-04-27 07:23:09",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "59fe6a11-a852-4f2e-94d1-eca808a52805.json",
    "uuid": "59fe6a11-a852-4f2e-94d1-eca808a52805",
    "created": "2025-04-27 19:12:50",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "651d32a6-903c-4bf3-be0e-409abe1e4ff0.json",
    "uuid": "651d32a6-903c-4bf3-be0e-409abe1e4ff0",
    "created": "2025-04-27 12:01:52",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [1,2,3,4,5,6,7,8,1],\n                [8,0,0,0,0,0,0,0,2],\n                [7,0,7,7,9,0,0,0,3],\n                [6,0,7,7,9,0,0,0,4],\n                [5,0,0,9,9,9,9,0,5],\n                [4,0,0,0,9,0,0,0,6],\n                [3,0,0,0,0,0,6,0,7],\n                [2,0,0,0,0,0,0,6,8],\n                [1,2,3,4,5,6,7,8,1]\n            ],\n            \"output\": [\n                [5,6,7,8,1,2,3,4,5],\n                [4,0,0,0,0,0,0,0,6],\n                [3,0,7,7,9,0,0,0,7],\n                [2,0,7,7,9,0,0,0,8],\n                [1,0,0,9,9,9,9,0,1],\n                [2,0,0,0,9,0,0,0,2],\n                [3,0,0,0,0,0,6,0,3],\n                [4,0,0,0,0,0,0,6,4],\n                [5,6,7,8,1,8,7,6,5]\n            ],\n            \"code\": \"grid = [[1,2,3,4,5,6,7,8,1],[8,0,0,0,0,0,0,0,2],[7,0,7,7,9,0,0,0,3],[6,0,7,7,9,0,0,0,4],[5,0,0,9,9,9,9,0,5],[4,0,0,0,9,0,0,0,6],[3,0,0,0,0,0,6,0,7],[2,0,0,0,0,0,0,6,8],[1,2,3,4,5,6,7,8,1]]\\nh,w=len(grid),len(grid[0])\\ncoords=[(0,j) for j in range(w)]+[(i,w-1) for i in range(1,h)]+[(h-1,j) for j in range(w-2,-1,-1)]+[(i,0) for i in range(h-2,0,-1)]\\nvals=[grid[i][j] for i,j in coords]\\nk=4\\nnew_vals=vals[-k:]+vals[:-k]\\nres=[row[:] for row in grid]\\nfor (i,j),v in zip(coords,new_vals):\\n    res[i][j]=v\\nprint(res)\"\n        },\n        {\n            \"input\": [\n                [1,2,3,4,5,6,7,8,1],\n                [8,0,0,0,0,0,0,0,2],\n                [7,0,9,0,6,0,9,0,3],\n                [6,0,8,0,6,0,8,0,4],\n                [5,0,7,7,6,7,7,0,5],\n                [4,0,8,0,6,0,8,0,6],\n                [3,0,9,0,6,0,9,0,7],\n                [2,0,0,0,0,0,0,0,8],\n                [1,2,3,4,5,6,7,8,1]\n            ],\n            \"output\": [\n                [5,6,7,8,1,2,3,4,5],\n                [4,0,0,0,0,0,0,0,6],\n                [3,0,9,0,6,0,9,0,7],\n                [2,0,8,0,6,0,8,0,8],\n                [1,0,7,7,6,7,7,0,1],\n                [2,0,8,0,6,0,8,0,2],\n                [3,0,9,0,6,0,9,0,3],\n                [4,0,0,0,0,0,0,0,4],\n                [5,6,7,8,1,8,7,6,5]\n            ],\n            \"code\": \"grid = [[1,2,3,4,5,6,7,8,1],[8,0,0,0,0,0,0,0,2],[7,0,9,0,6,0,9,0,3],[6,0,8,0,6,0,8,0,4],[5,0,7,7,6,7,7,0,5],[4,0,8,0,6,0,8,0,6],[3,0,9,0,6,0,9,0,7],[2,0,0,0,0,0,0,0,8],[1,2,3,4,5,6,7,8,1]]\\nh,w=len(grid),len(grid[0])\\ncoords=[(0,j) for j in range(w)]+[(i,w-1) for i in range(1,h)]+[(h-1,j) for j in range(w-2,-1,-1)]+[(i,0) for i in range(h-2,0,-1)]\\nvals=[grid[i][j] for i,j in coords]\\nk=4\\nnew_vals=vals[-k:]+vals[:-k]\\nres=[row[:] for row in grid]\\nfor (i,j),v in zip(coords,new_vals):\\n    res[i][j]=v\\nprint(res)\"\n        },\n        {\n            \"input\": [\n                [1,2,3,4,5,6,7,8,1],\n                [8,0,0,0,0,0,0,0,2],\n                [7,0,9,9,9,0,0,0,3],\n                [6,0,9,0,9,0,0,0,4],\n                [5,0,9,9,9,0,0,0,5],\n                [4,0,0,7,0,0,0,0,6],\n                [3,0,0,0,7,0,0,0,7],\n                [2,0,0,0,0,7,0,0,8],\n                [1,2,3,4,5,6,7,8,1]\n            ],\n            \"output\": [\n                [5,6,7,8,1,2,3,4,5],\n                [4,0,0,0,0,0,0,0,6],\n                [3,0,9,9,9,0,0,0,7],\n                [2,0,9,0,9,0,0,0,8],\n                [1,0,9,9,9,0,0,0,1],\n                [2,0,0,7,0,0,0,0,2],\n                [3,0,0,0,7,0,0,0,3],\n                [4,0,0,0,0,7,0,0,4],\n                [5,6,7,8,1,8,7,6,5]\n            ],\n            \"code\": \"grid = [[1,2,3,4,5,6,7,8,1],[8,0,0,0,0,0,0,0,2],[7,0,9,9,9,0,0,0,3],[6,0,9,0,9,0,0,0,4],[5,0,9,9,9,0,0,0,5],[4,0,0,7,0,0,0,0,6],[3,0,0,0,7,0,0,0,7],[2,0,0,0,0,7,0,0,8],[1,2,3,4,5,6,7,8,1]]\\nh,w=len(grid),len(grid[0])\\ncoords=[(0,j) for j in range(w)]+[(i,w-1) for i in range(1,h)]+[(h-1,j) for j in range(w-2,-1,-1)]+[(i,0) for i in range(h-2,0,-1)]\\nvals=[grid[i][j] for i,j in coords]\\nk=4\\nnew_vals=vals[-k:]+vals[:-k]\\nres=[row[:] for row in grid]\\nfor (i,j),v in zip(coords,new_vals):\\n    res[i][j]=v\\nprint(res)\"\n        },\n        {\n            \"input\": [\n                [1,2,3,4,5,6,7,8,1],\n                [8,0,0,0,0,0,0,0,2],\n                [7,0,0,0,6,0,0,0,3],\n                [6,0,5,5,5,5,0,0,4],\n                [5,0,8,9,8,9,0,0,5],\n                [4,0,9,8,9,8,0,0,6],\n                [3,0,0,0,6,0,0,0,7],\n                [2,0,0,0,0,0,0,0,8],\n                [1,2,3,4,5,6,7,8,1]\n            ],\n            \"output\": [\n                [5,6,7,8,1,2,3,4,5],\n                [4,0,0,0,0,0,0,0,6],\n                [3,0,0,0,6,0,0,0,7],\n                [2,0,5,5,5,5,0,0,8],\n                [1,0,8,9,8,9,0,0,1],\n                [2,0,9,8,9,8,0,0,2],\n                [3,0,0,0,6,0,0,0,3],\n                [4,0,0,0,0,0,0,0,4],\n                [5,6,7,8,1,8,7,6,5]\n            ],\n            \"code\": \"grid = [[1,2,3,4,5,6,7,8,1],[8,0,0,0,0,0,0,0,2],[7,0,0,0,6,0,0,0,3],[6,0,5,5,5,5,0,0,4],[5,0,8,9,8,9,0,0,5],[4,0,9,8,9,8,0,0,6],[3,0,0,0,6,0,0,0,7],[2,0,0,0,0,0,0,0,8],[1,2,3,4,5,6,7,8,1]]\\nh,w=len(grid),len(grid[0])\\ncoords=[(0,j) for j in range(w)]+[(i,w-1) for i in range(1,h)]+[(h-1,j) for j in range(w-2,-1,-1)]+[(i,0) for i in range(h-2,0,-1)]\\nvals=[grid[i][j] for i,j in coords]\\nk=4\\nnew_vals=vals[-k:]+vals[:-k]\\nres=[row[:] for row in grid]\\nfor (i,j),v in zip(coords,new_vals):\\n    res[i][j]=v\\nprint(res)\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "6588d3be-0db7-4b40-b7e9-257c461e9a9a.json",
    "uuid": "6588d3be-0db7-4b40-b7e9-257c461e9a9a",
    "created": "2025-04-27 10:03:25",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "67a5ceff-8524-4d98-9bfc-196715d4ad66.json",
    "uuid": "67a5ceff-8524-4d98-9bfc-196715d4ad66",
    "created": "2025-04-27 04:00:35",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "6ee28cd4-86a1-4d7a-95d8-1bb04b6af1f8.json",
    "uuid": "6ee28cd4-86a1-4d7a-95d8-1bb04b6af1f8",
    "created": "2025-04-28 06:27:01",
    "description": ""
  },
  {
    "filename": "6fa03269-ee46-4bd7-ac2a-57d3983ae797.json",
    "uuid": "6fa03269-ee46-4bd7-ac2a-57d3983ae797",
    "created": "2025-04-27 05:30:24",
    "description": ""
  },
  {
    "filename": "7ca02142-0d40-47b1-9c45-3f012661c864.json",
    "uuid": "7ca02142-0d40-47b1-9c45-3f012661c864",
    "created": "2025-04-27 16:28:29",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,0,0,0,0,3,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,7,7,7,7,7,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,9,0,8,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,0,0,0,0,3,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,7,7,7,7,7,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,9,0,8,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    # 복제된 그리드를 만든다\\n    result = [row[:] for row in grid]\\n    h = len(grid)\\n    for r in range(h-1):\\n        # 행 r에 6이 포함되고, 바로 아래 행이 전부 0이라면 복제\\n        if 6 in grid[r] and all(v==0 for v in grid[r+1]):\\n            result[r+1] = grid[r][:]\\n    return result\\n\\n# 사용 예시\\n# out = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,2,0,0,3,3,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,7,7,7,7,7,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,0,9,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,2,0,0,3,3,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,7,7,7,7,7,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,0,9,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    result = [row[:] for row in grid]\\n    for r in range(len(grid)-1):\\n        if 6 in grid[r] and all(v==0 for v in grid[r+1]):\\n            result[r+1] = grid[r][:]\\n    return result\\n# out = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,0,0,2,0,0,0,0,0,2,0,0,2,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,7,7,7,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,8,8,8,0,9,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,0,0,2,0,0,0,0,0,2,0,0,2,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,7,7,7,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,8,8,8,0,9,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    result = [row[:] for row in grid]\\n    for r in range(len(grid)-1):\\n        if 6 in grid[r] and all(v==0 for v in grid[r+1]):\\n            result[r+1] = grid[r][:]\\n    return result\\n# out = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,0,0,0,3,3,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,7,7,7,7,0,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,0,0,0,9,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,0,0,0,3,3,3,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,3,3,3,3,3,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,4,4,4,4,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,5,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,0,0,4,6,6,6,4,0,0,0,0,1],\n        [1,0,0,7,7,7,7,0,0,0,0,0,0,0,1],\n        [1,0,0,0,8,0,0,0,0,9,9,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    result = [row[:] for row in grid]\\n    for r in range(len(grid)-1):\\n        if 6 in grid[r] and all(v==0 for v in grid[r+1]):\\n            result[r+1] = grid[r][:]\\n    return result\\n# out = transform(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "89da2da3-1f0e-4315-825c-4f789892d290.json",
    "uuid": "89da2da3-1f0e-4315-825c-4f789892d290",
    "created": "2025-04-28 00:34:24",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [1,1,0,1,0,0,0],\n        [0,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,3,0,4,0,0,0],\n        [6,0,6,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [6,3,0,4,0,0,0],\n        [0,0,6,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h=len(grid); w=len(grid[0])\\n    out=[[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v=grid[r][c]\\n            if v>1:\\n                nr=r\\n                while nr>0 and grid[nr-1][c]!=1:\\n                    nr-=1\\n                if nr>0 and grid[nr-1][c]==1:\\n                    out[nr-1][c]=v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,1,0,1,0,1,0],\n        [0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,1],\n        [0,0,0,0,0,0,0],\n        [0,0,4,0,5,0,0],\n        [0,3,0,6,0,7,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [3,0,6,0,7,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,4,0,5,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h=len(grid); w=len(grid[0])\\n    out=[[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v=grid[r][c]\\n            if v>1:\\n                nr=r\\n                while nr>0 and grid[nr-1][c]!=1:\\n                    nr-=1\\n                if nr>0 and grid[nr-1][c]==1:\\n                    out[nr-1][c]=v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,3,4,5,6,7,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,3,4,5,6,7,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h=len(grid); w=len(grid[0])\\n    out=[[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v=grid[r][c]\\n            if v>1:\\n                nr=r\\n                while nr>0 and grid[nr-1][c]!=1:\\n                    nr-=1\\n                if nr>0 and grid[nr-1][c]==1:\\n                    out[nr-1][c]=v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,1,0,1,0,1,0],\n        [0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,1],\n        [0,0,0,0,0,0,0],\n        [0,0,3,0,5,0,6],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,3,0,5,0,6],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h=len(grid); w=len(grid[0])\\n    out=[[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v=grid[r][c]\\n            if v>1:\\n                nr=r\\n                while nr>0 and grid[nr-1][c]!=1:\\n                    nr-=1\\n                if nr>0 and grid[nr-1][c]==1:\\n                    out[nr-1][c]=v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "97475326-f2ba-4a08-85e3-5518fd8e020e.json",
    "uuid": "97475326-f2ba-4a08-85e3-5518fd8e020e",
    "created": "2025-04-27 16:10:52",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "67e8d55d-7223-4daa-8653-558966e44c3f.json",
    "uuid": "67e8d55d-7223-4daa-8653-558966e44c3f",
    "created": "2025-04-27 06:18:21",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\n        [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\n        [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\n        [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\n        [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\n        [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\n        [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\n        [4,0,0,0,0,0,0,0,1,0,0,0,0,0,4],\n        [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\n        [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\n        [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\n        [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\n        [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\n        [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,4,0,0,0,0,0,0,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,0,0,4,0,0,0,0,0,0,1],\n        [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\n        [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\n        [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\n        [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\n        [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\n        [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\n        [4,0,0,0,0,0,0,0,1,0,0,0,0,0,4],\n        [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\n        [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\n        [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\n        [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\n        [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\n        [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\n        [1,0,0,0,0,0,0,4,0,0,0,0,0,0,1]\n      ],\n      \"code\": \"def complete_circle(grid):\\n    # Fill the missing pixel at row 0, col 7\\n    grid[0][7] = 4\\n    return grid\\n\\n# Given input grid\\ngrid = [\\n  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\\n  [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\\n  [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\\n  [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\\n  [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\\n  [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\\n  [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\\n  [4,0,0,0,0,0,0,0,1,0,0,0,0,0,4],\\n  [0,4,0,0,0,0,1,0,1,0,0,0,0,4,0],\\n  [0,0,4,0,0,1,0,0,0,1,0,0,4,0,0],\\n  [0,0,0,4,1,0,0,0,0,0,0,1,4,0,0],\\n  [0,0,0,1,4,0,0,0,0,0,0,4,1,0,0],\\n  [0,0,1,0,0,4,0,0,0,4,0,0,1,0,0],\\n  [0,1,0,0,0,0,4,0,4,0,0,0,0,1,0],\\n  [1,0,0,0,0,0,0,4,0,0,0,0,0,0,1]\\n]\\n\\n# Compute"
  },
  {
    "filename": "9685b0d1-2a7d-4bd6-8524-7c9b76e8eff4.json",
    "uuid": "9685b0d1-2a7d-4bd6-8524-7c9b76e8eff4",
    "created": "2025-04-27 17:12:46",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0],\n                [0,4,4,0,0,0,0,0],\n                [0,4,4,0,0,0,0,0],\n                [0,0,0,0,3,0,0,0],\n                [0,0,0,3,3,3,0,0],\n                [0,0,0,0,3,0,0,6],\n                [7,7,0,0,0,0,0,6],\n                [7,0,0,0,0,0,0,6]\n            ],\n            \"output\": [\n                [7,7,0,0,0,0,0,0],\n                [0,7,0,0,0,4,4,0],\n                [0,0,0,0,0,4,4,0],\n                [0,0,0,3,0,0,0,0],\n                [0,0,3,3,3,0,0,0],\n                [0,0,0,3,0,0,0,0],\n                [0,0,0,0,0,0,0,0],\n                [6,6,6,0,0,0,0,0]\n            ],\n            \"code\": \"def rotate_clockwise(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    result = [[0]*rows for _ in range(cols)]\\n    for r in range(rows):\\n        for c in range(cols):\\n            result[c][rows-1-r] = grid[r][c]\\n    return result\\n\\n# Usage:\\n# output = rotate_clockwise(input)\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,2,2,0],\n                [0,0,0,0,2,2,0],\n                [0,0,0,7,0,0,0],\n                [0,0,7,7,7,0,0],\n                [0,0,0,7,0,0,0],\n                [4,0,0,0,0,0,0],\n                [4,4,0,0,0,0,0]\n            ],\n            \"output\": [\n                [4,4,0,0,0,0,0],\n                [4,0,0,0,0,0,0],\n                [0,0,0,7,0,0,0],\n                [0,0,7,7,7,0,0],\n                [0,0,0,7,0,2,2],\n                [0,0,0,0,0,2,2],\n                [0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def rotate_clockwise(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    result = [[0]*rows for _ in range(cols)]\\n    for r in range(rows):\\n        for c in range(cols):\\n            result[c][rows-1-r] = grid[r][c]\\n    return result\\n\\n# Usage:\\n# output = rotate_clockwise(input)\"\n        },\n        {\n            \"input\": [\n                [0,0,0,1,1,1],\n                [0,0,0,0,0,0],\n                [2,0,0,0,0,0],\n                [2,0,0,0,0,0],\n                [2,0,0,0,0,0],\n                [0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,2,2,2,0,0],\n                [0,0,0,0,0,0],\n                [0,0,0,0,0,0],\n                [0,0,0,0,0,1],\n                [0,0,0,0,0,1],\n                [0,0,0,0,0,1]\n            ],\n            \"code\": \"def rotate_clockwise(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    result = [[0]*rows for _ in range(cols)]\\n    for r in range(rows):\\n        for c in range(cols):\\n            result[c][rows-1-r] = grid[r][c]\\n    return result\\n\\n# Usage:\\n# output = rotate_clockwise(input)\"\n        },\n        {\n            \"input\": [\n                [0,0,8,8,8,0,0,0,0],\n                [0,8,0,0,0,8,0,0,0],\n                [8,0,0,0,0,0,8,0,0],\n                [0,8,0,0,0,8,0,0,0],\n                [0,0,8,8,8,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,4,4,0,0,0,0],\n                [0,0,4,4,4,4,0,0,0],\n                [0,0,0,4,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,8,0,0],\n                [0,0,0,0,0,8,0,8,0],\n                [0,4,0,0,8,0,0,0,8],\n                [4,4,4,0,8,0,0,0,8],\n                [0,4,4,0,8,0,0,0,8],\n                [0,4,0,0,0,8,0,8,0],\n                [0,0,0,0,0,0,8,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def rotate_clockwise(grid):\\n    rows = len(grid)\\n    cols = len(grid[0])\\n    result = [[0]*rows for _ in range(cols)]\\n    for r in range(rows):\\n        for c in range(cols):\\n            result[c][rows-1-r] = grid[r][c]\\n    return result\\n\\n# Usage:\\n# output = rotate_clockwise(input)\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "9786d5cc-0c8a-42eb-b33b-288488a2b483.json",
    "uuid": "9786d5cc-0c8a-42eb-b33b-288488a2b483",
    "created": "2025-04-27 10:01:25",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "9a8e8b86-4df4-4861-8a70-251ccba907f8.json",
    "uuid": "9a8e8b86-4df4-4861-8a70-251ccba907f8",
    "created": "2025-04-27 03:59:24",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0],\n        [0,0,0,3,3,0,0,0],\n        [0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,0,0,0],\n        [0,0,0,1,1,1,0,0],\n        [0,0,0,1,1,1,0,0],\n        [0,0,0,0,6,0,0,0],\n        [0,0,0,0,3,0,0,0],\n        [0,0,0,3,3,0,0,0],\n        [0,0,0,0,3,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def hook_transform(grid):\\n    R = len(grid)\\n    C = len(grid[0])\\n    visited = [[False]*C for _ in range(R)]\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] != 0 and not visited[i][j]:\\n                obj_id = grid[i][j]\\n                stack = [(i,j)]\\n                visited[i][j] = True\\n                comp = []\\n                while stack:\\n                    r,c = stack.pop()\\n                    comp.append((r,c))\\n                    for dr,dc in dirs:\\n                        nr,nc = r+dr, c+dc\\n                        if 0 <= nr < R and 0 <= nc < C and not visited[nr][nc] and grid[nr][nc] == obj_id:\\n                            visited[nr][nc] = True\\n                            stack.append((nr,nc))\\n                rt = min(r for r,c in comp)\\n                cols = [c for r,c in comp if r == rt]\\n                L, Rr = min(cols), max(cols)\\n                cc = (L + Rr)//2\\n                if rt - 1 >= 0:\\n                    grid[rt-1][cc] = obj_id * 2\\n    return grid\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0],\n        [0,0,1,1,0,0,0,0],\n        [0,0,0,0,0,0,2,2],\n        [0,0,0,0,0,2,2,2],\n        [0,0,0,0,0,0,2,2],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,2,0,0,0,0,0],\n        [0,0,1,1,0,0,0,0],\n        [0,0,1,1,0,0,4,0],\n        [0,0,0,0,0,0,2,2],\n        [0,0,0,0,0,2,2,2],\n        [0,0,0,0,0,0,2,2],\n        [0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def hook_transform(grid):\\n    R = len(grid)\\n    C = len(grid[0])\\n    visited = [[False]*C for _ in range(R)]\\n    dirs = [(1,0),(-1,0),(0,1),(0,-1)]\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] != 0 and not visited[i][j]:\\n                obj_id = grid[i][j]\\n                stack = [(i,j)]\\n                visited[i][j] = True\\n                comp = []\\n                while stack:\\n                    r,c = stack.pop()\\n                    comp.append((r,c))\\n                    for dr,dc in dirs:\\n                        nr,nc = r+dr, c+dc\\n                        if 0 <= nr < R and 0 <= nc < C and not visited[nr][nc] and grid[nr][nc] == obj_id:\\n                            visited[nr][nc] = True\\n                            stack.append((nr,nc))\\n                rt = min(r for r,c in comp)\\n                cols = [c for r,c in comp if r == rt]\\n                L, Rr = min(cols), max(cols)\\n                cc = (L + Rr)//2\\n                if rt - 1 >= 0:\\n                    grid[rt-1][cc] = obj_id * 2\\n    return grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9a693933-0c67-466f-9e0b-53dfcef241d0.json",
    "uuid": "9a693933-0c67-466f-9e0b-53dfcef241d0",
    "created": "2025-04-27 02:30:41",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,9,9,1,9,9,0,0],\n        [0,0,9,3,3,3,9,0,0],\n        [0,0,1,3,3,3,1,0,0],\n        [0,0,9,3,3,3,9,0,0],\n        [0,0,9,9,1,9,9,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,9,9,1,9,9,0,0],\n        [0,0,9,1,9,1,9,0,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,9,1,9,1,9,0,0],\n        [0,0,9,9,1,9,9,0,0],\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,0,0,1,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    cx, cy = n//2, m//2\\n    swirl = 3\\n    shoot = 1\\n    # prepare output filled with zeros\\n    out = [[0]*m for _ in range(n)]\\n    # copy fixed objects (>0 and not swirl/shoot)\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] != 0 and grid[i][j] != swirl and grid[i][j] != shoot:\\n                out[i][j] = grid[i][j]\\n    # for each shooter, draw beam through center to edges\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == shoot:\\n                out[i][j] = shoot\\n                # direction vector toward center\\n                dx = 1 if i < cx else -1 if i > cx else 0\\n                dy = 1 if j < cy else -1 if j > cy else 0\\n                for ddx, ddy in [(dx, dy), (-dx, -dy)]:\\n                    x, y = i, j\\n                    while True:\\n                        x += ddx; y += ddy\\n                        if x < 0 or x >= n or y < 0 or y >= m:\\n                            break\\n                        # stop before any fixed object\\n                        if grid[x][y] != 0 and grid[x][y] != swirl and grid[x][y] != shoot:\\n                            break\\n                        out[x][y] = shoot\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,2,0,3,3,3,0,2,0],\n        [0,1,3,3,3,1,3,1,0],\n        [0,2,0,3,3,3,0,2,0],\n        [0,2,0,0,0,0,0,2,0],\n        [0,0,2,2,2,2,2,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,0,0,0,0],\n        [0,0,2,2,1,2,2,0,0],\n        [0,2,0,0,1,0,0,2,0],\n        [0,2,0,1,1,1,0,2,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,2,0,1,1,1,0,2,0],\n        [0,2,0,0,1,0,0,2,0],\n        [0,0,2,2,1,2,2,0,0],\n        [0,0,0,0,1,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    cx, cy = n//2, m//2\\n    swirl = 3\\n    shoot = 1\\n    out = [[0]*m for _ in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] != 0 and grid[i][j] != swirl and grid[i][j] != shoot:\\n                out[i][j] = grid[i][j]\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == shoot:\\n                out[i][j] = shoot\\n                dx = 1 if i < cx else -1 if i > cx else 0\\n                dy = 1 if j < cy else -1 if j > cy else 0\\n                for ddx, ddy in [(dx, dy), (-dx, -dy)]:\\n                    x, y = i, j\\n                    while True:\\n                        x += ddx; y += ddy\\n                        if x < 0 or x >= n or y < 0 or y >= m:\\n                            break\\n                        if grid[x][y] != 0 and grid[x][y] != swirl and grid[x][y] != shoot:\\n                            break\\n                        out[x][y] = shoot\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9e68175a-b566-4d14-8662-b5013cc34056.json",
    "uuid": "9e68175a-b566-4d14-8662-b5013cc34056",
    "created": "2025-04-28 03:40:11",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,1,0,0,0,0,0],\n                [0,0,0,0,1,0,1,0,0,0,0],\n                [0,0,0,1,0,2,0,1,0,0,0],\n                [0,0,1,0,2,0,2,0,1,0,0],\n                [0,1,0,2,0,9,0,2,0,1,0],\n                [1,0,2,0,3,4,3,0,8,0,1],\n                [0,1,0,2,0,3,0,2,0,1,0],\n                [0,0,1,0,2,0,2,0,1,0,0],\n                [0,0,0,1,0,2,0,1,0,0,0],\n                [0,0,0,0,1,0,1,0,0,0,0],\n                [0,0,0,0,0,7,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,1,0,0,0,0,0],\n                [0,0,0,0,1,0,1,0,0,0,0],\n                [0,0,0,1,0,2,0,1,0,0,0],\n                [0,0,1,0,2,0,2,0,1,0,0],\n                [0,1,0,2,0,9,0,2,0,1,0],\n                [1,0,8,0,3,4,3,0,2,0,1],\n                [0,1,0,2,0,3,0,2,0,1,0],\n                [0,0,1,0,2,0,2,0,7,0,0],\n                [0,0,0,1,0,2,0,1,0,0,0],\n                [0,0,0,0,1,0,1,0,0,0,0],\n                [0,0,0,0,0,1,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    import math\\n    n = len(grid)\\n    c = n // 2\\n    out = [row[:] for row in grid]\\n    # collect diamond rings by Manhattan distance\\n    rings = {5: [], 3: [], 1: []}\\n    for i in range(n):\\n        for j in range(n):\\n            d = abs(i - c) + abs(j - c)\\n            if d in rings:\\n                rings[d].append((i, j))\\n    # sort each ring in clockwise order starting from top\\n    def sort_ring(coords):\\n        return sorted(coords, key=lambda p: math.atan2(p[1]-c, c-p[0]))\\n    for d in rings:\\n        rings[d] = sort_ring(rings[d])\\n    # shifts: marker -> (distance, steps)\\n    shifts = {7: (5, 3), 8: (3, -6), 9: (1, 4)}\\n    for mark, (d, step) in shifts.items():\\n        ring = rings[d]\\n        # find old index\\n        idx = next(k for k,(x,y) in enumerate(ring) if grid[x][y] == mark)\\n        old = ring[idx]\\n        new = ring[(idx + step) % len(ring)]\\n        # clear old marker to ring value\\n        out[old[0]][old[1]] = 1 if d==5 else 2 if d==3 else 3\\n        # set new marker\\n        out[new[0]][new[1]] = mark\\n    return out\"\n        },\n        {\n            \"input\": [\n                [1,1,1,1,1,1,1,1,1,1,1],\n                [1,0,0,0,0,0,0,0,0,0,1],\n                [1,2,2,2,2,2,2,2,2,0,1],\n                [1,2,0,0,0,0,0,0,2,0,1],\n                [1,2,0,3,0,9,0,3,2,0,1],\n                [1,2,0,3,0,4,0,3,8,0,1],\n                [1,2,0,3,0,0,0,3,2,0,1],\n                [1,2,0,0,0,0,0,0,2,0,1],\n                [1,2,2,2,2,2,2,2,2,0,1],\n                [1,0,0,0,0,0,0,0,0,0,1],\n                [1,1,1,1,1,7,1,1,1,1,1]\n            ],\n            \"output\": [\n                [1,1,1,1,1,1,1,1,1,1,1],\n                [1,0,0,0,0,0,0,0,0,0,1],\n                [1,2,2,2,2,2,2,2,2,0,1],\n                [1,2,0,0,0,0,0,0,2,0,1],\n                [1,2,0,3,0,3,0,3,2,0,1],\n                [1,2,0,3,0,4,0,3,2,0,1],\n                [1,2,0,3,0,9,0,3,2,0,1],\n                [1,2,0,0,0,0,0,0,2,0,1],\n                [1,2,2,2,2,8,2,2,2,0,1],\n                [1,0,0,0,0,0,0,0,0,0,1],\n                [1,1,1,1,1,1,1,1,7,1,1]\n            ],\n            \"code\": \"def transform(grid):\\n    n = len(grid)\\n    out = [row[:] for row in grid]\\n    # build square rings\\n    rings = []\\n    # outer ring d=1\\n    ring1 = []\\n    for j in range(n): ring1.append((0,j))\\n    for i in range(1,n): ring1.append((i,n-1))\\n    for j in range(n-2,-1,-1): ring1.append((n-1,j))\\n    for i in range(n-2,0,-1): ring1.append((i,0))\\n    rings.append((1, ring1))\\n    # mid ring d=2 (indices 2 and n-3)\\n    m1, m2 = 2, n-3\\n    ring2 = []\\n    for j in range(m1,m2+1): ring2.append((m1,j))\\n    for i in range(m1+1,m2+1): ring2.append((i,m2))\\n    for j in range(m2-1,m1-1,-1): ring2.append((m2,j))\\n    for i in range(m2-1,m1,-1): ring2.append((i,m1))\\n    rings.append((2, ring2))\\n    # inner ring d=3 (indices 4 and n-5)\\n    i1, i2 = 4, n-5\\n    ring3 = []\\n    for j in range(i1,i2+1): ring3.append((i1,j))\\n    for i in range(i1+1,i2+1): ring3.append((i,i2))\\n    for j in range(i2-1,i1-1,-1): ring3.append((i2,j))\\n    for i in range(i2-1,i1,-1): ring3.append((i,i1))\\n    rings.append((3, ring3))\\n    # shifts: marker -> (ring_d, steps)\\n    shifts = {7: (1,3), 8: (2,-6), 9: (3,4)}\\n    for mark, (d, step) in shifts.items():\\n        ring = next(r for rd, r in rings if rd == d)\\n        idx = next(k for k,(x,y) in enumerate(ring) if grid[x][y] == mark)\\n        old = ring[idx]\\n        new = ring[(idx + step) % len(ring)]\\n        # clear old to ring value\\n        out[old[0]][old[1]] = d\\n        out[new[0]][new[1]] = mark\\n    return out\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "9f1462bc-83ab-43ee-aea5-bef99240a39e.json",
    "uuid": "9f1462bc-83ab-43ee-aea5-bef99240a39e",
    "created": "2025-04-28 03:47:18",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,2,0,0, 3,3,3,3,3, 0,4,4,4,0],\n        [0,2,0,2,0, 3,0,0,0,3, 4,0,0,0,4],\n        [2,0,5,0,2, 3,0,7,0,3, 4,0,6,0,4],\n        [0,2,0,2,0, 3,0,0,0,3, 4,0,0,0,4],\n        [0,0,2,0,0, 3,3,3,3,3, 0,4,4,4,0]\n      ],\n      \"output\": [\n        [5,7,6]\n      ],\n      \"code\": \"def solve(inp):\\n    h = len(inp)\\n    w = len(inp[0])\\n    out = []\\n    for bi in range(h // 5):\\n        row = []\\n        for bj in range(w // 5):\\n            # center of each 5×5 block is at offset (2,2)\\n            row.append(inp[bi*5 + 2][bj*5 + 2])\\n        out.append(row)\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,4,4,4,0],\n        [4,0,0,0,4],\n        [4,0,6,0,4],\n        [4,0,0,0,4],\n        [0,4,4,4,0],\n        [9,0,9,0,9],\n        [0,9,9,9,0],\n        [9,9,8,9,9],\n        [0,9,9,9,0],\n        [9,0,9,0,9],\n        [0,0,2,0,0],\n        [0,2,0,2,0],\n        [2,0,5,0,2],\n        [0,2,0,2,0],\n        [0,0,2,0,0]\n      ],\n      \"output\": [\n        [6],\n        [8],\n        [5]\n      ],\n      \"code\": \"def solve(inp):\\n    h = len(inp)\\n    w = len(inp[0])\\n    out = []\\n    for bi in range(h // 5):\\n        row = []\\n        for bj in range(w // 5):\\n            row.append(inp[bi*5 + 2][bj*5 + 2])\\n        out.append(row)\\n    return out\"\n    },\n    {\n      \"input\": [\n        [3,3,3,3,3, 0,1,0,0,0],\n        [3,0,0,0,3, 1,0,1,0,0],\n        [3,0,7,0,3, 1,1,4,1,1],\n        [3,0,0,0,3, 1,0,0,0,1],\n        [3,3,3,3,3, 1,1,1,1,1],\n        [9,0,9,0,9, 0,4,4,4,0],\n        [0,9,9,9,0, 4,0,0,0,4],\n        [9,9,8,9,9, 4,0,6,0,4],\n        [0,9,9,9,0, 4,0,0,0,4],\n        [9,0,9,0,9, 0,4,4,4,0]\n      ],\n      \"output\": [\n        [7,4],\n        [8,6]\n      ],\n      \"code\": \"def solve(inp):\\n    h = len(inp)\\n    w = len(inp[0])\\n    out = []\\n    for bi in range(h // 5):\\n        row = []\\n        for bj in range(w // 5):\\n            row.append(inp[bi*5 + 2][bj*5 + 2])\\n        out.append(row)\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,2,0,0, 3,3,3,3,3, 9,0,9,0,9],\n        [0,2,0,2,0, 3,0,0,0,3, 0,9,9,9,0],\n        [2,0,5,0,2, 3,0,7,0,3, 9,9,8,9,9],\n        [0,2,0,2,0, 3,0,0,0,3, 0,9,9,9,0],\n        [0,0,2,0,0, 3,3,3,3,3, 9,0,9,0,9],\n        [0,4,4,4,0, 0,1,0,0,0, 0,0,2,0,0],\n        [4,0,0,0,4, 1,0,1,0,0, 0,2,0,2,0],\n        [4,0,6,0,4, 1,1,4,1,1, 2,0,5,0,2],\n        [4,0,0,0,4, 1,0,0,0,1, 0,2,0,2,0],\n        [0,4,4,4,0, 1,1,1,1,1, 0,0,2,0,0]\n      ],\n      \"output\": [\n        [5,7,8],\n        [6,4,5]\n      ],\n      \"code\": \"def solve(inp):\\n    h = len(inp)\\n    w = len(inp[0])\\n    out = []\\n    for bi in range(h // 5):\\n        row = []\\n        for bj in range(w // 5):\\n            row.append(inp[bi*5 + 2][bj*5 + 2])\\n        out.append(row)\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a049f1c9-e44b-4ce4-a249-066a3a68e524.json",
    "uuid": "a049f1c9-e44b-4ce4-a249-066a3a68e524",
    "created": "2025-04-27 15:34:32",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000002000000\",\n        \"0000022200000\",\n        \"0000002000000\",\n        \"0000000500000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"output\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000002000000\",\n        \"0000022200000\",\n        \"0000202020000\",\n        \"0002225222000\",\n        \"0000202020000\",\n        \"0000022200000\",\n        \"0000002000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    A = [list(row) for row in grid]\\n    # find core\\n    for i in range(n):\\n        for j in range(m):\\n            if A[i][j] == '5':\\n                cr, cc = i, j\\n    # collect petal offsets\\n    deltas = [(i-cr, j-cc)\\n              for i in range(n)\\n              for j in range(m)\\n              if A[i][j] == '2']\\n    # build output\\n    B = [['0'] * m for _ in range(n)]\\n    B[cr][cc] = '5'\\n    # rotate each offset by k*90° and place\\n    for dr, dc in deltas:\\n        for k in range(4):\\n            r, c = dr, dc\\n            for _ in range(k):\\n                r, c = -c, r\\n            B[cr + r][cc + c] = '2'\\n    return [''.join(row) for row in B]\\n\\n# Example usage:\\n# grid = [\\n#   \\\"0000000000000\\\", ...\\n# ]\\n# result = transform(grid)\\n# print(\\\"\\\\n\\\".join(result))\"\n    },\n    {\n      \"input\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0002000000000\",\n        \"0000200000000\",\n        \"0000020000000\",\n        \"0000005000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"output\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0002000002000\",\n        \"0000200020000\",\n        \"0000020200000\",\n        \"0000005000000\",\n        \"0000020200000\",\n        \"0000200020000\",\n        \"0002000002000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    A = [list(row) for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if A[i][j] == '5':\\n                cr, cc = i, j\\n    deltas = [(i-cr, j-cc)\\n              for i in range(n)\\n              for j in range(m)\\n              if A[i][j] == '2']\\n    B = [['0'] * m for _ in range(n)]\\n    B[cr][cc] = '5'\\n    for dr, dc in deltas:\\n        for k in range(4):\\n            r, c = dr, dc\\n            for _ in range(k):\\n                r, c = -c, r\\n            B[cr + r][cc + c] = '2'\\n    return [''.join(row) for row in B]\"\n    },\n    {\n      \"input\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0002200000000\",\n        \"0002200000000\",\n        \"0000000000000\",\n        \"0000005000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"output\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0002200002200\",\n        \"0002200002200\",\n        \"0000000000000\",\n        \"0000005000000\",\n        \"0000000000000\",\n        \"0002200002200\",\n        \"0002200002200\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    A = [list(row) for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if A[i][j] == '5':\\n                cr, cc = i, j\\n    deltas = [(i-cr, j-cc)\\n              for i in range(n)\\n              for j in range(m)\\n              if A[i][j] == '2']\\n    B = [['0'] * m for _ in range(n)]\\n    B[cr][cc] = '5'\\n    for dr, dc in deltas:\\n        for k in range(4):\\n            r, c = dr, dc\\n            for _ in range(k):\\n                r, c = -c, r\\n            B[cr + r][cc + c] = '2'\\n    return [''.join(row) for row in B]\"\n    },\n    {\n      \"input\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000002220000\",\n        \"0000002020000\",\n        \"0000000000000\",\n        \"0000000500000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"output\": [\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000002220000\",\n        \"0000002020000\",\n        \"0002200022000\",\n        \"0002005002000\",\n        \"0002200022000\",\n        \"0000020200000\",\n        \"0000002220000\",\n        \"0000000000000\",\n        \"0000000000000\",\n        \"0000000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    A = [list(row) for row in grid]\\n    for i in range(n):\\n        for j in range(m):\\n            if A[i][j] == '5':\\n                cr, cc = i, j\\n    deltas = [(i-cr, j-cc)\\n              for i in range(n)\\n              for j in range(m)\\n              if A[i][j] == '2']\\n    B = [['0'] * m for _ in range(n)]\\n    B[cr][cc] = '5'\\n    for dr, dc in deltas:\\n        for k in range(4):\\n            r, c = dr, dc\\n            for _ in range(k):\\n                r, c = -c, r\\n            B[cr + r][cc + c] = '2'\\n    return [''.join(row) for row in B]\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a4403a60-52cd-40d3-99af-4f3ac09643ac.json",
    "uuid": "a4403a60-52cd-40d3-99af-4f3ac09643ac",
    "created": "2025-04-27 14:07:03",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,1,0,3,0,0,0,0,0],\n        [0,0,0,0,0,3,0,1,0,3,0,0,0,0,0],\n        [0,0,2,2,0,3,0,1,0,3,2,2,0,0,0],\n        [0,0,2,2,0,3,0,1,0,3,2,2,0,0,0],\n        [0,0,0,0,0,3,0,1,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,1,0,0,3,0,0,0,0],\n        [0,0,0,0,0,0,3,1,3,0,0,0,0,0,0],\n        [0,0,2,2,0,3,0,1,0,3,2,2,0,0,0],\n        [0,2,2,0,3,0,0,1,0,0,3,2,2,0,0],\n        [0,0,0,0,0,3,0,1,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_A(grid):\\n    # shift sequence for Problem A\\n    s = [0, 1, -1, 1, 0, -1, 0, 0, 0]\\n    h, w = len(grid), len(grid[0])\\n    # initialize output with zeros\\n    out = [[0]*w for _ in range(h)]\\n    # copy walls (value == 1)\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                out[i][j] = 1\\n    # shift other objects (value > 1)\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v > 1:\\n                if j < 7:\\n                    nj = j + s[i]\\n                else:\\n                    nj = j - s[i]\\n                out[i][nj] = v\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,3,0,0,0,3,0,1,0,3,0,0,0,3,0],\n        [0,0,3,0,3,0,0,1,0,0,3,0,3,0,0],\n        [0,0,0,3,0,0,0,1,0,0,0,3,0,0,0],\n        [0,0,3,0,3,0,0,1,0,0,3,0,3,0,0],\n        [0,3,0,0,0,3,0,1,0,3,0,0,0,3,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [3,0,0,0,3,0,0,1,0,0,3,0,0,0,3],\n        [0,0,0,3,0,3,0,1,0,3,0,3,0,0,0],\n        [0,0,0,3,0,0,0,1,0,0,0,3,0,0,0],\n        [0,3,0,3,0,0,0,1,0,0,0,3,0,3,0],\n        [0,3,0,0,0,3,0,1,0,3,0,0,0,3,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_B(grid):\\n    # shift sequence for Problem B\\n    s = [0, 0, -1, 1, 0, -1, 0, 0, 0]\\n    h, w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy walls\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] == 1:\\n                out[i][j] = 1\\n    # shift X‐shape (value == 3) or any value > 1\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v > 1:\\n                if j < 7:\\n                    nj = j + s[i]\\n                else:\\n                    nj = j - s[i]\\n                out[i][nj] = v\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a84087c9-aca1-4a2b-be9b-ce7634eca6f1.json",
    "uuid": "a84087c9-aca1-4a2b-be9b-ce7634eca6f1",
    "created": "2025-04-27 08:46:33",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        \"00000000000\",\n        \"00000200000\",\n        \"00000100000\",\n        \"00000100000\",\n        \"00000100000\",\n        \"02111911210\",\n        \"00000100000\",\n        \"00000100000\",\n        \"00000100000\",\n        \"00000200000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"02000200020\",\n        \"00100100100\",\n        \"00010101000\",\n        \"00001110000\",\n        \"02111911210\",\n        \"00001110000\",\n        \"00010101000\",\n        \"00100100100\",\n        \"02000200020\",\n        \"00000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of strings of equal length\\n    h, w = len(grid), len(grid[0])\\n    M = [list(map(int, list(row))) for row in grid]\\n    # find center\\n    ci = cj = None\\n    for i in range(h):\\n        for j in range(w):\\n            if M[i][j] == 9:\\n                ci, cj = i, j\\n                break\\n        if ci is not None:\\n            break\\n    # determine arm length and tip value from the up direction\\n    dx, dy = -1, 0\\n    length = 0\\n    x, y = ci + dx, cj + dy\\n    while 0 <= x < h and 0 <= y < w and M[x][y] == 1:\\n        length += 1\\n        x += dx; y += dy\\n    tip = M[x][y] if 0 <= x < h and 0 <= y < w else 1\\n    # draw diagonal arms\\n    for ddx, ddy in [(-1,-1),(-1,1),(1,-1),(1,1)]:\\n        for k in range(1, length+1):\\n            M[ci + ddx*k][cj + ddy*k] = 1\\n        M[ci + ddx*(length+1)][cj + ddy*(length+1)] = tip\\n    return [''.join(map(str, row)) for row in M]\\n\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"00000400000\",\n        \"00000300000\",\n        \"00000300000\",\n        \"00000300000\",\n        \"04333993340\",\n        \"00000300000\",\n        \"00000300000\",\n        \"00000300000\",\n        \"00000400000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"04000400040\",\n        \"00300300030\",\n        \"00030303000\",\n        \"00003030000\",\n        \"04333993340\",\n        \"00003030000\",\n        \"00030303000\",\n        \"00300300030\",\n        \"04000400040\",\n        \"00000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of strings of equal length\\n    h, w = len(grid), len(grid[0])\\n    M = [list(map(int, list(row))) for row in grid]\\n    # find center\\n    ci = cj = None\\n    for i in range(h):\\n        for j in range(w):\\n            if M[i][j] == 9:\\n                ci, cj = i, j\\n                break\\n        if ci is not None:\\n            break\\n    # determine arm length and tip value from the up direction\\n    dx, dy = -1, 0\\n    length = 0\\n    x, y = ci + dx, cj + dy\\n    while 0 <= x < h and 0 <= y < w and M[x][y] == 1:\\n        length += 1\\n        x += dx; y += dy\\n    tip = M[x][y] if 0 <= x < h and 0 <= y < w else 1\\n    # draw diagonal arms\\n    for ddx, ddy in [(-1,-1),(-1,1),(1,-1),(1,1)]:\\n        for k in range(1, length+1):\\n            M[ci + ddx*k][cj + ddy*k] = 1\\n        M[ci + ddx*(length+1)][cj + ddy*(length+1)] = tip\\n    return [''.join(map(str, row)) for row in M]\\n\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"00000600000\",\n        \"00000500000\",\n        \"00000500000\",\n        \"00000500000\",\n        \"06555995560\",\n        \"00000500000\",\n        \"00000500000\",\n        \"00000500000\",\n        \"00000600000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"06000600060\",\n        \"00500500050\",\n        \"00050505000\",\n        \"00005050000\",\n        \"06555995560\",\n        \"00005050000\",\n        \"00050505000\",\n        \"00500500050\",\n        \"06000600060\",\n        \"00000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of strings of equal length\\n    h, w = len(grid), len(grid[0])\\n    M = [list(map(int, list(row))) for row in grid]\\n    # find center\\n    ci = cj = None\\n    for i in range(h):\\n        for j in range(w):\\n            if M[i][j] == 9:\\n                ci, cj = i, j\\n                break\\n        if ci is not None:\\n            break\\n    # determine arm length and tip value from the up direction\\n    dx, dy = -1, 0\\n    length = 0\\n    x, y = ci + dx, cj + dy\\n    while 0 <= x < h and 0 <= y < w and M[x][y] == 1:\\n        length += 1\\n        x += dx; y += dy\\n    tip = M[x][y] if 0 <= x < h and 0 <= y < w else 1\\n    # draw diagonal arms\\n    for ddx, ddy in [(-1,-1),(-1,1),(1,-1),(1,1)]:\\n        for k in range(1, length+1):\\n            M[ci + ddx*k][cj + ddy*k] = 1\\n        M[ci + ddx*(length+1)][cj + ddy*(length+1)] = tip\\n    return [''.join(map(str, row)) for row in M]\\n\"\n    },\n    {\n      \"input\": [\n        \"00000000000\",\n        \"00000800000\",\n        \"00000700000\",\n        \"00000700000\",\n        \"00000700000\",\n        \"08777997780\",\n        \"00000700000\",\n        \"00000700000\",\n        \"00000700000\",\n        \"00000800000\",\n        \"00000000000\"\n      ],\n      \"output\": [\n        \"00000000000\",\n        \"08000800080\",\n        \"00700700070\",\n        \"00070707000\",\n        \"00007070000\",\n        \"08777997780\",\n        \"00007070000\",\n        \"00070707000\",\n        \"00700700070\",\n        \"08000800080\",\n        \"00000000000\"\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of strings of equal length\\n    h, w = len(grid), len(grid[0])\\n    M = [list(map(int, list(row))) for row in grid]\\n    # find center\\n    ci = cj = None\\n    for i in range(h):\\n        for j in range(w):\\n            if M[i][j] == 9:\\n                ci, cj = i, j\\n                break\\n        if ci is not None:\\n            break\\n    # determine arm length and tip value from the up direction\\n    dx, dy = -1, 0\\n    length = 0\\n    x, y = ci + dx, cj + dy\\n    while 0 <= x < h and 0 <= y < w and M[x][y] == 1:\\n        length += 1\\n        x += dx; y += dy\\n    tip = M[x][y] if 0 <= x < h and 0 <= y < w else 1\\n    # draw diagonal arms\\n    for ddx, ddy in [(-1,-1),(-1,1),(1,-1),(1,1)]:\\n        for k in range(1, length+1):\\n            M[ci + ddx*k][cj + ddy*k] = 1\\n        M[ci + ddx*(length+1)][cj + ddy*(length+1)] = tip\\n    return [''.join(map(str, row)) for row in M]\\n\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a906eb4d-0f80-48f2-b6b7-919e35ff4ceb.json",
    "uuid": "a906eb4d-0f80-48f2-b6b7-919e35ff4ceb",
    "created": "2025-04-28 00:53:41",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,0,0,0,0,0,0,0],\n        [0,1,0,0,0,0,0,0],\n        [0,0,1,0,0,2,0,0],\n        [0,0,0,1,2,2,2,0],\n        [0,0,0,0,0,2,0,0],\n        [0,3,3,0,0,0,0,0],\n        [0,3,3,0,0,4,0,0],\n        [0,0,0,0,4,4,0,0]\n      ],\n      \"output\": [\n        [1,0,0,0,0,2,0],\n        [0,1,0,0,2,2,2],\n        [0,0,1,0,0,2,0],\n        [0,0,0,1,0,0,0],\n        [0,4,0,0,0,3,3],\n        [4,4,0,0,0,3,3]\n      ],\n      \"code\": \"def transform(grid):\\n    # 1) scan row‑major for objects 1–4\\n    objs = {}\\n    for r, row in enumerate(grid):\\n        for c, v in enumerate(row):\\n            if v in (1,2,3,4): objs.setdefault(v, []).append((r,c))\\n    # 2) extract shapes and sizes\\n    shapes, sizes = {}, {}\\n    for oid, cells in sorted(objs.items()):\\n        rs = [r for r,c in cells]; cs = [c for r,c in cells]\\n        r0, c0 = min(rs), min(cs)\\n        shape = [(r-r0, c-c0) for r,c in cells]\\n        shapes[oid] = shape\\n        h = max(r-r0 for r,c in cells) + 1\\n        w = max(c-c0 for r,c in cells) + 1\\n        sizes[oid] = (h, w)\\n    # 3) compute output grid size\\n    h1,w1 = sizes[1]; h2,w2 = sizes[2]\\n    h3,w3 = sizes[3]; h4,w4 = sizes[4]\\n    top = max(h1, h2); bot = max(h4, h3)\\n    left = max(w1, w4); right = max(w2, w3)\\n    H, W = top + bot, left + right\\n    res = [[0]*W for _ in range(H)]\\n    # 4) place shapes at corners clockwise\\n    offs = {1:(0,0), 2:(0,left), 3:(top,left), 4:(top,0)}\\n    for oid, shape in shapes.items():\\n        orow, ocol = offs[oid]\\n        for dr, dc in shape:\\n            res[orow+dr][ocol+dc] = oid\\n    return res\\n\\n# run on the input grid\\ngrid = [\\n    [1,0,0,0,0,0,0,0],\\n    [0,1,0,0,0,0,0,0],\\n    [0,0,1,0,0,2,0,0],\\n    [0,0,0,1,2,2,2,0],\\n    [0,0,0,0,0,2,0,0],\\n    [0,3,3,0,0,0,0,0],\\n    [0,3,3,0,0,4,0,0],\\n    [0,0,0,0,4,4,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,0,0,0,0,0],\n        [2,0,0,0,0,0,0,0,0],\n        [2,0,0,0,0,0,0,0,0],\n        [2,2,0,0,0,3,0,0,0],\n        [0,0,0,4,0,0,3,0,0],\n        [0,0,4,4,4,0,0,3,0],\n        [0,0,0,4,0,0,0,0,0]\n      ],\n      \"output\": [\n        [1,1,1,0,2,0],\n        [0,1,0,0,2,0],\n        [0,0,0,0,2,2],\n        [0,4,0,3,0,0],\n        [4,4,4,0,3,0],\n        [0,4,0,0,0,3]\n      ],\n      \"code\": \"def transform(grid):\\n    # 1) scan row‑major for objects 1–4\\n    objs = {}\\n    for r, row in enumerate(grid):\\n        for c, v in enumerate(row):\\n            if v in (1,2,3,4): objs.setdefault(v, []).append((r,c))\\n    # 2) extract shapes and sizes\\n    shapes, sizes = {}, {}\\n    for oid, cells in sorted(objs.items()):\\n        rs = [r for r,c in cells]; cs = [c for r,c in cells]\\n        r0, c0 = min(rs), min(cs)\\n        shape = [(r-r0, c-c0) for r,c in cells]\\n        shapes[oid] = shape\\n        h = max(r-r0 for r,c in cells) + 1\\n        w = max(c-c0 for r,c in cells) + 1\\n        sizes[oid] = (h, w)\\n    # 3) compute output grid size\\n    h1,w1 = sizes[1]; h2,w2 = sizes[2]\\n    h3,w3 = sizes[3]; h4,w4 = sizes[4]\\n    top = max(h1, h2); bot = max(h4, h3)\\n    left = max(w1, w4); right = max(w2, w3)\\n    H, W = top + bot, left + right\\n    res = [[0]*W for _ in range(H)]\\n    # 4) place shapes at corners clockwise\\n    offs = {1:(0,0), 2:(0,left), 3:(top,left), 4:(top,0)}\\n    for oid, shape in shapes.items():\\n        orow, ocol = offs[oid]\\n        for dr, dc in shape:\\n            res[orow+dr][ocol+dc] = oid\\n    return res\\n\\n# run on the input grid\\ngrid = [\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,1,1,1,0,0,0,0],\\n    [0,0,0,1,0,0,0,0,0],\\n    [2,0,0,0,0,0,0,0,0],\\n    [2,0,0,0,0,0,0,0,0],\\n    [2,2,0,0,0,3,0,0,0],\\n    [0,0,0,4,0,0,3,0,0],\\n    [0,0,4,4,4,0,0,3,0],\\n    [0,0,0,4,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a9d36091-71b3-4314-88a4-e1a935267b56.json",
    "uuid": "a9d36091-71b3-4314-88a4-e1a935267b56",
    "created": "2025-04-27 22:39:20",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,7,0,1,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,8,5,5,5,4,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,6,0,2,0,9,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,9,0,4,0,8,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,7,5,5,5,2,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,3,0,0,0,5,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # Positions of the 8-ring around the central 3×3 block in a 9×9 grid\\n    ring = [(2,2),(2,4),(2,6),(4,6),(6,6),(6,4),(6,2),(4,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    # Rotate one step clockwise and add 1 mod 10\\n    for i,(r,c) in enumerate(ring):\\n        prev = vals[i-1] if i>0 else vals[-1]\\n        out[r][c] = (prev + 1) % 10\\n    return out\\n\\n# Example:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,9,0,4,0,5,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,3,5,5,5,2,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,1,0,8,0,7,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,0,0,5,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,2,5,5,5,6,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,9,0,8,0,3,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    ring = [(2,2),(2,4),(2,6),(4,6),(6,6),(6,4),(6,2),(4,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    for i,(r,c) in enumerate(ring):\\n        prev = vals[i-1] if i>0 else vals[-1]\\n        out[r][c] = (prev + 1) % 10\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,3,0,4,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,9,5,5,5,5,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,8,0,7,0,6,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,4,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,9,5,5,5,5,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,8,0,7,0,6,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    ring = [(2,2),(2,4),(2,6),(4,6),(6,6),(6,4),(6,2),(4,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    for i,(r,c) in enumerate(ring):\\n        prev = vals[i-1] if i>0 else vals[-1]\\n        out[r][c] = (prev + 1) % 10\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,8,0,7,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,3,5,5,5,1,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,9,0,2,0,5,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,4,0,5,0,9,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,0,5,5,5,8,0,0],\n        [0,0,0,5,5,5,0,0,0],\n        [0,0,3,0,6,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    ring = [(2,2),(2,4),(2,6),(4,6),(6,6),(6,4),(6,2),(4,2)]\\n    out = [row[:] for row in grid]\\n    vals = [grid[r][c] for r,c in ring]\\n    for i,(r,c) in enumerate(ring):\\n        prev = vals[i-1] if i>0 else vals[-1]\\n        out[r][c] = (prev + 1) % 10\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "b4423b38-bf64-4159-87d6-2dc665ac6a41.json",
    "uuid": "b4423b38-bf64-4159-87d6-2dc665ac6a41",
    "created": "2025-04-27 14:23:23",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "af976afb-6d49-4df5-bd37-8426f7f8f7a9.json",
    "uuid": "af976afb-6d49-4df5-bd37-8426f7f8f7a9",
    "created": "2025-04-27 10:22:26",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,4,4,4,0,0,0,0,0,0,0,6,0,0],\n                [0,0,4,4,4,0,0,0,0,0,0,6,6,6,0],\n                [0,0,0,0,0,0,0,0,0,0,6,0,0,6,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [3,0,0,0,0,0,0,0,0,0,0,0,0,0,3],\n                [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,4,4,4,0,0,2,0,0,0,0,6,0,0],\n                [0,0,4,4,4,0,0,2,0,0,0,6,6,6,0],\n                [0,0,0,0,0,0,0,2,0,0,6,0,0,6,0],\n                [0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n                [3,0,0,0,0,0,0,2,0,0,0,0,0,0,3],\n                [3,3,3,3,3,3,3,5,3,3,3,3,3,3,3]\n            ],\n            \"code\": \"def simulate(grid):\\n    # Copy input grid to output\\n    out = [row.copy() for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    # Find two '5's: arrow start and direction\\n    positions = [(r, c) for r in range(h) for c in range(w) if grid[r][c] == 5]\\n    positions.sort()\\n    (y0, x0), (y1, x1) = positions\\n    dy, dx = y1 - y0, x1 - x0\\n    # Remove the second '5'\\n    y, x = y1, x1\\n    out[y][x] = 0\\n    # Move until hitting a wall (3)\\n    while True:\\n        ny, nx = y + dy, x + dx\\n        # If next is out of bounds or is wall, place final '5' and stop\\n        if not (0 <= ny < h and 0 <= nx < w) or grid[ny][nx] == 3:\\n            out[ny][nx] = 5\\n            break\\n        # Otherwise mark path\\n        out[ny][nx] = 2\\n        y, x = ny, nx\\n    return out\\n\\n# Example usage:\\n# result = simulate(input_grid)\\n# print(result)\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,0,0,6,6,6,0,0,0,0,0,0,0,0],\n                [0,0,0,6,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,4,4,4,4,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [3,0,0,0,0,0,0,0,0,0,0,0,0,0,3],\n                [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,5,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,6,6,6,2,0,0,0,0,0,0,0],\n                [0,0,0,6,0,0,0,2,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,2,4,4,4,4,0,0,0],\n                [0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],\n                [3,0,0,0,0,0,0,2,0,0,0,0,0,0,3],\n                [3,3,3,3,3,3,3,5,3,3,3,3,3,3,3]\n            ],\n            \"code\": \"def simulate(grid):\\n    # Copy input grid to output\\n    out = [row.copy() for row in grid]\\n    h, w = len(grid), len(grid[0])\\n    # Find two '5's: arrow start and direction\\n    positions = [(r, c) for r in range(h) for c in range(w) if grid[r][c] == 5]\\n    positions.sort()\\n    (y0, x0), (y1, x1) = positions\\n    dy, dx = y1 - y0, x1 - x0\\n    # Remove the second '5'\\n    y, x = y1, x1\\n    out[y][x] = 0\\n    # Move until hitting a wall (3)\\n    while True:\\n        ny, nx = y + dy, x + dx\\n        # If next is out of bounds or is wall, place final '5' and stop\\n        if not (0 <= ny < h and 0 <= nx < w) or grid[ny][nx] == 3:\\n            out[ny][nx] = 5\\n            break\\n        # Otherwise mark path\\n        out[ny][nx] = 2\\n        y, x = ny, nx\\n    return out\\n\\n# Example usage:\\n# result = simulate(input_grid)\\n# print(result)\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "bc98e6dd-d38f-42d5-933f-34fb8f3bfb2c.json",
    "uuid": "bc98e6dd-d38f-42d5-933f-34fb8f3bfb2c",
    "created": "2025-04-28 01:41:40",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,3,3,3,3,3,3,0],\n        [0,3,0,0,2,0,0,3,0],\n        [0,3,0,1,0,1,0,3,0],\n        [0,3,2,0,0,0,2,3,0],\n        [0,3,0,1,0,1,0,3,0],\n        [0,3,0,0,2,0,0,3,0],\n        [0,3,3,3,3,3,3,3,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [4,0,0,0,0,0,0,0,4],\n        [0,3,3,3,3,3,3,3,0],\n        [0,3,0,0,2,0,0,3,0],\n        [0,3,0,1,0,1,0,3,0],\n        [0,3,2,0,0,0,2,3,0],\n        [0,3,0,1,0,1,0,3,0],\n        [0,3,0,0,2,0,0,3,0],\n        [0,3,3,3,3,3,3,3,0],\n        [4,0,0,0,0,0,0,0,4]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    c = n // 2\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            r = max(abs(i - c), abs(j - c))\\n            # r=4 ring uses diagonal positions for '4'\\n            if r == 4 and abs(i - c) == abs(j - c):\\n                out[i][j] = 4\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\\n\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,2,0,0,0,2,3,0,0],\n        [0,0,3,0,0,1,0,0,3,0,0],\n        [0,0,3,0,1,0,1,0,3,0,0],\n        [0,0,3,0,0,1,0,0,3,0,0],\n        [0,0,3,2,0,0,0,2,3,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,3,2,0,0,0,2,3,0,0],\n        [0,0,3,0,0,1,0,0,3,0,0],\n        [0,4,3,0,1,0,1,0,4,0,0],\n        [0,0,3,0,0,1,0,0,3,0,0],\n        [0,0,3,2,0,0,0,2,3,0,0],\n        [0,0,3,3,3,3,3,3,3,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    c = n // 2\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            r = max(abs(i - c), abs(j - c))\\n            # r=4 ring uses plus shape for '4'\\n            if r == 4 and (i == c or j == c):\\n                out[i][j] = 4\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\\n\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "79db5ce5-3248-447c-aa22-e8f6fef29337.json",
    "uuid": "79db5ce5-3248-447c-aa22-e8f6fef29337",
    "created": "2025-04-27 10:00:15",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "bdfd5421-cb9c-4798-b613-debd701492fd.json",
    "uuid": "bdfd5421-cb9c-4798-b613-debd701492fd",
    "created": "2025-04-27 09:43:40",
    "description": ""
  },
  {
    "filename": "bf3b4562-f57d-4b3f-a888-a3293ff1a8a1.json",
    "uuid": "bf3b4562-f57d-4b3f-a888-a3293ff1a8a1",
    "created": "2025-04-27 13:49:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,1,0,1,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,1,0,1,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import math\\n\\ndef transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    cy, cx = h//2, w//2\\n    out = [[0]*w for _ in range(h)]\\n    points = [(r, c, grid[r][c]) for r in range(h) for c in range(w) if grid[r][c] != 0]\\n    for r, c, val in points:\\n        dy = cy - r\\n        dx = c - cx\\n        for k in range(6):\\n            theta = math.pi/3 * k\\n            dx2 = dx * math.cos(theta) - dy * math.sin(theta)\\n            dy2 = dx * math.sin(theta) + dy * math.cos(theta)\\n            r2 = round(cy - dy2)\\n            c2 = round(cx + dx2)\\n            if 0 <= r2 < h and 0 <= c2 < w:\\n                out[r2][c2] = val\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,1,0,0,0],\n        [0,0,0,0,0,1,1,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,1,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\""
  },
  {
    "filename": "c0dd4290-b6f3-4aa8-8b89-b44e943d9546.json",
    "uuid": "c0dd4290-b6f3-4aa8-8b89-b44e943d9546",
    "created": "2025-04-28 02:18:07",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "c0df670c-84b8-4bce-990a-69524f68a6f1.json",
    "uuid": "c0df670c-84b8-4bce-990a-69524f68a6f1",
    "created": "2025-04-27 02:55:05",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,3,0,0,3,0,0,3],\n        [0,0,0,4,4,0,0,5,5,5,0,0],\n        [0,6,6,6,6,6,0,5,5,5,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,6,0,1,1,0,0,0,0,0,0],\n        [0,0,0,0,1,1,0,0,0,0,0,0],\n        [0,0,6,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,4,4,0,0,5,5,5,0,0],\n        [0,6,6,6,6,6,0,5,5,5,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,6,0,1,1,2,2,2,2,0,0],\n        [0,0,0,0,1,1,0,0,0,0,0,0],\n        [0,0,6,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,3,0,0,3,0,0,3]\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of lists of ints\\n    H, W = len(grid), len(grid[0])\\n    # start with all zeros\\n    out = [[0]*W for _ in range(H)]\\n    # copy fixed objects (not lever=2, not rain=3)\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] not in (2,3):\\n                out[r][c] = grid[r][c]\\n    # locate pivot cells (value 1)\\n    pivots = [(r,c) for r in range(H) for c in range(W) if grid[r][c]==1]\\n    rs = [r for r,c in pivots]; cs = [c for r,c in pivots]\\n    r0, r1 = min(rs), max(rs)\\n    c0, c1 = min(cs), max(cs)\\n    center_r = (r0 + r1)/2\\n    center_c = (c0 + c1)/2\\n    # rotate lever cells (value 2) around pivot center by 90° CW\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                dr = r - center_r; dc = c - center_c\\n                nr = center_r - dc; nc = center_c + dr\\n                nr, nc = int(round(nr)), int(round(nc))\\n                out[nr][nc] = 2\\n    # drop rain cells (value 3) to bottom row, same column\\n    rain_cols = [c for r in range(H) for c in range(W) if grid[r][c]==3]\\n    for c in rain_cols:\\n        out[H-1][c] = 3\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,3,0,0,3,0,0],\n        [0,0,5,5,0,0,0,0,0,0,0,0],\n        [0,0,5,5,0,0,0,0,0,4,4,0],\n        [0,0,0,0,0,1,1,0,0,4,4,0],\n        [0,0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,6,6,6,0],\n        [0,0,0,0,0,2,0,0,6,6,6,0],\n        [0,0,0,0,0,2,0,0,6,6,6,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,5,0,0,0,0,0,0,0,0],\n        [0,0,5,5,0,0,0,0,0,4,4,0],\n        [0,0,0,0,0,1,1,2,2,2,2,0],\n        [0,0,0,0,0,1,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,6,6,6,0],\n        [0,0,0,0,0,2,0,0,6,6,6,0],\n        [0,0,0,0,0,2,0,0,6,6,6,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,3,0,0,0,3,0,0,3,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of lists of ints\\n    H, W = len(grid), len(grid[0])\\n    # start with all zeros\\n    out = [[0]*W for _ in range(H)]\\n    # copy fixed objects (not lever=2, not rain=3)\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] not in (2,3):\\n                out[r][c] = grid[r][c]\\n    # locate pivot cells (value 1)\\n    pivots = [(r,c) for r in range(H) for c in range(W) if grid[r][c]==1]\\n    rs = [r for r,c in pivots]; cs = [c for r,c in pivots]\\n    r0, r1 = min(rs), max(rs)\\n    c0, c1 = min(cs), max(cs)\\n    center_r = (r0 + r1)/2\\n    center_c = (c0 + c1)/2\\n    # rotate lever cells (value 2) around pivot center by 90° CW\\n    for r in range(H):\\n        for c in range(W):\\n            if grid[r][c] == 2:\\n                dr = r - center_r; dc = c - center_c\\n                nr = center_r - dc; nc = center_c + dr\\n                nr, nc = int(round(nr)), int(round(nc))\\n                out[nr][nc] = 2\\n    # drop rain cells (value 3) to bottom row, same column\\n    rain_cols = [c for r in range(H) for c in range(W) if grid[r][c]==3]\\n    for c in rain_cols:\\n        out[H-1][c] = 3\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "c5a63402-057a-4494-8922-aa230336ffdf.json",
    "uuid": "c5a63402-057a-4494-8922-aa230336ffdf",
    "created": "2025-04-27 14:48:12",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,5,5,5,0,0,0],\n        [0,0,0,5,0,0,5,0,0,0],\n        [0,0,6,5,0,0,5,0,0,0],\n        [0,0,0,5,0,0,5,0,0,0],\n        [0,0,0,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,5,5,5,0,0,0],\n        [0,0,0,5,9,9,5,0,0,0],\n        [0,0,6,5,9,9,5,0,0,0],\n        [0,0,0,5,9,9,5,0,0,0],\n        [0,0,0,5,5,5,5,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# Spark‑U‑shape fill\\ndef fill_container(grid, border, spark):\\n    R, C = len(grid), len(grid[0])\\n    sparks = [(i,j) for i in range(R) for j in range(C) if grid[i][j]==spark]\\n    # find border cells\\n    cells = [(i,j) for i in range(R) for j in range(C) if grid[i][j]==border]\\n    if not cells or not sparks: return grid\\n    rs = [i for i,_ in cells]; cs = [j for _,j in cells]\\n    r0, r1, c0, c1 = min(rs), max(rs), min(cs), max(cs)\\n    out = [row[:] for row in grid]\\n    for i in range(r0+1, r1):\\n        for j in range(c0+1, c1):\\n            if out[i][j]==0:\\n                out[i][j]=9\\n    return out\\n\\n# run\\ngrid = \" + \"tasks[0]['input']\" + \"\\nout = fill_container(grid,5,6)\\nprint(out)\\n```\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,4,0,0,0,0,0,0,4,0,0],\n        [0,0,4,0,2,2,2,2,0,4,0,0],\n        [0,0,4,0,2,0,0,2,8,4,0,0],\n        [0,0,4,0,2,2,2,2,0,4,0,0],\n        [0,0,4,0,0,0,0,0,0,4,0,0],\n        [0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,4,0,0,0,0,0,0,4,0,0],\n        [0,0,4,0,2,2,2,2,0,4,0,0],\n        [0,0,4,0,2,9,9,2,8,4,0,0],\n        [0,0,4,0,2,2,2,2,0,4,0,0],\n        [0,0,4,0,0,0,0,0,0,4,0,0],\n        [0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"```python\\n# Spark‑Nested‑Box fill\\ndef fill_inner_box(grid, outer, inner, spark):\\n    R,C = len(grid), len(grid[0])\\n    # find spark next to inner border\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j]==spark:\\n                for di,dj in ((1,0),(-1,0),(0,1),(0,-1)):\\n                    ni,nj = i+di,j+dj\\n                    if 0<=ni<R and 0<=nj<C and grid[ni][nj]==inner:\\n                        # fill inner bounding box\\n                        cells = [(r,c) for r in range(R) for c in range(C) if g"
  },
  {
    "filename": "c751eb3a-e581-4308-a602-e23c7c5838f2.json",
    "uuid": "c751eb3a-e581-4308-a602-e23c7c5838f2",
    "created": "2025-04-28 02:16:57",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0],\n        [0,2,0,0,4,0,0],\n        [0,0,2,0,0,4,0],\n        [0,0,0,1,0,0,0],\n        [0,3,0,0,5,0,0],\n        [0,0,3,0,0,5,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0],\n        [0,0,4,0,0,5,0],\n        [0,4,0,0,5,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,2,0,0,3,0],\n        [0,2,0,0,3,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef rotate_cw(grid, hub):\\n    R,C = len(grid), len(grid[0])\\n    out = [[0]*C for _ in range(R)]\\n    hr,hc = hub\\n    out[hr][hc] = 1\\n    for r in range(R):\\n        for c in range(C):\\n            v = grid[r][c]\\n            if v!=0 and (r,c)!=(hr,hc):\\n                dr, dc = r-hr, c-hc\\n                r2 = hr + dc\\n                c2 = hc - dr\\n                out[r2][c2] = v\\n    return out\\n\\nif __name__=='__main__':\\n    inp = [\\n        [0,0,0,0,0,0,0],\\n        [0,2,0,0,4,0,0],\\n        [0,0,2,0,0,4,0],\\n        [0,0,0,1,0,0,0],\\n        [0,3,0,0,5,0,0],\\n        [0,0,3,0,0,5,0],\\n        [0,0,0,0,0,0,0]\\n    ]\\n    hub = (3,3)\\n    out = rotate_cw(inp, hub)\\n    from pprint import pprint; pprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,7,0,0],\n        [0,0,7,0,0],\n        [6,6,1,6,6],\n        [0,0,0,0,0],\n        [0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,6,0,0],\n        [0,0,6,0,0],\n        [7,7,1,0,0],\n        [0,0,6,0,0],\n        [0,0,6,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef rotate_cw(grid, hub):\\n    R,C = len(grid), len(grid[0])\\n    out = [[0]*C for _ in range(R)]\\n    hr,hc = hub\\n    out[hr][hc] = 1\\n    for r in range(R):\\n        for c in range(C):\\n            v = grid[r][c]\\n            if v!=0 and (r,c)!=(hr,hc):\\n                dr, dc = r-hr, c-hc\\n                r2 = hr + dc\\n                c2 = hc - dr\\n                out[r2][c2] = v\\n    return out\\n\\nif __name__=='__main__':\\n    inp = [\\n        [0,0,7,0,0],\\n        [0,0,7,0,0],\\n        [6,6,1,6,6],\\n        [0,0,0,0,0],\\n        [0,0,0,0,0]\\n    ]\\n    hub = (2,2)\\n    out = rotate_cw(inp, hub)\\n    from pprint import pprint; pprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,8,0,9,0,0],\n        [8,0,8,9,0,0],\n        [0,8,0,1,0,0],\n        [0,0,0,9,0,0],\n        [0,0,0,9,0,0],\n        [0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,9,9,1,9,9],\n        [0,0,8,0,0,0],\n        [0,8,0,8,0,0],\n        [0,0,8,0,0,0]\n      ],\n      \"code\": \"import copy\\n\\ndef rotate_cw(grid, hub):\\n    R,C = len(grid), len(grid[0])\\n    out = [[0]*C for _ in range(R)]\\n    hr,hc = hub\\n    out[hr][hc] = 1\\n    for r in range(R):\\n        for c in range(C):\\n            v = grid[r][c]\\n            if v!=0 and (r,c)!=(hr,hc):\\n                dr, dc = r-hr, c-hc\\n                r2 = hr + dc\\n                c2 = hc - dr\\n                out[r2][c2] = v\\n    return out\\n\\nif __name__=='__main__':\\n    inp = [\\n        [0,8,0,9,0,0],\\n        [8,0,8,9,0,0],\\n        [0,8,0,1,0,0],\\n        [0,0,0,9,0,0],\\n        [0,0,0,9,0,0],\\n        [0,0,0,0,0,0]\\n    ]\\n    hub = (2,3)\\n    out = rotate_cw(inp, hub)\\n    from pprint import pprint; pprint(out)\"\n    },\n    {\n      \"input\": [\n        [0,0,4,0,0],\n        [0,0,4,0,0],\n        [3,0,1,0,5],\n        [3,0,0,0,5],\n        [3,0,0,0,5]\n      ],\n      \"output\": [\n        [0,0,5,5,5],\n        [0,0,0,0,0],\n        [4,4,1,0,0],\n        [0,0,0,0,0],\n        [0,0,3,3,3]\n      ],\n      \"code\": \"import copy\\n\\ndef rotate_cw(grid, hub):\\n    R,C = len(grid), len(grid[0])\\n    out = [[0]*C for _ in range(R)]\\n    hr,hc = hub\\n    out[hr][hc] = 1\\n    for r in range(R):\\n        for c in range(C):\\n            v = grid[r][c]\\n            if v!=0 and (r,c)!=(hr,hc):\\n                dr, dc = r-hr, c-hc\\n                r2 = hr + dc\\n                c2 = hc - dr\\n                out[r2][c2] = v\\n    return out\\n\\nif __name__=='__main__':\\n    inp = [\\n        [0,0,4,0,0],\\n        [0,0,4,0,0],\\n        [3,0,1,0,5],\\n        [3,0,0,0,5],\\n        [3,0,0,0,5]\\n    ]\\n    hub = (2,2)\\n    out = rotate_cw(inp, hub)\\n    from pprint import pprint; pprint(out)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "dfc73eba-03fc-415a-9bd0-b1d6ad2a7905.json",
    "uuid": "dfc73eba-03fc-415a-9bd0-b1d6ad2a7905",
    "created": "2025-04-27 09:11:19",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,1,1,0,0,0,2,0,0],\n        [0,1,0,0,0,2,2,0,0],\n        [0,1,1,0,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,3,0],\n        [0,0,0,0,0,3,3,3,0],\n        [0,0,0,4,4,4,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,1,0,0,0,0,0,3,0],\n        [1,1,1,0,0,0,0,3,0],\n        [0,1,0,0,0,0,0,3,0],\n        [0,0,0,0,4,0,0,0,0],\n        [0,0,0,4,4,4,0,0,0],\n        [0,0,0,0,4,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    result = [[0]*n for _ in range(n)]\\n    # positions of 3×3 blocks: TL, TR, BR, BL\\n    blocks = [(0,0), (0,n-3), (n-3,n-3), (n-3,0)]\\n    # target centers: left, top, right, bottom\\n    targets = [(3,0), (0,3), (3,6), (6,3)]\\n    for (r0,c0), (tr,tc) in zip(blocks, targets):\\n        # extract 3×3 block\\n        block = [grid[r0+i][c0:c0+3] for i in range(3)]\\n        # rotate CCW 90°: new[i][j] = block[j][2-i]\\n        rot = [[block[j][2-i] for j in range(3)] for i in range(3)]\\n        # place into result\\n        for i in range(3):\\n            for j in range(3):\\n                if rot[i][j] != 0:\\n                    result[tr+i][tc+j] = rot[i][j]\\n    return result\\n\\n# run\\ngrid = [\\n    [0,1,1,0,0,0,2,0,0],\\n    [0,1,0,0,0,2,2,0,0],\\n    [0,1,1,0,0,0,2,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,3,3,0],\\n    [0,0,0,0,0,3,3,3,0],\\n    [0,0,0,4,4,4,0,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,1,0,0,0,2,2,0],\n        [0,1,0,0,0,2,2,0,0],\n        [0,0,1,0,0,0,2,2,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,4,4,0,0,0,3,3,0],\n        [0,0,4,0,0,0,3,3,0],\n        [0,0,4,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,2,2,0,0,0,0],\n        [0,0,0,2,0,0,0,0,0],\n        [0,0,0,2,2,0,0,0,0],\n        [0,1,0,0,0,0,0,0,3],\n        [1,0,1,0,0,0,0,3,0],\n        [0,1,0,0,0,0,0,0,3],\n        [0,0,0,0,4,0,0,0,0],\n        [0,0,0,4,0,0,0,0,0],\n        [0,0,0,4,4,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    result = [[0]*n for _ in range(n)]\\n    blocks = [(0,0), (0,n-3), (n-3,n-3), (n-3,0)]\\n    targets = [(3,0), (0,3), (3,6), (6,3)]\\n    for (r0,c0), (tr,tc) in zip(blocks, targets):\\n        block = [grid[r0+i][c0:c0+3] for i in range(3)]\\n        rot = [[block[j][2-i] for j in range(3)] for i in range(3)]\\n        for i in range(3):\\n            for j in range(3):\\n                if rot[i][j] != 0:\\n                    result[tr+i][tc+j] = rot[i][j]\\n    return result\\n\\ngrid = [\\n    [0,0,1,0,0,0,2,2,0],\\n    [0,1,0,0,0,2,2,0,0],\\n    [0,0,1,0,0,0,2,2,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,4,4,0,0,0,3,3,0],\\n    [0,0,4,0,0,0,3,3,0],\\n    [0,0,4,0,0,0,0,0,0]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,0,0,0,2,2],\n        [0,0,1,0,1,0,2,2,0],\n        [0,0,0,1,0,0,0,2,2],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,0,3,0,3,0,0,0,0],\n        [0,3,0,3,0,3,0,0,0],\n        [0,0,0,0,0,0,4,4,4]\n      ],\n      \"output\": [\n        [0,0,0,0,2,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,2,2,0,0,0],\n        [0,0,1,0,0,0,0,0,3],\n        [0,1,1,1,0,0,0,3,0],\n        [0,0,1,0,0,0,0,0,3],\n        [0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,4,4,0,0,0],\n        [0,0,0,0,0,4,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    result = [[0]*n for _ in range(n)]\\n    blocks = [(0,0), (0,n-3), (n-3,n-3), (n-3,0)]\\n    targets = [(3,0), (0,3), (3,6), (6,3)]\\n    for (r0,c0), (tr,tc) in zip(blocks, targets):\\n        block = [grid[r0+i][c0:c0+3] for i in range(3)]\\n        rot = [[block[j][2-i] for j in range(3)] for i in range(3)]\\n        for i in range(3):\\n            for j in range(3):\\n                if rot[i][j] != 0:\\n                    result[tr+i][tc+j] = rot[i][j]\\n    return result\\n\\ngrid = [\\n    [0,0,0,1,0,0,0,2,2],\\n    [0,0,1,0,1,0,2,2,0],\\n    [0,0,0,1,0,0,0,2,2],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [3,0,3,0,3,0,0,0,0],\\n    [0,3,0,3,0,3,0,0,0],\\n    [0,0,0,0,0,0,4,4,4]\\n]\\nprint(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [1,1,0,0,0,0,0,2,0],\n        [0,1,1,0,0,0,2,2,0],\n        [0,0,1,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,3,0,0,0,0],\n        [0,0,0,3,3,3,0,0,0],\n        [0,0,0,0,3,0,4,4,4]\n      ],\n      \"output\": [\n        [0,0,0,2,0,0,0,0,0],\n        [0,0,0,2,2,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,1,0,0,0,0,0,0,3],\n        [1,1,1,0,0,0,0,3,0],\n        [0,1,0,0,0,0,0,0,3],\n        [0,0,0,0,0,4,0,0,0],\n        [0,0,0,0,4,4,0,0,0],\n        [0,0,0,0,0,4,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    result = [[0]*n for _ in range(n)]\\n    blocks = [(0,0), (0,n-3), (n-3,n-3), (n-3,0)]\\n    targets = [(3,0), (0,3), (3,6), (6,3)]\\n    for (r0,c0), (tr,tc) in zip(blocks, targets):\\n        block = [grid[r0+i][c0:c0+3] for i in range(3)]\\n        rot = [[block[j][2-i] for j in range(3)] for i in range(3)]\\n        for i in range(3):\\n            for j in range(3):\\n                if rot[i][j] != 0:\\n                    result[tr+i][tc+j] = rot[i][j]\\n    return result\\n\\ngrid = [\\n    [1,1,0,0,0,0,0,2,0],\\n    [0,1,1,0,0,0,2,2,0],\\n    [0,0,1,0,0,0,0,2,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,3,0,0,0,0],\\n    [0,0,0,3,3,3,0,0,0],\\n    [0,0,0,0,3,0,4,4,4]\\n]\\nprint(transform(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e25dc2b2-73b4-4f03-957c-c724822aec46.json",
    "uuid": "e25dc2b2-73b4-4f03-957c-c724822aec46",
    "created": "2025-04-27 08:59:23",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,2,2,2,0,3,3,3,0,1],\n        [1,0,2,2,2,0,3,3,3,0,1],\n        [1,0,2,2,2,0,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,6,6,6,6,0,0,0,1],\n        [1,0,0,6,6,6,6,0,0,0,1],\n        [1,0,5,5,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,3,3,3,0,2,2,2,0,1],\n        [1,0,3,3,3,0,2,2,2,0,1],\n        [1,0,3,3,3,0,2,2,2,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,6,6,6,6,0,0,1],\n        [1,0,5,5,6,6,6,6,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    # prepare empty output\\n    out = [[0]*w for _ in range(h)]\\n    # copy border and non-mirrored objects\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] not in (2,3,6,5):\\n                out[i][j] = grid[i][j]\\n    # mirror circle(2)<->triangle(3) and square(6)\\n    mapping = {2:3, 3:2, 6:6}\\n    for i in range(h):\\n        for j in range(w):\\n            c = grid[i][j]\\n            if c in mapping:\\n                out[i][w-1-j] = mapping[c]\\n    # move lips(5) up one row\\n    lip_row = 8  # zero-based\\n    for j in range(w):\\n        if grid[lip_row][j] == 5:\\n            out[lip_row][j] = 0\\n            out[lip_row-1][j] = 5\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,8,8,8,0,7,7,7,0,1],\n        [1,0,8,8,8,0,7,7,7,0,1],\n        [1,0,8,8,8,0,7,7,7,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,9,9,9,9,9,0,0,1],\n        [1,0,0,9,9,9,9,9,0,0,1],\n        [1,0,5,5,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,7,7,7,0,8,8,8,0,1],\n        [1,0,7,7,7,0,8,8,8,0,1],\n        [1,0,7,7,7,0,8,8,8,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,9,9,9,9,9,0,0,1],\n        [1,0,0,5,5,9,9,9,9,9,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy border and fixed codes\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] not in (8,7,9,5):\\n                out[i][j] = grid[i][j]\\n    # mirror diamond(8)<->star(7) and cross(9)\\n    mapping = {8:7, 7:8, 9:9}\\n    for i in range(h):\\n        for j in range(w):\\n            c = grid[i][j]\\n            if c in mapping:\\n                out[i][w-1-j] = mapping[c]\\n    # move lips(5) up\\n    lip_row = 8\\n    for j in range(w):\\n        if grid[lip_row][j] == 5:\\n            out[lip_row][j] = 0\\n            out[lip_row-1][j] = 5\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,6,6,6,0,3,3,3,0,1],\n        [1,0,6,0,6,0,3,0,3,0,1],\n        [1,0,6,6,6,0,3,3,3,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,4,4,4,4,4,4,4,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,5,5,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,3,3,3,0,6,6,6,0,1],\n        [1,0,3,0,3,0,6,0,6,0,1],\n        [1,0,3,3,3,0,6,6,6,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,4,4,4,4,4,4,4,0,1],\n        [1,0,0,0,0,5,5,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy fixed codes\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] != 6 and grid[i][j] != 3 and grid[i][j] != 5:\\n                out[i][j] = grid[i][j]\\n    # mirror square(6)<->triangle(3)\\n    mapping = {6:3, 3:6}\\n    for i in range(h):\\n        for j in range(w):\\n            c = grid[i][j]\\n            if c in mapping:\\n                out[i][w-1-j] = mapping[c]\\n    # move lips(5) up\\n    lip_row = 8\\n    for j in range(w):\\n        if grid[lip_row][j] == 5:\\n            out[lip_row][j] = 0\\n            out[lip_row-1][j] = 5\\n    return out\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,2,2,2,0,7,7,7,0,1],\n        [1,0,2,0,2,0,7,0,7,0,1],\n        [1,0,2,2,2,0,7,7,7,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,8,8,8,8,8,8,8,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,5,5,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,7,7,7,0,2,2,2,0,1],\n        [1,0,7,0,7,0,2,0,2,0,1],\n        [1,0,7,7,7,0,2,2,2,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,8,8,8,8,8,8,8,8,0,1],\n        [1,0,0,0,5,5,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    out = [[0]*w for _ in range(h)]\\n    # copy border and fixed codes\\n    for i in range(h):\\n        for j in range(w):\\n            if grid[i][j] not in (2,7,8,5):\\n                out[i][j] = grid[i][j]\\n    # mirror circle(2)<->star(7) and stripe(8)\\n    mapping = {2:7, 7:2, 8:8}\\n    for i in range(h):\\n        for j in range(w):\\n            c = grid[i][j]\\n            if c in mapping:\\n                out[i][w-1-j] = mapping[c]\\n    # move lips(5) up\\n    lip_row = 8\\n    for j in range(w):\\n        if grid[lip_row][j] == 5:\\n            out[lip_row][j] = 0\\n            out[lip_row-1][j] = 5\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "d2426371-13ad-499d-9c76-10aa26b1cb46.json",
    "uuid": "d2426371-13ad-499d-9c76-10aa26b1cb46",
    "created": "2025-04-27 04:58:35",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,0,0,0,0,0,2,0],\n        [0,1,1,0,0,0,0,2,2],\n        [0,0,1,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,4,0,0],\n        [3,0,0,0,0,4,4,4,0],\n        [3,3,3,0,0,0,4,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,0,0,0,2,0,0],\n        [0,0,1,1,0,0,2,2,0],\n        [0,0,0,1,0,0,2,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,4,0,0,0],\n        [0,3,0,0,4,4,4,0,0],\n        [0,3,3,3,0,4,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    cr,cc = h//2, w//2\\n    def sign(x): return (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr = r + sign(cr - r)\\n                nc = c + sign(cc - c)\\n                out[nr][nc] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = [\\n  [1,1,0,0,0,0,0,2,0],\\n  [0,1,1,0,0,0,0,2,2],\\n  [0,0,1,0,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,4,0,0],\\n  [3,0,0,0,0,4,4,4,0],\\n  [3,3,3,0,0,0,4,0,0]\\n]\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,0,0,2,2,2],\n        [0,0,1,1,1,0,0,0,2],\n        [0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,4,0],\n        [3,0,0,0,0,0,0,4,4]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,1,0,2,2,2,0],\n        [0,0,1,1,1,0,0,2,0],\n        [0,0,0,1,0,0,0,0,0],\n        [0,3,0,0,0,0,0,4,0],\n        [0,3,0,0,0,0,0,4,0],\n        [0,3,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,4,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    cr,cc = h//2, w//2\\n    def sign(x): return (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr = r + sign(cr - r)\\n                nc = c + sign(cc - c)\\n                out[nr][nc] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = [\\n  [0,0,0,1,0,0,2,2,2],\\n  [0,0,1,1,1,0,0,0,2],\\n  [0,0,0,1,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,4,0],\\n  [3,0,0,0,0,0,0,4,4]\\n]\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [1,1,0,0,0,0,0,2,2],\n        [0,1,1,0,0,0,0,2,0],\n        [0,0,1,0,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,0,0],\n        [3,3,3,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,4,4],\n        [0,0,0,0,0,0,0,4,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,0,0,0,2,2,0],\n        [0,0,1,1,0,0,2,0,0],\n        [0,0,0,1,0,0,2,0,0],\n        [0,3,0,0,0,0,0,0,0],\n        [0,3,0,0,0,0,0,0,0],\n        [0,0,3,3,0,0,0,0,0],\n        [0,0,0,3,0,0,0,4,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    cr,cc = h//2, w//2\\n    def sign(x): return (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr = r + sign(cr - r)\\n                nc = c + sign(cc - c)\\n                out[nr][nc] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = [\\n  [1,1,0,0,0,0,0,2,2],\\n  [0,1,1,0,0,0,0,2,0],\\n  [0,0,1,0,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,0,0],\\n  [3,3,3,0,0,0,0,0,0],\\n  [0,0,3,0,0,0,0,4,4],\\n  [0,0,0,0,0,0,0,4,0]\\n]\\nprint(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [1,1,0,0,0,0,0,2,0],\n        [0,1,1,0,0,0,0,2,2],\n        [0,0,1,1,0,0,0,2,0],\n        [0,0,0,0,0,0,0,0,0],\n        [3,0,0,0,0,0,0,0,0],\n        [3,3,0,0,0,0,0,0,0],\n        [3,3,3,0,0,0,0,0,0],\n        [0,0,3,0,0,0,0,4,0],\n        [0,0,0,0,0,0,0,4,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,0,0,0,2,2,0],\n        [0,0,1,1,0,0,2,0,0],\n        [0,0,0,1,0,0,2,0,0],\n        [0,3,0,0,0,0,0,0,0],\n        [0,3,3,0,0,0,0,0,0],\n        [0,0,3,3,0,0,0,0,0],\n        [0,0,0,3,0,0,0,4,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h,w = len(grid), len(grid[0])\\n    cr,cc = h//2, w//2\\n    def sign(x): return (x>0) - (x<0)\\n    out = [[0]*w for _ in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr = r + sign(cr - r)\\n                nc = c + sign(cc - c)\\n                out[nr][nc] = v\\n    return out\\n\\n# 사용 예시\\ninput_grid = [\\n  [1,1,0,0,0,0,0,2,0],\\n  [0,1,1,0,0,0,0,2,2],\\n  [0,0,1,1,0,0,0,2,0],\\n  [0,0,0,0,0,0,0,0,0],\\n  [3,0,0,0,0,0,0,0,0],\\n  [3,3,0,0,0,0,0,0,0],\\n  [3,3,3,0,0,0,0,0,0],\\n  [0,0,3,0,0,0,0,4,0],\\n  [0,0,0,0,0,0,0,4,0]\\n]\\nprint(transform(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e7256a18-ae2e-4baf-a19a-0390d90375e1.json",
    "uuid": "e7256a18-ae2e-4baf-a19a-0390d90375e1",
    "created": "2025-04-27 14:22:15",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [0,0,1,1,1,1,1,1,1,0,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,6,0,3,0,6,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,3,4,3,4,3,0,0,0],\n        [0,0,3,4,3,4,3,4,3,0,0],\n        [0,3,4,3,4,3,4,3,4,3,0],\n        [3,4,3,4,3,4,3,4,3,4,3],\n        [0,0,3,4,3,4,3,4,3,0,0],\n        [0,0,0,9,0,9,0,9,0,0,0],\n        [0,0,7,0,5,0,7,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    result = []\\n    for r, row in enumerate(grid):\\n        new_row = []\\n        for v in row:\\n            if v == 1:\\n                new_row.append(3 if r % 2 == 0 else 4)\\n            elif v == 2:\\n                new_row.append(9)\\n            elif v == 3:\\n                new_row.append(5)\\n            elif v == 6:\\n                new_row.append(7)\\n            else:\\n                new_row.append(0)\\n        result.append(new_row)\\n    return result\\n\\n# Usage:\\n# output = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,1,1,1,0,0,0,0],\n        [0,0,1,1,1,1,0,0,0,0,0],\n        [0,1,1,1,1,1,0,0,0,0,0],\n        [1,1,1,1,1,0,0,0,0,0,0],\n        [0,0,1,1,1,1,0,0,0,0,0],\n        [0,0,0,2,0,2,0,0,0,0,0],\n        [0,0,6,0,3,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,3,4,3,4,0,0,0,0],\n        [0,0,3,4,3,4,0,0,0,0,0],\n        [0,3,4,3,4,3,0,0,0,0,0],\n        [3,4,3,4,3,0,0,0,0,0,0],\n        [0,0,3,4,3,4,0,0,0,0,0],\n        [0,0,0,9,0,9,0,0,0,0,0],\n        [0,0,7,0,5,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    result = []\\n    for r, row in enumerate(grid):\\n        new_row = []\\n        for v in row:\\n            if v == 1:\\n                new_row.append(3 if r % 2 == 0 else 4)\\n            elif v == 2:\\n                new_row.append(9)\\n            elif v == 3:\\n                new_row.append(5)\\n            elif v == 6:\\n                new_row.append(7)\\n            else:\\n                new_row.append(0)\\n        result.append(new_row)\\n    return result\\n\\n# output = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,1,1,1,0,0],\n        [0,0,0,0,0,1,1,1,1,1,0],\n        [0,0,0,0,0,1,1,1,1,1,1],\n        [0,0,0,0,0,1,1,1,1,1,0],\n        [0,0,0,0,0,1,1,1,1,0,0],\n        [0,0,0,0,0,0,2,0,2,0,0],\n        [0,0,0,0,0,0,6,0,3,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,3,4,3,4,0,0],\n        [0,0,0,0,0,3,4,3,4,3,0],\n        [0,0,0,0,0,3,4,3,4,3,4],\n        [0,0,0,0,0,3,4,3,4,3,0],\n        [0,0,0,0,0,3,4,3,4,0,0],\n        [0,0,0,0,0,0,9,0,9,0,0],\n        [0,0,0,0,0,0,7,0,5,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    result = []\\n    for r, row in enumerate(grid):\\n        new_row = []\\n        for v in row:\\n            if v == 1:\\n                new_row.append(3 if r % 2 == 0 else 4)\\n            elif v == 2:\\n                new_row.append(9)\\n            elif v == 3:\\n                new_row.append(5)\\n            elif v == 6:\\n                new_row.append(7)\\n            else:\\n                new_row.append(0)\\n        result.append(new_row)\\n    return result\\n\\n# Call with your input to get the output\"\n    },\n    {\n      \"input\": [\n        [0,0,0,1,1,1,0,1,1,1,0],\n        [0,0,1,1,1,1,0,1,1,1,1],\n        [0,1,1,1,1,1,0,1,1,1,0],\n        [1,1,1,1,1,0,0,1,1,1,1],\n        [0,0,1,1,1,1,0,1,1,1,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,6,0,3,0,7,0,5,0,0]\n      ],\n      \"output\": [\n        [0,0,0,3,4,3,0,3,4,3,0],\n        [0,0,3,4,3,4,0,3,4,3,4],\n        [0,3,4,3,4,3,0,3,4,3,0],\n        [3,4,3,4,3,0,0,3,4,3,4],\n        [0,0,3,4,3,4,0,3,4,3,0],\n        [0,0,0,9,0,9,0,9,0,0,0],\n        [0,0,7,0,5,0,7,0,5,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    result = []\\n    for r, row in enumerate(grid):\\n        new_row = []\\n        for v in row:\\n            if v == 1:\\n                new_row.append(3 if r % 2 == 0 else 4)\\n            elif v == 2:\\n                new_row.append(9)\\n            elif v == 3:\\n                new_row.append(5)\\n            elif v == 6:\\n                new_row.append(7)\\n            else:\\n                new_row.append(0)\\n        result.append(new_row)\\n    return result\\n\\n# Use transform(input_matrix) to compute the output\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e72c2f1f-df75-4f89-9d12-7dccd57a96a6.json",
    "uuid": "e72c2f1f-df75-4f89-9d12-7dccd57a96a6",
    "created": "2025-04-27 05:31:31",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "eb9161de-3d00-4aee-943d-407612e99d56.json",
    "uuid": "eb9161de-3d00-4aee-943d-407612e99d56",
    "created": "2025-04-27 05:51:14",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3],\n        [3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],\n        [4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,0,0,0,9,0,0,0,1,0,9,0,0,0,0],\n        [0,0,0,9,1,1,1,0,0,9,0,0,0,1,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,1,1,0,0,0,1,0,9,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,1,0,9,0,1,1,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,1,0,0,0,1,1,1],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,1,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3],\n        [3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],\n        [4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,4,0,0,0,9,0,0,0,3,0,9,0,0,0,0],\n        [0,0,0,9,4,2,3,0,0,9,0,0,0,4,0,9,0,0,0,0],\n        [0,0,0,9,0,3,4,2,3,4,0,0,0,2,0,9,0,0,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,3,0,9,0,4,2,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,4,0,0,0,2,3,4],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,3,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    # copy pattern rows\\n    for r in range(3):\\n        out[r] = grid[r].copy()\\n    # fill silhouettes\\n    for r in range(3, H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                X = (r - 4) % 3\\n                out[r][c] = grid[X][c]\\n            elif v == 9:\\n                out[r][c] = 9\\n            else:\\n                out[r][c] = 0\\n    return out\"\n    },\n    {\n      \"input\": [\n        [2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3],\n        [3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],\n        [4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,0,9,1,1,1,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,0,9,1,1,1,0,0,9,0,0,0,0],\n        [0,0,0,9,0,1,1,1,0,9,1,1,1,0,0,9,0,1,0,0],\n        [0,0,0,9,0,1,1,1,0,9,0,0,0,0,0,9,0,1,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3],\n        [3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],\n        [4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,4,2,3,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,2,3,4,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,9,0,3,4,2,0,9,2,3,4,0,0,9,0,0,0,0],\n        [0,0,0,9,0,4,2,3,0,9,3,4,2,0,0,9,0,0,0,0],\n        [0,0,0,9,0,2,3,4,0,9,4,2,3,0,0,9,0,2,0,0],\n        [0,0,0,9,0,3,4,2,0,9,0,0,0,0,0,9,0,3,0,0],\n        [0,0,0,9,0,0,0,0,0,9,0,0,0,0,0,9,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    H, W = len(grid), len(grid[0])\\n    out = [[0]*W for _ in range(H)]\\n    # copy pattern rows\\n    for r in range(3):\\n        out[r] = grid[r].copy()\\n    # fill silhouettes\\n    for r in range(3, H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v == 1:\\n                X = (r - 4) % 3\\n                out[r][c] = grid[X][c]\\n            elif v == 9:\\n                out[r][c] = 9\\n            else:\\n                out[r][c] = 0\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "f1472052-27ae-4c5b-b8e4-9b44d6bfa433.json",
    "uuid": "f1472052-27ae-4c5b-b8e4-9b44d6bfa433",
    "created": "2025-04-27 04:23:57",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,3,3],\n        [0,0,0,0,0,0,0,0,0,0,0,0,3,3],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [2,0,0,6,6,6,6,6,6,6,6,0,0,0],\n        [0,2,0,0,6,6,6,6,6,6,6,0,0,0],\n        [0,0,2,0,0,6,6,6,6,6,0,0,0,0],\n        [0,0,0,2,0,0,6,6,6,0,0,0,0,0],\n        [0,0,0,0,2,0,0,6,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,3,3],\n        [0,0,0,0,0,0,0,0,0,0,0,0,3,3],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,6,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,0,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,0,0,6,6,6,0,0,0,0,0],\n        [2,0,0,0,0,0,0,6,0,0,0,0,0,0],\n        [0,2,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    # find banner and triangle\\n    banner = [(r,c) for r in range(rows) for c in range(cols) if grid[r][c]==4]\\n    tri    = [(r,c) for r in range(rows) for c in range(cols) if grid[r][c]==6]\\n    # bounding boxes\\n    rb_min = min(r for r,c in banner);\\n    rb_max = max(r for r,c in banner)\\n    cb_min = min(c for r,c in banner);\\n    cb_max = max(c for r,c in banner)\\n    rt_min = min(r for r,c in tri);\\n    ct_min = min(c for r,c in tri);\\n    rt_max = max(r for r,c in tri);\\n    ct_max = max(c for r,c in tri)\\n    # compute shifts\\n    center_b = (cb_min + cb_max)/2\\n    center_t = (ct_min + ct_max)/2\\n    dx = int(round(center_b - center_t))\\n    dy = (rb_max + 1) - rt_min\\n    # apply transform\\n    out = [row[:] for row in grid]\\n    for r,c in tri:\\n        out[r][c] = 0\\n    for r,c in tri:\\n        out[r+dy][c+dx] = 6\\n    return out\"\n    },\n    {\n      \"input\": [\n        [3,3,0,0,0,0,0,0,0,0,0,0,0,0],\n        [3,3,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,0],\n        [0,5,5,5,0,0,0,0,0,0,0,0,0,0],\n        [0,0,5,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,6,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,0,6,6,6,6,6,0,0,0,0],\n        [0,0,0,0,0,0,6,6,6,0,0,0,0,0],\n        [0,0,0,0,0,0,0,6,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [3,3,0,0,0,0,0,0,0,0,0,0,0,0],\n        [3,3,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,0,4,4,4,4,4,4,4,4,0,0],\n        [0,0,0,6,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,6,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,0,6,6,6,6,6,6,0,0,0],\n        [0,0,0,0,0,0,6,6,6,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    rows, cols = len(grid), len(grid[0])\\n    banner = [(r,c) for r in range(rows) for c in range(cols) if grid[r][c]==4]\\n    tri    = [(r,c) for r in range(rows) for c in range(cols) if grid[r][c]==6]\\n    rb_min, rb_max = min(r for r,c in banner), max(r for r,c in banner)\\n    cb_min, cb_max = min(c for r,c in banner), max(c for r,c in banner)\\n    rt_min, rt_max = min(r for r,c in tri), max(r for r,c in tri)\\n    ct_min, ct_max = min(c for r,c in tri), max(c for r,c in tri)\\n    center_b = (cb_min + cb_max)/2\\n    center_t = (ct_min + ct_m"
  },
  {
    "filename": "ed49546d-96ea-40cf-9cca-aafad5cae206.json",
    "uuid": "ed49546d-96ea-40cf-9cca-aafad5cae206",
    "created": "2025-04-27 19:10:30",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,5,0,0,0,0,0,0,1],\n        [1,0,4,4,4,0,0,0,0,0,1],\n        [1,0,3,3,3,0,0,0,0,0,1],\n        [1,0,2,2,2,0,0,9,0,0,1],\n        [1,0,0,0,0,0,8,8,8,0,1],\n        [1,0,0,0,0,0,7,7,7,0,1],\n        [1,0,0,0,0,0,6,6,6,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,2,3,4,0,0,1],\n        [1,0,0,0,0,2,3,4,5,0,1],\n        [1,0,0,0,0,2,3,4,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,6,7,8,0,0,0,0,0,1],\n        [1,0,6,7,8,9,0,0,0,0,1],\n        [1,0,6,7,8,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def rotate90(mat):\\n    n = len(mat)\\n    m = len(mat[0])\\n    cr = n//2\\n    cc = m//2\\n    # copy border and background\\n    out = [[mat[i][j] if mat[i][j] in (0,1) else 0 for j in range(m)] for i in range(n)]\\n    for i in range(n):\\n        for j in range(m):\\n            v = mat[i][j]\\n            if v not in (0,1):\\n                dr = i - cr\\n                dc = j - cc\\n                ni = cr + dc\\n                nj = cc - dr\\n                out[ni][nj] = v\\n    return out\\n\\n# result = rotate90(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,5,0,0,0,0,0,0,0,1],\n        [1,0,0,2,0,0,0,0,0,0,1],\n        [1,0,0,0,3,0,0,0,0,0,1],\n        [1,0,0,0,0,4,0,0,0,0,1],\n        [1,0,0,0,0,0,3,0,0,0,1],\n        [1,0,0,0,0,0,0,2,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,0,0,2,0,0,0,5,0,1],\n        [1,0,0,0,0,3,0,0,0,0,1],\n        [1,0,0,0,0,0,4,0,0,0,1],\n        [1,0,0,0,0,0,0,3,0,0,1],\n        [1,0,0,0,0,0,0,0,2,0,1],\n        [1,0,0,0,0,0,0"
  },
  {
    "filename": "fc2a596e-47cd-4dc3-a45f-87c866ab4023.json",
    "uuid": "fc2a596e-47cd-4dc3-a45f-87c866ab4023",
    "created": "2025-04-27 15:11:18",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,2,1,0,0,0,0,0],\n        [0,0,0,0,1,2,2,2,1,0,0,0,0],\n        [0,0,0,1,2,2,2,2,2,1,0,0,0],\n        [0,0,1,2,2,2,2,2,2,2,1,0,0],\n        [0,1,2,2,2,2,6,2,2,2,2,1,0],\n        [1,2,2,2,2,6,6,6,2,2,2,2,1],\n        [0,1,2,2,2,2,6,2,2,2,2,1,0],\n        [0,0,1,2,2,2,2,2,2,2,1,0,0],\n        [0,0,0,1,2,2,2,2,2,1,0,0,0],\n        [0,0,0,0,1,2,2,2,1,0,0,0,0],\n        [0,0,0,0,0,1,2,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,4,1,0,0,0,0,0],\n        [0,0,0,0,1,3,5,3,1,0,0,0,0],\n        [0,0,0,1,4,2,4,2,4,1,0,0,0],\n        [0,0,1,3,5,3,5,3,5,3,1,0,0],\n        [0,1,4,2,4,2,6,2,4,2,4,1,0],\n        [1,3,5,3,5,6,6,6,5,3,5,3,1],\n        [0,1,4,2,4,2,6,2,4,2,4,1,0],\n        [0,0,1,3,5,3,5,3,5,3,1,0,0],\n        [0,0,0,1,4,2,4,2,4,1,0,0,0],\n        [0,0,0,0,1,3,5,3,1,0,0,0,0],\n        [0,0,0,0,0,1,4,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    out = [[grid[r][c] for c in range(w)] for r in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 2:\\n                if r % 2 == 0 and c % 2 == 0:\\n                    out[r][c] = 5\\n                elif r % 2 == 0:\\n                    out[r][c] = 3\\n                elif c % 2 == 0:\\n                    out[r][c] = 4\\n                else:\\n                    out[r][c] = 2\\n    return out\\n\\n# 예시 실행:\\n# result = transform(input_grid)\\n# assert result == output_grid\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,1,1,1,1,1,1,2,2,1],\n        [1,2,2,2,1,0,0,0,0,1,2,2,1],\n        [1,2,2,2,1,0,0,0,0,1,2,2,1],\n        [1,2,2,2,1,0,0,0,0,1,2,2,1],\n        [1,2,2,2,1,1,1,1,1,1,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,2,2,2,2,2,2,2,2,2,2,2,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,2,4,2,4,2,4,2,4,2,4,2,1],\n        [1,3,5,3,5,3,5,3,5,3,5,3,1],\n        [1,2,4,2,4,2,4,2,4,2,4,2,1],\n        [1,3,5,3,1,1,1,1,1,1,5,3,1],\n        [1,2,4,2,1,0,0,0,0,1,4,2,1],\n        [1,3,5,3,1,0,0,0,0,1,5,3,1],\n        [1,2,4,2,1,0,0,0,0,1,4,2,1],\n        [1,3,5,3,1,1,1,1,1,1,5,3,1],\n        [1,2,4,2,4,2,4,2,4,2,4,2,1],\n        [1,3,5,3,5,3,5,3,5,3,5,3,1],\n        [1,2,4,2,4,2,4,2,4,2,4,2,1],\n        [1,3,5,3,5,3,5,3,5,3,5,3,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    out = [[grid[r][c] for c in range(w)] for r in range(h)]\\n    for r in range(h):\\n        for c in range(w):\\n            if grid[r][c] == 2:\\n                if r % 2 == 0 and c % 2 == 0:\\n                    out[r][c] = 5\\n                elif r % 2 == 0:\\n                    out[r][c] = 3\\n                elif c % 2 == 0:\\n                    out[r][c] = 4\\n                else:\\n                    out[r][c] = 2\\n    return out\\n\\n# 예시 실행:\\n# result = transform(input_grid)\\n# assert result == output_grid\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "f37b47a8-a45a-40ae-a268-5d0217cb92ac.json",
    "uuid": "f37b47a8-a45a-40ae-a268-5d0217cb92ac",
    "created": "2025-04-27 16:09:44",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [2, 1, 2],\n        [1, 0, 1],\n        [2, 1, 2]\n      ],\n      \"output\": [\n        [2, 1, 2, 2, 1, 2, 2, 1, 2],\n        [1, 0, 1, 1, 0, 1, 1, 0, 1],\n        [2, 1, 2, 2, 1, 2, 2, 1, 2],\n        [2, 1, 2, 0, 0, 0, 2, 1, 2],\n        [1, 0, 1, 0, 0, 0, 1, 0, 1],\n        [2, 1, 2, 0, 0, 0, 2, 1, 2],\n        [2, 1, 2, 2, 1, 2, 2, 1, 2],\n        [1, 0, 1, 1, 0, 1, 1, 0, 1],\n        [2, 1, 2, 2, 1, 2, 2, 1, 2]\n      ],\n      \"code\": \"def fractal_self_similarity(matrix):\\n    n = len(matrix)\\n    # prepare output of size n*n\\n    out = [[0]*(n*n) for _ in range(n*n)]\\n    for i in range(n):\\n        for j in range(n):\\n            val = matrix[i][j]\\n            for bi in range(n):\\n                for bj in range(n):\\n                    if val != 0:\\n                        # copy entire input pattern\\n                        out[i*n + bi][j*n + bj] = matrix[bi][bj]\\n                    else:\\n                        # zero block\\n                        out[i*n + bi][j*n + bj] = 0\\n    return out\\n\\n# Example usage:\\ninput_matrix = [\\n    [2,1,2],\\n    [1,0,1],\\n    [2,1,2]\\n]\\nprint(fractal_self_similarity(input_matrix))\"\n    },\n    {\n      \"input\": [\n        [3, 0, 0],\n        [0, 3, 0],\n        [0, 0, 3]\n      ],\n      \"output\": [\n        [3, 0, 0, 3, 0, 0, 3, 0, 0],\n        [0, 3, 0, 0, 3, 0, 0, 3, 0],\n        [0, 0, 3, 0, 0, 3, 0, 0, 3],\n        [3, 0, 0, 0, 0, 0, 3, 0, 0],\n        [0, 3, 0, 0, 0, 0, 0, 3, 0],\n        [0, 0, 3, 0, 0, 0, 0, 0, 3],\n        [3, 0, 0, 3, 0, 0, 3, 0, 0],\n        [0, 3, 0, 0, 3, 0, 0, 3, 0],\n        [0, 0, 3, 0, 0, 3, 0, 0, 3]\n      ],\n      \"code\": \"def fractal_self_similarity(matrix):\\n    n = len(matrix)\\n    out = [[0]*(n*n) for _ in range(n*n)]\\n    for i in range(n):\\n        for j in range(n):\\n            val = matrix[i][j]\\n            for bi in range(n):\\n                for bj in range(n):\\n                    out[i*n+bi][j*n+bj] = (matrix[bi][bj] if val!=0 else 0)\\n    return out\\n\\ninput_matrix = [\\n    [3,0,0],\\n    [0,3,0],\\n    [0,0,3]\\n]\\nprint(fractal_self_similarity(input_matrix))\"\n    },\n    {\n      \"input\": [\n        [1, 2, 3],\n        [4, 0, 5],\n        [6, 7, 8]\n      ],\n      \"output\": [\n        [1, 2, 3, 1, 2, 3, 1, 2, 3],\n        [4, 0, 5, 4, 0, 5, 4, 0, 5],\n        [6, 7, 8, 6, 7, 8, 6, 7, 8],\n        [1, 2, 3, 0, 0, 0, 1, 2, 3],\n        [4, 0, 5, 0, 0, 0, 4, 0, 5],\n        [6, 7, 8, 0, 0, 0, 6, 7, 8],\n        [1, 2, 3, 1, 2, 3, 1, 2, 3],\n        [4, 0, 5, 4, 0, 5, 4, 0, 5],\n        [6, 7, 8, 6, 7, 8, 6, 7, 8]\n      ],\n      \"code\": \"def fractal_self_similarity(matrix):\\n    n = len(matrix)\\n    out = [[0]*(n*n) for _ in range(n*n)]\\n    for i in range(n):\\n        for j in range(n):\\n            val = matrix[i][j]\\n            for bi in range(n):\\n                for bj in range(n):\\n                    out[i*n+bi][j*n+bj] = (matrix[bi][bj] if val!=0 else 0)\\n    return out\\n\\ninput_matrix = [\\n    [1,2,3],\\n    [4,0,5],\\n    [6,7,8]\\n]\\nprint(fractal_self_similarity(input_matrix))\"\n    },\n    {\n      \"input\": [\n        [9, 1, 8],\n        [2, 0, 3],\n        [7, 4, 6]\n      ],\n      \"output\": [\n        [9, 1, 8, 9, 1, 8, 9, 1, 8],\n        [2, 0, 3, 2, 0, 3, 2, 0, 3],\n        [7, 4, 6, 7, 4, 6, 7, 4, 6],\n        [9, 1, 8, 0, 0, 0, 9, 1, 8],\n        [2, 0, 3, 0, 0, 0, 2, 0, 3],\n        [7, 4, 6, 0, 0, 0, 7, 4, 6],\n        [9, 1, 8, 9, 1, 8, 9, 1, 8],\n        [2, 0, 3, 2, 0, 3, 2, 0, 3],\n        [7, 4, 6, 7, 4, 6, 7, 4, 6]\n      ],\n      \"code\": \"def fractal_self_similarity(matrix):\\n    n = len(matrix)\\n    out = [[0]*(n*n) for _ in range(n*n)]\\n    for i in range(n):\\n        for j in range(n):\\n            val = matrix[i][j]\\n            for bi in range(n):\\n                for bj in range(n):\\n                    out[i*n+bi][j*n+bj] = (matrix[bi][bj] if val!=0 else 0)\\n    return out\\n\\ninput_matrix = [\\n    [9,1,8],\\n    [2,0,3],\\n    [7,4,6]\\n]\\nprint(fractal_self_similarity(input_matrix))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "13251a1f-bda0-46c7-9c26-4b34b27cf3f1.json",
    "uuid": "13251a1f-bda0-46c7-9c26-4b34b27cf3f1",
    "created": "2025-04-27 16:56:56",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,7,0,7,0,0,0,0],\n        [0,0,3,7,0,7,0,7,4,0,0],\n        [0,0,0,0,7,0,7,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,5,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,3,0,0,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,7,0,0,0,0,0,7,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,5,0,0,0,4,0,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"import math\\n\\ndef transform(grid):\\n    h, w = len(grid), len(grid[0])\\n    # Count nonzero values to separate shape and points\\n    counts = {}\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v > 0:\\n                counts[v] = counts.get(v, 0) + 1\\n    # The most frequent value is the central shape\\n    shapeVal = max(counts, key=lambda k: counts[k])\\n    pointVals = [k for k in counts if k != shapeVal]\\n    # Compute center as mean of shape coordinates\\n    coords = [(i, j) for i in range(h) for j in range(w) if grid[i][j] == shapeVal]\\n    ci = sum(i for i, _ in coords) // len(coords)\\n    cj = sum(j for _, j in coords) // len(coords)\\n    # Find max horizontal run of shapeVal to get width\\n    max_run = 0\\n    for i in range(h):\\n        run = 0\\n        for j in range(w):\\n            if grid[i][j] == shapeVal:\\n                run += 1\\n                max_run = max(max_run, run)\\n            else:\\n                run = 0\\n    R = round(max_run / 2)\\n    # Prepare output grid\\n    out = [[0]*w for _ in range(h)]\\n    # Draw ring at 8 directions\\n    for angle in range(0, 360, 45):\\n        rad = math.radians(angle)\\n        i2 = ci - int(round(R * math.sin(rad)))\\n        j2 = cj + int(round(R * math.cos(rad)))\\n        if 0 <= i2 < h and 0 <= j2 < w:\\n            out[i2][j2] = shapeVal\\n    # Move each point to diagonal\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v in pointVals:\\n                if i < ci:\\n                    angle = 45\\n                elif i > ci:\\n                    angle = 225\\n                elif j < cj:\\n                    angle = 135\\n                else:\\n                    angle = 315\\n                rad = math.radians(angle)\\n                i3 = ci - int(round(R * math.sin(rad)))\\n                j3 = cj + int(round(R * math.cos(rad)))\\n                if 0 <= i3 < h and 0 <= j3 < w:\\n                    out[i3][j3] = v\\n    return out\\n\\n# Example usage:\\ninput_grid = \" + repr([\\n        [0,0,0,0,0,0,0,0,0,0,0],\\n        [0,0,0,0,0,0,0,0,0,0,0],\\n        [0,0,0,0,0,2,0,0,0,0,0],\\n        [0,0,0,0,0,7,0,0,0,0,0],\\n        [0,0,0,0,7,0,7,0,0,0,0],\\n        [0,0,3,7,0,7,0,7,4,0,0],\\n        [0,0,0,0,7,0,7,0,0,0,0],\\n        [0,0,0,0,0,7,0,0,0,0,0],\\n        [0,0,0,0,0,5,0,0,0,0,0],\\n        [0,0,0,0,0,0,0,0,0,0,0],\\n        [0,0,0,0,0,0,0,0,0,0,0]\\n    ]) + \"\\noutput_grid = transform(input_grid)\\nprint(output_grid)\"\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0,0,0],\n        [0,0,0,6,6,6,0,0,0,0,0],\n        [0,0,0,0,6,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,4,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,1,0,0,0],\n        [0,0,0,0,0,6,0,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0,0,0],\n        [0,0,6,0,0,0,0,6,0,0,0],\n        [0,0,0,0,4,0,0,0,0,0,0],\n        [0,0,0,0,0,6,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,4,0,0],\n        [0,0,0,0,0,0,0"
  },
  {
    "filename": "fd265aa0-1a34-4f16-b34f-380069f66573.json",
    "uuid": "fd265aa0-1a34-4f16-b34f-380069f66573",
    "created": "2025-04-27 12:20:50",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,4,0,0,4,0,0,0],\n                [0,4,4,4,4,4,4,4,0],\n                [0,0,4,0,0,4,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,2,2,0,0,0,0,0,0],\n                [0,2,0,0,0,0,0,0,0],\n                [0,2,2,2,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,4,0,0,4,0],\n                [0,0,0,4,4,4,4,4,4],\n                [0,0,0,0,4,0,0,4,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,2,2,0,0,0,0],\n                [0,0,0,2,0,0,0,0,0],\n                [0,0,0,2,2,2,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr, nc = r-1, c+2\\n                if 0 <= nr < H and 0 <= nc < W:\\n                    result[nr][nc] = v\\n    return result\"\n        },\n        {\n            \"input\": [\n                [0,0,0,3,3,3,0,0,0],\n                [0,0,3,3,3,3,3,0,0],\n                [0,3,3,3,3,3,3,3,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,7,7,0,0,0,0,7,0],\n                [0,7,0,0,0,0,0,0,0],\n                [0,7,7,7,7,7,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,3,3,3,0],\n                [0,0,0,0,3,3,3,3,3],\n                [0,0,0,3,3,3,3,3,3],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,7,7,0,0,0,0],\n                [0,0,0,7,0,0,0,0,0],\n                [0,0,0,7,7,7,7,7,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr, nc = r-1, c+2\\n                if 0 <= nr < H and 0 <= nc < W:\\n                    result[nr][nc] = v\\n    return result\"\n        },\n        {\n            \"input\": [\n                [0,0,0,6,0,0,0,0,0],\n                [0,0,6,6,6,0,0,0,0],\n                [0,6,6,6,6,6,0,0,0],\n                [0,0,6,6,6,0,0,0,0],\n                [0,0,0,6,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,5,5,5,0,0,0,0,0],\n                [0,5,5,5,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,6,0,0,0],\n                [0,0,0,0,6,6,6,0,0],\n                [0,0,0,6,6,6,6,6,0],\n                [0,0,0,0,6,6,6,0,0],\n                [0,0,0,0,0,6,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,5,5,5,0,0,0],\n                [0,0,0,5,5,5,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr, nc = r-1, c+2\\n                if 0 <= nr < H and 0 <= nc < W:\\n                    result[nr][nc] = v\\n    return result\"\n        },\n        {\n            \"input\": [\n                [0,9,0,9,0,9,0,0,0],\n                [0,0,9,0,9,0,9,0,0],\n                [0,9,0,9,0,9,0,9,0],\n                [0,0,9,0,9,0,9,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,8,0,0,0,0],\n                [0,0,0,8,8,8,0,0,0],\n                [0,0,8,8,8,8,8,0,0],\n                [0,0,0,8,8,8,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,9,0,9,0,9,0],\n                [0,0,0,0,9,0,9,0,9],\n                [0,0,0,9,0,9,0,9,0],\n                [0,0,0,0,9,0,9,0,9],\n                [0,0,0,0,0,0,8,0,0],\n                [0,0,0,0,0,8,8,8,0],\n                [0,0,0,0,8,8,8,8,8],\n                [0,0,0,0,0,0,8,8,8],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr, nc = r-1, c+2\\n                if 0 <= nr < H and 0 <= nc < W:\\n                    result[nr][nc] = v\\n    return result\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,2,2,2,2,2,0,0],\n                [0,2,0,0,0,0,2,0,0],\n                [0,2,0,1,1,1,2,0,0],\n                [0,2,0,1,0,1,2,0,0],\n                [0,2,0,1,1,1,2,0,0],\n                [0,2,0,0,0,0,2,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,2,2,2,2,2],\n                [0,0,0,2,0,0,0,0,2],\n                [0,0,0,2,0,1,1,1,2],\n                [0,0,0,2,0,1,0,1,2],\n                [0,0,0,2,0,1,1,1,2],\n                [0,0,0,2,0,0,0,0,2],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H, W = len(grid), len(grid[0])\\n    result = [[0]*W for _ in range(H)]\\n    for r in range(H):\\n        for c in range(W):\\n            v = grid[r][c]\\n            if v != 0:\\n                nr, nc = r-1, c+2\\n                if 0 <= nr < H and 0 <= nc < W:\\n                    result[nr][nc] = v\\n    return result\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "311e51fa-23ff-416e-a0f4-2a992ba7dbda.json",
    "uuid": "311e51fa-23ff-416e-a0f4-2a992ba7dbda",
    "created": "2025-04-28 06:42:51",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,2,2,2,4,2,2,2,0,1],\n        [1,0,2,0,0,0,0,0,2,0,1],\n        [1,0,2,0,3,3,3,0,2,0,1],\n        [1,0,6,0,3,0,3,0,5,0,1],\n        [1,0,2,0,3,3,3,0,2,0,1],\n        [1,0,2,2,2,2,2,2,2,0,1],\n        [1,0,0,0,0,7,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,4,2,2,2,0,0],\n        [0,0,2,0,0,0,0,0,2,0,0],\n        [0,0,0,6,0,3,0,5,0,0,0],\n        [0,0,0,2,2,2,2,2,2,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    # shrink layers 1,2,3 inward by one\\n    for k in [1,2,3]:\\n        pts = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==k]\\n        if not pts: continue\\n        rows, cols = zip(*pts)\\n        r0, r1 = min(rows)+1, max(rows)-1\\n        c0, c1 = min(cols)+1, max(cols)-1\\n        # draw new boundary\\n        for j in range(c0, c1+1):\\n            out[r0][j] = k\\n            out[r1][j] = k\\n        for i in range(r0, r1+1):\\n            out[i][c0] = k\\n            out[i][c1] = k\\n    # move objects 4-7 one step toward center\\n    cx, cy = n//2, m//2\\n    for k in [4,5,6,7]:\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j]==k:\\n                    di = 0 if i==cx else (1 if i<cx else -1)\\n                    dj = 0 if j==cy else (1 if j<cy else -1)\\n                    out[i+di][j+dj] = k\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,2,2,2,4,2,2,2,0,1],\n        [1,0,2,0,0,0,0,0,2,0,1],\n        [1,0,2,0,3,3,3,0,2,0,1],\n        [1,0,6,0,3,0,3,0,5,0,1],\n        [1,0,2,0,3,3,3,0,2,0,1],\n        [1,0,2,2,2,2,2,2,2,0,1],\n        [1,0,0,0,0,7,0,0,0,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,2,4,2,2,2,0,0],\n        [0,0,2,0,0,0,0,0,2,0,0],\n        [0,0,0,6,0,3,0,5,0,0,0],\n        [0,0,0,2,2,2,2,2,2,0,0],\n        [0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    # shrink layers 1,2,3 inward by one\\n    for k in [1,2,3]:\\n        pts = [(i,j) for i in range(n) for j in range(m) if grid[i][j]==k]\\n        if not pts:"
  },
  {
    "filename": "25b1ee54-886d-4e7a-8b6f-bb1359bd1592.json",
    "uuid": "25b1ee54-886d-4e7a-8b6f-bb1359bd1592",
    "created": "2025-04-28 03:03:33",
    "description": "```json\n{\n  \"task\":[\n    {\n      \"input\": [\n        \"11111111111\",\n        \"10000000001\",\n        \"10000000001\",\n        \"10000100001\",\n        \"10000100001\",\n        \"10011111001\",\n        \"10000100001\",\n        \"10000100001\",\n        \"10000000001\",\n        \"10000000001\",\n        \"11111111111\"\n      ],\n      \"output\": [\n        \"11111111111\",\n        \"12222222221\",\n        \"12222222221\",\n        \"12222122221\",\n        \"12222122221\",\n        \"12211111221\",\n        \"12222122221\",\n        \"12222122221\",\n        \"12222222221\",\n        \"12222222221\",\n        \"11111111111\"\n      ],\n      \"code\": \"def solve(grid):\\n    n = len(grid)\\n    m = len(grid[0])\\n    # convert to int matrix\\n    arr = [list(map(int,row)) for row in grid]\\n    # directions: right, down, left, up\\n    dirs = [(0,1),(1,0),(0,-1),(-1,0)]\\n    x,y,d = 1,1,0\\n    # start only if cell is zero\\n    if arr[x][y] != 0:\\n        return grid\\n    arr[x][y] = 2\\n    while True:\\n        dx,dy = dirs[d]\\n        nx,ny = x+dx, y+dy\\n        # if next is in bounds and zero, move & fill\\n        if 0 <= nx < n and 0 <= ny < m and arr[nx][ny] == 0:\\n            x,y = nx,ny\\n            arr[x][y] = 2\\n        else:\\n            # turn right (clockwise)\\n            d = (d + 1) % 4\\n            dx,dy = dirs[d]\\n            nx,ny = x+dx, y+dy\\n            # if can't move after turn, break\\n            if not (0 <= nx < n and 0 <= ny < m and arr[nx][ny] == 0):\\n                break\\n    # convert back to strings\\n    return [''.join(str(v) for v in row) for row in arr]\\n\\n# Example usage:\\ninput_grid = [\\n  \\\"11111111111\\\",\\n  \\\"10000000001\\\",\\n  \\\"10000000001\\\",\\n  \\\"10000100001\\\",\\n  \\\"10000100001\\\",\\n  \\\"10011111001\\\",\\n  \\\"10000100001\\\",\\n  \\\"10000100001\\\",\\n  \\\"10000000001\\\",\\n  \\\"10000000001\\\",\\n  \\\"11111111111\\\"\\n]\\nprint(solve(input_grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "60122bb9-f724-412b-b5a8-404ae868c489.json",
    "uuid": "60122bb9-f724-412b-b5a8-404ae868c489",
    "created": "2025-04-26 22:03:08",
    "description": ""
  },
  {
    "filename": "786ccb19-eff6-46b5-91e8-f4a3ac7f2df1.json",
    "uuid": "786ccb19-eff6-46b5-91e8-f4a3ac7f2df1",
    "created": "2025-04-27 08:19:53",
    "description": ""
  },
  {
    "filename": "4de4b78a-6ad0-44cd-9279-2bd0e52f2e89.json",
    "uuid": "4de4b78a-6ad0-44cd-9279-2bd0e52f2e89",
    "created": "2025-04-27 11:14:58",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,2,2,2,1,0,0,0],\n        [0,0,1,2,3,3,3,2,1,0,0],\n        [0,1,2,3,4,4,4,3,2,1,0],\n        [1,2,3,4,0,0,4,3,2,1,1],\n        [1,2,3,4,0,0,4,3,2,1,1],\n        [1,2,3,4,4,4,4,3,2,1,1],\n        [0,1,2,3,4,4,4,3,2,1,0],\n        [0,0,1,2,3,3,3,2,1,0,0],\n        [0,0,0,1,2,2,2,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,1,2,2,2,2,2,1,0,0],\n        [0,1,2,3,3,3,3,3,2,1,0],\n        [1,2,3,4,4,4,4,4,3,2,1],\n        [2,3,4,0,0,0,0,0,4,3,2],\n        [2,3,4,0,0,0,0,0,4,3,2],\n        [2,3,4,4,4,4,4,4,3,2,2],\n        [1,2,3,4,4,4,4,4,3,2,1],\n        [0,1,2,3,3,3,3,3,2,1,0],\n        [0,0,1,2,2,2,2,2,1,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0]\n      ],\n      \"code\": \"def contract_cheb(grid, center):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    # collect distinct nonzero values\\n    vals = {v for row in grid for v in row if v>0}\\n    for v in vals:\\n        # find one cell with this value to get its Chebyshev distance\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j]==v:\\n                    d = max(abs(i-center[0]), abs(j-center[1]))\\n                    break\\n            else:\\n                continue\\n            break\\n        newd = d-1\\n        if newd>=1:\\n            # fill the ring at distance newd with value v\\n            for i in range(n):\\n                for j in range(m):\\n                    if max(abs(i-center[0]), abs(j-center[1]))==newd:\\n                        out[i][j] = v\\n    return out\\n\\n# usage\\ngrid = \" + str([\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,2,2,2,1,0,0,0],\n        [0,0,1,2,3,3,3,2,1,0,0],\n        [0,1,2,3,4,4,4,3,2,1,0],\n        [1,2,3,4,0,0,4,3,2,1,1],\n        [1,2,3,4,0,0,4,3,2,1,1],\n        [1,2,3,4,4,4,4,3,2,1,1],\n        [0,1,2,3,4,4,4,3,2,1,0],\n        [0,0,1,2,3,3,3,2,1,0,0],\n        [0,0,0,1,2,2,2,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0]\n      ]) + \"\\ncenter = (5,5)\\nresult = contract_cheb(grid, center)\\nprint(result)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,2,2,2,1,0,0],\n        [0,0,0,1,2,3,3,3,2,1,0],\n        [0,0,1,2,3,4,4,4,3,2,1],\n        [0,1,2,3,4,0,0,0,4,3,2],\n        [0,1,2,3,0,0,0,0,0,3,2],\n        [0,1,2,3,4,0,0,0,4,3,2],\n        [0,0,1,2,3,4,4,4,3,2,1],\n        [0,0,0,1,2,3,3,3,2,1,0],\n        [0,0,0,0,1,2,2,2,1,0,0],\n        [0,0,0,0,0,1,1,1,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,1,1,1,1,1,0,0],\n        [0,0,0,1,2,2,2,2,2,1,0],\n        [0,0,1,2,3,3,3,3,3,2,1],\n        [0,1,2,3,4,4,4,4,4,3,2],\n        [1,2,3,4,0,0,0,0,0,4,3],\n        [1,2,3,0,0,0,0,0,0,0,3],\n        [1,2,3,4,0,0,0,0,0,4,3],\n        [0,1,2,3,4,4,4,4,4,3,2],\n        [0,0,1,2,3,3,3,3,3,2,1],\n        [0,0,0,1,2,2,2,2,2,1,0],\n        [0,0,0,0,1,1,1,1,1,0,0]\n      ],\n      \"code\": \"def contract_cheb(grid, center):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    vals = {v for row in grid for v in row if v>0}\\n    for v in vals:\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j]==v:\\n                    d = max(abs(i-center[0]), abs(j-center[1]))\\n                    break\\n            else:\\n                continue\\n            break\\n        newd = d-1\\n        if newd>=1:\\n            for i in range(n):\\n                for j in range(m):\\n                    if max(abs(i-center[0]), abs(j-center[1]))==newd:\\n                        out[i][j] = v\\n    return out\\n\\n# usage\\ngrid = \" + str([\n        [0,0,0,0,0,1,1,1,0,0,0],\n        [0,0,0,0,1,2,2,2,1,0,0],\n        [0,0,0,1,2,3,3,3,2,1,0],\n        [0,0,1,2,3,4,4,4,3,2,1],\n        [0,1,2,3,4,0,0,0,4,3,2],\n        [0,1,2,3,0,0,0,0,0,3,2],\n        [0,1,2,3,4,0,0,0,4,3,2],\n        [0,0,1,2,3,4,4,4,3,2,1],\n        [0,0,0,1,2,3,3,3,2,1,0],\n        [0,0,0,0,1,2,2,2,1,0,0],\n        [0,0,0,0,0,1,1,1,0,0,0]\n      ]) + \"\\ncenter = (4,7)\\nresult = contract_cheb(grid, center)\\nprint(result)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,2,3,3,3,3,3,3,3,2,0],\n        [0,2,3,4,4,4,4,3,2,0,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,4,4,4,3,2,0,0],\n        [0,2,3,3,3,3,3,3,3,2,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0],\n        [0,0,2,3,3,3,3,3,2,0,0],\n        [0,0,2,3,0,0,3,2,0,0,0],\n        [0,0,2,3,0,0,3,2,0,0,0],\n        [0,0,2,3,0,0,3,2,0,0,0],\n        [0,0,2,3,3,3,3,3,2,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def contract_cheb(grid, center):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    vals = {v for row in grid for v in row if v>0}\\n    for v in vals:\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j]==v:\\n                    d = max(abs(i-center[0]), abs(j-center[1]))\\n                    break\\n            else:\\n                continue\\n            break\\n        newd = d-1\\n        if newd>=2:\\n            for i in range(n):\\n                for j in range(m):\\n                    if max(abs(i-center[0]), abs(j-center[1]))==newd:\\n                        out[i][j] = v\\n    return out\\n\\n# usage\\ngrid = \" + str([\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,2,3,3,3,3,3,3,3,2,0],\n        [0,2,3,4,4,4,4,3,2,0,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,0,0,0,4,3,2,0],\n        [0,2,3,4,4,4,4,3,2,0,0],\n        [0,2,3,3,3,3,3,3,3,2,0],\n        [0,2,2,2,2,2,2,2,2,2,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ]) + \"\\ncenter = (5,5)\\nresult = contract_cheb(grid, center)\\nprint(result)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,2,3,4,3,2,0,0,0],\n        [0,0,2,3,4,0,4,3,2,0,0],\n        [0,0,3,4,0,0,0,4,3,0,0],\n        [0,0,2,3,4,0,4,3,2,0,0],\n        [0,0,0,2,3,4,3,2,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,2,3,4,3,2,0,0,0],\n        [0,0,2,3,4,0,4,3,2,0,0],\n        [0,0,0,2,3,0,3,2,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def contract_manh(grid, center):\\n    n, m = len(grid), len(grid[0])\\n    out = [[0]*m for _ in range(n)]\\n    vals = {v for row in grid for v in row if v>0}\\n    for v in vals:\\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j]==v:\\n                    d = abs(i-center[0]) + abs(j-center[1])\\n                    break\\n            else:\\n                continue\\n            break\\n        newd = d-1\\n        if newd>=2:\\n            for i in range(n):\\n                for j in range(m):\\n                    if abs(i-center[0]) + abs(j-center[1])==newd:\\n                        out[i][j] = v\\n    return out\\n\\n# usage\\ngrid = \" + str([\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,2,3,4,3,2,0,0,0],\n        [0,0,2,3,4,0,4,3,2,0,0],\n        [0,0,3,4,0,0,0,4,3,0,0],\n        [0,0,2,3,4,0,4,3,2,0,0],\n        [0,0,0,2,3,4,3,2,0,0,0],\n        [0,0,0,0,2,3,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ]) + \"\\ncenter = (5,5)\\nresult = contract_manh(grid, center)\\nprint(result)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "6bea1067-342d-4ff2-8f40-45259f72d52d.json",
    "uuid": "6bea1067-342d-4ff2-8f40-45259f72d52d",
    "created": "2025-04-27 07:40:28",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,9,2,9,0,0,0],\n                [0,0,9,8,8,8,9,0,0],\n                [0,9,6,8,8,8,8,9,0],\n                [9,8,8,9,8,9,8,8,9],\n                [5,8,9,8,1,8,9,3,8],\n                [9,8,8,9,8,9,8,8,9],\n                [0,9,8,8,8,8,7,9,0],\n                [0,0,9,8,8,8,9,0,0],\n                [0,0,0,9,4,9,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    cx = cy = 0\\n    points = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v == 1:\\n                cx, cy = i, j\\n            elif v > 1:\\n                points.append((v, i, j))\\n    max_label = max(v for v, _, _ in points)\\n    output = [[0]*max_label for _ in range(H)]\\n    for v, i, j in points:\\n        d = abs(i-cx) + abs(j-cy)\\n        col = v - 1\\n        for r in range(H-1, H-1-d, -1):\\n            output[r][col] = v\\n    return output\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,2,0,0,0,0],\n                [0,0,0,8,9,8,0,0,0],\n                [0,0,8,0,3,0,8,0,0],\n                [0,8,0,0,0,0,0,8,0],\n                [4,0,0,0,1,0,0,0,6],\n                [0,8,0,0,0,0,0,8,0],\n                [0,0,8,0,5,0,8,0,0],\n                [0,0,0,8,9,8,0,0,0],\n                [0,0,0,0,7,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,2,0,4,0,6,7,0,0],\n                [0,2,0,4,0,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    cx = cy = 0\\n    points = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v == 1:\\n                cx, cy = i, j\\n            elif v > 1:\\n                points.append((v, i, j))\\n    max_label = max(v for v, _, _ in points)\\n    output = [[0]*max_label for _ in range(H)]\\n    for v, i, j in points:\\n        d = abs(i-cx) + abs(j-cy)\\n        col = v - 1\\n        for r in range(H-1, H-1-d, -1):\\n            output[r][col] = v\\n    return output\"\n        },\n        {\n            \"input\": [\n                [0,0,8,8,8,8,8,0,0],\n                [0,8,9,0,2,0,9,8,0],\n                [8,9,0,9,0,6,0,9,8],\n                [8,0,9,0,9,0,9,0,8],\n                [8,5,0,0,1,0,0,3,8],\n                [8,0,9,0,9,0,9,0,8],\n                [8,9,7,9,0,0,0,9,8],\n                [0,8,9,0,4,0,9,8,0],\n                [0,0,8,8,8,8,8,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,7,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0],\n                [0,2,3,4,5,6,7,0,0]\n            ],\n            \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    cx = cy = 0\\n    points = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v == 1:\\n                cx, cy = i, j\\n            elif v > 1:\\n                points.append((v, i, j))\\n    max_label = max(v for v, _, _ in points)\\n    output = [[0]*max_label for _ in range(H)]\\n    for v, i, j in points:\\n        d = abs(i-cx) + abs(j-cy)\\n        col = v - 1\\n        for r in range(H-1, H-1-d, -1):\\n            output[r][col] = v\\n    return output\"\n        },\n        {\n            \"input\": [\n                [0,8,8,8,8,8,8,8,8,8,0],\n                [8,0,2,0,0,0,0,0,3,0,8],\n                [8,0,0,9,0,6,0,9,0,0,8],\n                [8,0,0,9,1,0,9,0,0,7,8],\n                [8,0,4,0,0,0,0,0,5,0,8],\n                [0,8,8,8,8,8,8,8,8,8,0]\n            ],\n            \"output\": [\n                [0,0,3,0,0,0,0],\n                [0,0,3,0,5,0,7],\n                [0,2,3,0,5,0,7],\n                [0,2,3,4,5,0,7],\n                [0,2,3,4,5,6,7],\n                [0,2,3,4,5,6,7]\n            ],\n            \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    cx = cy = 0\\n    points = []\\n    for i in range(H):\\n        for j in range(W):\\n            v = grid[i][j]\\n            if v == 1:\\n                cx, cy = i, j\\n            elif v > 1:\\n                points.append((v, i, j))\\n    max_label = max(v for v, _, _ in points)\\n    output = [[0]*max_label for _ in range(H)]\\n    for v, i, j in points:\\n        d = abs(i-cx) + abs(j-cy)\\n        col = v - 1\\n        for r in range(H-1, H-1-d, -1):\\n            output[r][col] = v\\n    return output\"\n        }\n    ]\n}\n```"
  },
  {
    "filename": "8263efc3-aa3e-48f9-a3e0-7cc185bb4fcf.json",
    "uuid": "8263efc3-aa3e-48f9-a3e0-7cc185bb4fcf",
    "created": "2025-04-27 17:35:05",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [1,0,1,0,9,9,0,0,0,0,1],\n        [1,0,1,0,9,9,0,0,0,0,1],\n        [1,0,1,0,0,0,0,0,0,0,1],\n        [1,0,1,0,0,0,0,0,0,0,1],\n        [1,0,1,2,2,2,2,2,0,0,1],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [1,0,1,0,0,0,0,0,0,0,1],\n        [1,0,1,0,0,0,0,0,0,0,1],\n        [1,0,1,0,9,9,0,0,0,0,1],\n        [1,0,1,0,9,9,0,0,0,0,1],\n        [1,0,1,2,2,2,2,2,0,0,1],\n        [1,0,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def drop_cells(grid, drop_val):\\n    h, w = len(grid), len(grid[0])\\n    # find all drop positions\\n    drops = [(r,c) for r in range(h) for c in range(w) if grid[r][c]==drop_val]\\n    # compute maximum downward shift before collision\\n    max_shift = h\\n    for r,c in drops:\\n        shift = 0\\n        nr = r+1\\n        while nr<h and grid[nr][c] in (0,drop_val):\\n            nr += 1\\n            shift += 1\\n        # step back one so drop sits just above obstacle\\n        shift -= 1\\n        max_shift = min(max_shift, shift)\\n    # create new grid and apply shift\\n    new = [row[:] for row in grid]\\n    for r,c in drops:\\n        new[r][c] = 0\\n    for r,c in drops:\\n        new[r+max_shift][c] = drop_val\\n    return new\\n\\n# Example usage:\\n# grid1 = <the input array above>\\n# result = drop_cells(grid1, 9)\\n# assert result == <the output array above>\"\n    },\n    {\n      \"input\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,7,0,0,0,0,0,0,0,0,1],\n        [1,0,1,0,7,0,0,0,0,0,0,0,1],\n        [1,0,1,0,0,7,0,0,0,0,0,0,1],\n        [1,0,1,0,0,0,7,0,0,0,0,0,1],\n        [1,0,1,0,0,0,0,7,0,0,0,0,1],\n        [1,0,1,0,0,0,0,0,7,0,0,0,1],\n        [1,0,1,0,0,3,3,3,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,1,0,0,0,0,0,0,0,0,0,1],\n        [1,0,1,7,0,0,0,0,0,0,0,0,1],\n        [1,0,1,0,7,0,0,0,0,0,0,0,1],\n        [1,0,1,0,0,7,0,0,0,0,0,0,1],\n        [1,0,1,0,0,0,7,0,0,0,0,0,1],\n        [1,0,1,0,0,0,0,7,0,0,0,0,1],\n        [1,0,1,0,0,3,3,3,0,0,0,0,1],\n        [1,0,1,1,1,1,1,1,1,1,1,0,1],\n        [1,0,0,0,0,0,0,0,0,0,0,0,1],\n        [1,1,1,1,1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def drop_cells(grid, drop_val):\\n    h, w = len(grid), len(grid[0])\\n    drops = [(r,c) for r in range(h) for c in range(w) if grid[r][c]==drop_val]\\n    max_shift = h\\n    for r,c in drops:\\n        shift = 0\\n        nr = r+1\\n        while nr<h and grid[nr][c] in (0,drop_val):\\n            nr += 1\\n            shift += 1\\n        shift -= 1\\n        max_shift = min(max_shift, shift)\\n    new = [row[:] for row in grid]\\n    for r,c in drops:\\n        new[r][c] = 0\\n    for r,c in drops:\\n        new[r+max_shift][c] = drop_val\\n    return new\\n\\n# Example usage:\\n# grid2 = <the input array above>\\n# result = drop_cells(grid2, 7)\\n# assert result == <the output array above>\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "8d7063b9-c5cc-4086-beda-46607d8eb738.json",
    "uuid": "8d7063b9-c5cc-4086-beda-46607d8eb738",
    "created": "2025-04-27 01:44:05",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,0,0,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0,0],\n        [1,2,2,0,0,0,0,0,0],\n        [1,2,2,0,0,3,0,0,0],\n        [1,0,0,0,0,3,0,0,0],\n        [1,0,0,0,0,3,0,0,0],\n        [1,0,4,4,4,4,0,0,0],\n        [1,0,0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"output\": [\n        [1,0,0,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,3,0,0,0],\n        [1,2,2,0,0,3,0,0,0],\n        [1,2,2,4,4,3,0,0,0],\n        [1,1,1,1,1,1,1,1,1]\n      ],\n      \"code\": \"def drop_blocks(grid):\\n    R, C = len(grid), len(grid[0])\\n    new = [row[:] for row in grid]\\n    visited = [[False]*C for _ in range(R)]\\n    for r in range(R):\\n        for c in range(C):\\n            v = grid[r][c]\\n            if v > 1 and not visited[r][c]:\\n                coords = []\\n                stack = [(r,c)]\\n                visited[r][c] = True\\n                while stack:\\n                    x,y = stack.pop()\\n                    coords.append((x,y))\\n                    for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:\\n                        nx,ny = x+dx, y+dy\\n                        if 0<=nx<R and 0<=ny<C and not visited[nx][ny] and grid[nx][ny]==v:\\n                            visited[nx][ny] = True\\n                            stack.append((nx,ny))\\n                drop = R\\n                for x,y in coords:\\n                    d = 0\\n                    nx = x+1\\n                    while nx<R and grid[nx][y] != 1:\\n                        d += 1\\n                        nx += 1\\n                    drop = min(drop, d)\\n                for x,y in coords:\\n                    new[x][y] = 0\\n                for x,y in coords:\\n                    new[x+drop][y] = v\\n    return new\\n\\n# Example usage:\\n# output_grid = drop_blocks(input_grid)\"\n    },\n    {\n      \"input\": [\n        [1,0,0,0,0,0,0,0,0,0],\n        [1,1,0,0,0,0,0,0,0,0],\n        [1,0,0,0,0,0,0,0,0,0]"
  },
  {
    "filename": "8b626f50-ad34-4fc2-8dfa-f255539b4dd9.json",
    "uuid": "8b626f50-ad34-4fc2-8dfa-f255539b4dd9",
    "created": "2025-04-27 21:40:50",
    "description": "```json\n{\n    \"task\": [\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,2,2,2,0,0,0,0,0],\n                [0,0,0,0,0,2,2,2,0,0,0,0,0],\n                [0,0,0,0,0,2,2,2,0,0,0,0,0],\n                [0,0,5,5,5,0,0,0,3,3,3,0,0],\n                [0,0,5,5,5,0,0,0,3,3,3,0,0],\n                [0,0,5,5,5,0,0,0,3,3,3,0,0],\n                [0,0,0,0,0,4,4,4,0,0,0,0,0],\n                [0,0,0,0,0,4,4,4,0,0,0,0,0],\n                [0,0,0,0,0,4,4,4,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"output\": [\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,5,5,5,0,0,0,0,0],\n                [0,0,0,0,0,5,5,5,0,0,0,0,0],\n                [0,0,0,0,0,5,5,5,0,0,0,0,0],\n                [0,0,4,4,4,0,0,0,2,2,2,0,0],\n                [0,0,4,4,4,0,0,0,2,2,2,0,0],\n                [0,0,4,4,4,0,0,0,2,2,2,0,0],\n                [0,0,0,0,0,3,3,3,0,0,0,0,0],\n                [0,0,0,0,0,3,3,3,0,0,0,0,0],\n                [0,0,0,0,0,3,3,3,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0,0,0,0,0,0,0]\n            ],\n            \"code\": \"import copy\\n\\ndef rotate90(arr):\\n    N = len(arr)\\n    # center index\\n    cx = cy = N // 2\\n    out = [[0]*N for _ in range(N)]\\n    for r in range(N):\\n        for c in range(N):\\n            v = arr[r][c]\\n            if v != 0:\\n                dr = r - cx\\n                dc = c - cy\\n                # rotate 90° CW: (dr,dc) -> (dc, -dr)\\n                nr = cx + dc\\n                nc = cy - dr\\n                out[nr][nc] = v\\n    return out\\n\\n# Example usage:\\ninput_arr = \" + \"input\" + \"\\noutput_arr = rotate90(input_arr)\\nprint(output_arr)\\n\"\n        },\n        {\n            \"input\": [\n                [0,0,0,0,0,0,0,0,0,0,0,0,0],\n"
  },
  {
    "filename": "9d611043-f106-4323-b125-c6779f927cd0.json",
    "uuid": "9d611043-f106-4323-b125-c6779f927cd0",
    "created": "2025-04-27 23:06:18",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,7,0,0,0,0,0,0],\n        [0,0,0,7,7,7,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    coords = [(r,c) for r in range(h) for c in range(w) if grid[r][c] != 0]\\n    compset = set(coords)\\n    def neighbors(r,c):\\n        return [(r+dr,c+dc) for dr,dc in ((1,0),(-1,0),(0,1),(0,-1)) if (r+dr,c+dc) in compset]\\n    protr = [p for p in coords if len(neighbors(*p)) == 1][0]\\n    body = [p for p in coords if p != protr]\\n    minr = min(r for r,c in body); maxr = max(r for r,c in body)\\n    minc = min(c for r,c in body); maxc = max(c for r,c in body)\\n    pr,pc = protr\\n    if pr == minr - 1:\\n        dr,dc = -1,0\\n    elif pr == maxr + 1:\\n        dr,dc = 1,0\\n    elif pc == minc - 1:\\n        dr,dc = 0,-1\\n    elif pc == maxc + 1:\\n        dr,dc = 0,1\\n    else:\\n        dr,dc = 0,0\\n    new = [[0]*w for _ in range(h)]\\n    for r,c in coords:\\n        new[r+dr][c+dc] = grid[r][c]\\n    return new\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,8,0,0,0,0,0],\n        [0,0,0,0,9,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def solve(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    coords = [(r,c) for r in range(h) for c in range(w) if grid[r][c] != 0]\\n    compset = set(coords)\\n    def neighbors(r,c):\\n        return [(r+dr,c+dc) for dr,dc in ((1,0),(-1,0),(0,1),(0,-1)) if (r+dr,c+dc) in compset]\\n    protr = [p for p in coords if len(neighbors(*p)) == 1][0]\\n    body = [p for p in coords if p != protr]\\n    minr = min(r for r,c in body); maxr = max(r for r,c in body)\\n    minc = min(c for r,c in body); maxc = max(c for r,c in body)\\n    pr,pc = protr\\n    if pr == minr - 1:\\n        dr,dc = -1,0\\n    elif pr == maxr + 1:\\n        dr,dc = 1,0\\n    elif pc == minc - 1:\\n        dr,dc = 0,-1\\n    elif pc == maxc + 1:\\n        dr,dc = 0,1\\n    else:\\n        dr,dc = 0,0\\n    new = [[0]*w for _ in range(h)]\\n    for r,c in coords:\\n        new[r+dr][c+dc] = grid[r][c]\\n    return new\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9476d94a-d88f-450c-b01b-f05bc6ae064a.json",
    "uuid": "9476d94a-d88f-450c-b01b-f05bc6ae064a",
    "created": "2025-04-27 14:49:23",
    "description": "좋아 이제 input을 바탕으로 Output을 만드는 소스코드를 짜서 code안에 넣어어 줘\n\n```json\n{\n    \"task\":[\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"},\n        {\"input\": [...], \"output\": [...], \"code\": \"…\"}\n    ]\n}\n```"
  },
  {
    "filename": "ad61f3f9-cc70-48c8-9a13-c82b32e5350b.json",
    "uuid": "ad61f3f9-cc70-48c8-9a13-c82b32e5350b",
    "created": "2025-04-27 02:16:15",
    "description": ""
  },
  {
    "filename": "941bfdbe-6c7c-4e75-b171-3bbcd53df36a.json",
    "uuid": "941bfdbe-6c7c-4e75-b171-3bbcd53df36a",
    "created": "2025-04-28 05:07:22",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,2,1,1,1,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"output\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,2,1,1,1,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    H, W = len(grid), len(grid[0])\\n    # find centroid (value 2)\\n    cy = cx = -1\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] == 2:\\n                cy, cx = y, x\\n    # prepare output grid\\n    res = [[0]*W for _ in range(H)]\\n    # copy frame (3) and centroid (2)\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] in (2, 3):\\n                res[y][x] = grid[y][x]\\n    # rotate each border cell (1)\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] == 1:\\n                dy, dx = y - cy, x - cx\\n                ny, nx = cy + dx, cx - dy\\n                res[ny][nx] = 1\\n    return res\\n\\n# apply to the given input\\ninput_grid = [\\n  [3,3,3,3,3,3,3,3,3,3,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,2,1,1,1,0,3],\\n  [3,0,0,0,0,1,0,0,0,0,3],\\n  [3,0,0,0,0,1,0,0,0,0,3],\\n  [3,0,0,0,0,1,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,3,3,3,3,3,3,3,3,3,3]\\n]\\nresult = rotate_ccw(input_grid)\\nprint(result)\"\n    },\n    {\n      \"input\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,1,1,1,0,0,0,3],\n        [3,0,0,0,0,1,0,0,0,0,3],\n        [3,0,0,0,0,2,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"output\": [\n        [3,3,3,3,3,3,3,3,3,3,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,1,0,0,0,0,0,0,3],\n        [3,0,1,1,1,2,0,0,0,0,3],\n        [3,0,0,1,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,0,0,0,0,0,0,0,0,0,3],\n        [3,3,3,3,3,3,3,3,3,3,3]\n      ],\n      \"code\": \"def rotate_ccw(grid):\\n    H, W = len(grid), len(grid[0])\\n    # find centroid (value 2)\\n    cy = cx = -1\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] == 2:\\n                cy, cx = y, x\\n    # prepare output grid\\n    res = [[0]*W for _ in range(H)]\\n    # copy frame (3) and centroid (2)\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] in (2, 3):\\n                res[y][x] = grid[y][x]\\n    # rotate each border cell (1)\\n    for y in range(H):\\n        for x in range(W):\\n            if grid[y][x] == 1:\\n                dy, dx = y - cy, x - cx\\n                ny, nx = cy + dx, cx - dy\\n                res[ny][nx] = 1\\n    return res\\n\\n# apply to the given input\\ninput_grid = [\\n  [3,3,3,3,3,3,3,3,3,3,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,1,0,0,0,0,3],\\n  [3,0,0,0,1,1,1,0,0,0,3],\\n  [3,0,0,0,0,1,0,0,0,0,3],\\n  [3,0,0,0,0,2,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,0,0,0,0,0,0,0,0,0,3],\\n  [3,3,3,3,3,3,3,3,3,3,3]\\n]\\nresult = rotate_ccw(input_grid)\\nprint(result)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "9970d063-77e2-47ca-b505-cd1144abc3b8.json",
    "uuid": "9970d063-77e2-47ca-b505-cd1144abc3b8",
    "created": "2025-04-27 21:20:16",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [1,1,3,1,1,1,1],\n        [2,2,2,2,2,2,2],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [1,1,3,1,1,1,1],\n        [2,2,2,2,2,2,2],\n        [1,1,0,1,1,1,1],\n        [0,1,1,1,1,1,0],\n        [0,0,1,1,1,0,0]\n      ],\n      \"code\": \"matrix = [\\n    [0,0,1,1,1,0,0],\\n    [0,1,1,1,1,1,0],\\n    [1,1,3,1,1,1,1],\\n    [2,2,2,2,2,2,2],\\n    [0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0]\\n]\\n# find the horizontal axis row where all entries == 2\\naxis = next(i for i,row in enumerate(matrix) if all(x==2 for x in row))\\nH = len(matrix)\\nW = len(matrix[0])\\n# make a deep copy of the matrix for output\\nout = [row[:] for row in matrix]\\n# reflect all 1s above the axis to symmetric positions below\\nfor i in range(axis):\\n    for j in range(W):\\n        if matrix[i][j] == 1:\\n            i2 = axis + (axis - i)\\n            if 0 <= i2 < H:\\n                out[i2][j] = 1\\nprint(out)\"\n    },\n    {\n      \"input\": [\n        [4,0,0,0,0,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,1,1,1,1,1,0],\n        [0,0,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [4,0,0,0,0,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,1,1,1,1,1,0],\n        [0,0,1,1,1,1,1,1,1],\n        [2,2,2,2,2,2,2,2,2],\n        [0,0,1,1,1,1,1,1,1],\n        [0,0,0,1,1,1,1,1,0],\n        [0,0,0,0,1,1,1,0,0],\n        [0,0,0,0,0,1,0,0,0]\n      ],\n      \"code\": \"matrix = [\\n    [4,0,0,0,0,1,0,0,0],\\n    [0,0,0,0,1,1,1,0,0],\\n    [0,0,0,1,1,1,1,1,0],\\n    [0,0,1,1,1,1,1,1,1],\\n    [2,2,2,2,2,2,2,2,2],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0],\\n    [0,0,0,0,0,0,0,0,0]\\n]\\naxis = next(i for i,row in enumerate(matrix) if all(x==2 for x in row))\\nH = len(matrix)\\nW = len(matrix[0])\\nout = [row[:] for row in matrix]\\nfor i in range(axis):\\n    for j in range(W):\\n        if matrix[i][j] == 1:\\n            i2 = axis + (axis - i)\\n            if 0 <= i2 < H:\\n                out[i2][j] = 1\\nprint(out)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "b926eb29-29af-4512-8d8c-7b6e359975d3.json",
    "uuid": "b926eb29-29af-4512-8d8c-7b6e359975d3",
    "created": "2025-04-27 03:41:39",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,1,0,1,0,0,0,0,0],\n        [0,0,0,0,1,0,4,0,1,0,0,0,0],\n        [0,0,0,1,0,4,5,4,0,1,0,0,0],\n        [0,0,1,0,0,0,4,0,0,0,1,0,0],\n        [0,1,0,0,0,3,3,3,0,0,1,0,0],\n        [0,0,1,0,0,0,0,0,0,0,1,0,0],\n        [0,0,0,1,0,0,0,0,0,1,0,0,0],\n        [0,0,0,0,1,0,0,0,1,0,0,0,0],\n        [0,0,0,0,0,1,0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,1,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,3,0,0,0,0,0],\n        [0,0,0,0,3,0,4,0,3,0,0,0,0],\n        [0,0,0,3,0,4,5,4,0,3,0,0,0],\n        [0,0,3,0,0,0,4,0,0,0,3,0,0],\n        [0,3,0,0,0,1,1,1,0,0,3,0,0],\n        [0,0,3,0,0,0,0,0,0,0,3,0,0],\n        [0,0,0,3,0,0,0,0,0,3,0,0,0],\n        [0,0,0,0,3,0,0,0,3,0,0,0,0],\n        [0,0,0,0,0,3,0,3,0,0,0,0,0],\n        [0,0,0,0,0,0,3,0,0,0,0,0,0],\n    "
  },
  {
    "filename": "c36ee134-7a5d-4ae3-a133-0d68226941c9.json",
    "uuid": "c36ee134-7a5d-4ae3-a133-0d68226941c9",
    "created": "2025-04-27 23:58:13",
    "description": ""
  },
  {
    "filename": "c048d46a-047f-429d-a835-badbfe9ddfd5.json",
    "uuid": "c048d46a-047f-429d-a835-badbfe9ddfd5",
    "created": "2025-04-27 04:41:28",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,2,0,0,0,0,0],\n        [3,3,3,0,2,0,2,0,0,0,0],\n        [0,3,0,2,0,1,0,2,0,0,0],\n        [0,0,2,0,1,1,1,0,2,0,0],\n        [0,2,0,1,1,1,1,1,0,2,0],\n        [0,0,2,0,1,1,1,0,2,0,0],\n        [0,0,0,2,0,1,0,2,0,0,0],\n        [0,0,0,0,2,0,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,4,4,0],\n        [0,0,0,0,0,0,0,0,4,4,0]\n      ],\n      \"output\": [\n        [0,0,0,0,2,0,2,0,0,0,0],\n        [0,3,0,2,0,2,0,2,0,0,0],\n        [3,3,3,0,2,1,2,0,0,0,0],\n        [0,3,0,2,1,1,1,2,0,2,0],\n        [2,0,2,1,1,1,1,1,2,0,2],\n        [0,2,1,1,1,1,1,2,1,1,0],\n        [2,0,2,1,1,1,1,1,2,0,2],\n        [0,2,0,2,1,1,1,2,0,2,0],\n        [0,0,2,0,2,1,2,0,2,0,0],\n        [0,0,0,2,0,2,0,2,0,4,4],\n        [0,0,0,0,2,0,2,0,0,4,4]\n      ],\n      \"code\": \"def transform(grid):\\n    # find all 1s to detect center\\n    ones = [(i,j) for i,row in enumerate(grid) for j,v in enumerate(row) if v==1]\\n    cx = sum(i for i,_ in ones)//len(ones)\\n    cy = sum(j for _,j in ones)//len(ones)\\n    # Manhattan radius\\n    R = max(abs(i-cx)+abs(j-cy) for i,j in ones)\\n    # original ring distances\\n    ring_ds = {abs(i-cx)+abs(j-cy) for i,row in enumerate(grid) for j,v in enumerate(row) if v==2}\\n    new_ds = ring_ds | {d+2 for d in ring_ds}\\n    H, W = len(grid), len(grid[0])\\n    # start from copy of grid, clear 1 and 2\\n    out = [[v if v not in (1,2) else 0 for v in row] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            d = abs(i-cx)+abs(j-cy)\\n            if d <= R+1:\\n                out[i][j] = 1\\n            elif d in new_ds:\\n                out[i][j] = 2\\n    return out\\n\\n# Example usage:\\n# result = transform(input_grid)\\n\"\n    },\n    {\n      \"input\": [\n        [3,0,0,0,0,0,0,0,0,0,4],\n        [0,3,0,0,0,2,0,0,0,0,4],\n        [0,0,3,0,2,0,2,0,4,0,0],\n        [0,0,0,3,0,1,0,4,0,0,0],\n        [0,0,2,0,3,1,4,0,2,0,0],\n        [0,2,0,1,1,1,1,1,0,2,0],\n        [0,0,2,0,1,1,1,0,2,0,0],\n        [0,0,0,2,0,1,0,2,0,0,0],\n        [0,0,0,0,2,0,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [3,0,0,0,2,0,2,0,0,0,4],\n        [0,3,0,2,0,2,0,2,0,0,4],\n        [0,0,3,0,2,1,2,0,4,0,0],\n        [0,0,0,2,1,1,1,4,0,2,0],\n        [2,0,2,1,3,1,4,1,2,0,2],\n        [0,2,1,1,1,1,1,2,1,1,0],\n        [2,0,2,1,1,1,1,2,0,2,0],\n        [0,2,0,2,1,1,1,2,0,2,0],\n        [0,0,2,0,2,1,2,0,2,0,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,0,0,2,0,2,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    ones = [(i,j) for i,row in enumerate(grid) for j,v in enumerate(row) if v==1]\\n    cx = sum(i for i,_ in ones)//len(ones)\\n    cy = sum(j for _,j in ones)//len(ones)\\n    R = max(abs(i-cx)+abs(j-cy) for i,j in ones)\\n    ring_ds = {abs(i-cx)+abs(j-cy) for i,row in enumerate(grid) for j,v in enumerate(row) if v==2}\\n    new_ds = ring_ds | {d+2 for d in ring_ds}\\n    H, W = len(grid), len(grid[0])\\n    out = [[v if v not in (1,2) else 0 for v in row] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            d = abs(i-cx)+abs(j-cy)\\n            if d <= R+1:\\n                out[i][j] = 1\\n            elif d in new_ds:\\n                out[i][j] = 2\\n    return out\\n\"\n    },\n    {\n      \"input\": [\n        [5,5,5,5,5,5,5,5,5,5,5],\n        [6,0,0,0,0,2,0,0,0,0,6],\n        [6,0,0,0,2,0,2,0,0,0,6],\n        [6,0,0,2,0,1,0,2,0,0,6],\n        [6,0,2,0,1,1,1,0,2,0,6],\n        [6,2,0,1,1,1,1,1,0,2,6],\n        [6,0,2,0,1,1,1,0,2,0,6],\n        [6,0,0,2,0,1,0,2,0,0,6],\n        [6,0,0,0,2,0,2,0,0,0,6],\n        [6,0,0,0,0,2,0,0,0,0,6],\n        [5,5,5,5,5,5,5,5,5,5,5]\n      ],\n      \"output\": [\n        [5,5,5,5,5,5,5,5,5,5,5],\n        [6,0,0,2,0,2,0,2,0,0,6],\n        [6,0,2,0,2,1,2,0,2,0,6],\n        [6,2,0,2,1,1,1,2,0,2,6],\n        [6,0,2,1,1,1,1,1,2,0,6],\n        [6,2,1,1,1,1,1,1,1,2,6],\n        [6,0,2,1,1,1,1,1,2,0,6],\n        [6,2,0,2,1,1,1,2,0,2,6],\n        [6,0,2,0,2,1,2,0,2,0,6],\n        [6,0,0,2,0,2,0,2,0,0,6],\n        [5,5,5,5,5,5,5,5,5,5,5]\n      ],\n      \"code\": \"def transform(grid):\\n    ones = [(i,j) for i,row in enumerate(grid) for j,v in enumerate(row) if v==1]\\n    cx = sum(i for i,_ in ones)//len(ones)\\n    cy = sum(j for _,j in ones)//len(ones)\\n    R = max(abs(i-cx)+abs(j-cy) for i,j in ones)\\n    ring_ds = {abs(i-cx)+abs(j-cy) for i,row in enumerate(grid) for j,v in enumerate(row) if v==2}\\n    new_ds = ring_ds | {d+2 for d in ring_ds}\\n    H, W = len(grid), len(grid[0])\\n    out = [[v if v not in (1,2) else 0 for v in row] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            d = abs(i-cx)+abs(j-cy)\\n            if d <= R+1:\\n                out[i][j] = 1\\n            elif d in new_ds:\\n                out[i][j] = 2\\n    return out\\n\"\n    },\n    {\n      \"input\": [\n        [7,8,7,8,0,0,0,0,0,0,0],\n        [8,7,8,7,0,2,0,0,0,0,0],\n        [7,8,7,8,2,0,2,0,0,0,0],\n        [8,7,8,7,0,1,0,2,0,0,0],\n        [0,0,2,0,1,1,1,0,2,0,0],\n        [0,2,0,1,1,1,1,1,0,2,0],\n        [0,0,2,0,1,1,1,0,2,0,0],\n        [0,0,0,2,0,1,0,2,0,0,0],\n        [0,0,0,0,2,0,2,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [7,8,7,8,2,0,2,0,0,0,0],\n        [8,7,8,7,0,2,0,2,0,0,0],\n        [7,8,7,8,2,1,2,0,2,0,0],\n        [8,7,8,7,1,1,1,2,0,2,0],\n        [2,0,2,1,1,1,1,1,2,0,2],\n        [0,2,1,1,1,1,1,2,1,1,0],\n        [2,0,2,1,1,1,1,1,2,0,2],\n        [0,2,0,2,1,1,1,2,0,2,0],\n        [0,0,2,0,2,1,2,0,2,0,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,0,0,2,0,2,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    ones = [(i,j) for i,row in enumerate(grid) for j,v in enumerate(row) if v==1]\\n    cx = sum(i for i,_ in ones)//len(ones)\\n    cy = sum(j for _,j in ones)//len(ones)\\n    R = max(abs(i-cx)+abs(j-cy) for i,j in ones)\\n    ring_ds = {abs(i-cx)+abs(j-cy) for i,row in enumerate(grid) for j,v in enumerate(row) if v==2}\\n    new_ds = ring_ds | {d+2 for d in ring_ds}\\n    H, W = len(grid), len(grid[0])\\n    out = [[v if v not in (1,2) else 0 for v in row] for row in grid]\\n    for i in range(H):\\n        for j in range(W):\\n            d = abs(i-cx)+abs(j-cy)\\n            if d <= R+1:\\n                out[i][j] = 1\\n            elif d in new_ds:\\n                out[i][j] = 2\\n    return out\\n\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "d6017b6f-37cb-401e-83f0-539fbe86cd05.json",
    "uuid": "d6017b6f-37cb-401e-83f0-539fbe86cd05",
    "created": "2025-04-28 05:41:19",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8],\n        [8,0,0,0,0,0,0,1],\n        [7,0,9,9,9,0,0,2],\n        [6,0,9,9,9,0,0,3],\n        [5,0,9,9,9,7,7,0],\n        [4,0,0,0,7,7,0,0],\n        [3,0,0,0,0,0,0,6],\n        [2,1,8,7,6,5,4,3]\n      ],\n      \"output\": [\n        [7,8,1,2,3,4,5,6],\n        [2,0,0,0,0,0,0,7],\n        [1,0,9,9,9,0,0,8],\n        [8,0,9,9,9,0,0,1],\n        [7,0,9,9,9,7,7,2],\n        [6,0,0,0,7,7,0,3],\n        [5,0,0,0,0,0,0,4],\n        [4,3,2,1,8,7,6,5]\n      ],\n      \"code\": \"def rotate_border(grid,k=2):\\n    n=len(grid)\\n    b=[]\\n    b+=grid[0]\\n    for i in range(1,n-1): b.append(grid[i][n-1])\\n    b+=grid[n-1][::-1]\\n    for i in range(n-2,0,-1): b.append(grid[i][0])\\n    k%=len(b)\\n    b=b[-k:]+b[:-k]\\n    res=[row[:] for row in grid]\\n    idx=0\\n    for j in range(n): res[0][j]=b[idx]; idx+=1\\n    for i in range(1,n-1): res[i][n-1]=b[idx]; idx+=1\\n    for j in range(n-1,-1,-1): res[n-1][j]=b[idx]; idx+=1\\n    for i in range(n-2,0,-1): res[i][0]=b[idx]; idx+=1\\n    return res\\n\\ngrid = [\\n  [1,2,3,4,5,6,7,8],\\n  [8,0,0,0,0,0,0,1],\\n  [7,0,9,9,9,0,0,2],\\n  [6,0,9,9,9,0,0,3],\\n  [5,0,9,9,9,7,7,0],\\n  [4,0,0,0,7,7,0,0],\\n  [3,0,0,0,0,0,0,6],\\n  [2,1,8,7,6,5,4,3]\\n]\\nprint(rotate_border(grid,2))\"\n    },\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8],\n        [8,0,0,0,0,0,0,1],\n        [7,0,0,6,0,0,0,2],\n        [6,0,6,6,6,0,0,3],\n        [5,0,0,6,0,0,0,4],\n        [4,0,0,0,0,0,0,5],\n        [3,0,0,0,0,0,0,6],\n        [2,1,8,7,6,5,4,3]\n      ],\n      \"output\": [\n        [7,8,1,2,3,4,5,6],\n        [2,0,0,0,0,0,0,7],\n        [1,0,0,6,0,0,0,8],\n        [8,0,6,6,6,0,0,1],\n        [7,0,0,6,0,0,0,2],\n        [6,0,0,0,0,0,0,3],\n        [5,0,0,0,0,0,0,4],\n        [4,3,2,1,8,7,6,5]\n      ],\n      \"code\": \"def rotate_border(grid,k=2):\\n    n=len(grid)\\n    b=[]\\n    b+=grid[0]\\n    for i in range(1,n-1): b.append(grid[i][n-1])\\n    b+=grid[n-1][::-1]\\n    for i in range(n-2,0,-1): b.append(grid[i][0])\\n    k%=len(b)\\n    b=b[-k:]+b[:-k]\\n    res=[row[:] for row in grid]\\n    idx=0\\n    for j in range(n): res[0][j]=b[idx]; idx+=1\\n    for i in range(1,n-1): res[i][n-1]=b[idx]; idx+=1\\n    for j in range(n-1,-1,-1): res[n-1][j]=b[idx]; idx+=1\\n    for i in range(n-2,0,-1): res[i][0]=b[idx]; idx+=1\\n    return res\\n\\ngrid = [\\n  [1,2,3,4,5,6,7,8],\\n  [8,0,0,0,0,0,0,1],\\n  [7,0,0,6,0,0,0,2],\\n  [6,0,6,6,6,0,0,3],\\n  [5,0,0,6,0,0,0,4],\\n  [4,0,0,0,0,0,0,5],\\n  [3,0,0,0,0,0,0,6],\\n  [2,1,8,7,6,5,4,3]\\n]\\nprint(rotate_border(grid,2))\"\n    },\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8],\n        [8,8,0,0,0,0,0,1],\n        [7,0,8,0,0,0,0,2],\n        [6,0,0,8,0,0,0,3],\n        [5,0,0,0,8,0,0,4],\n        [4,0,0,0,0,8,0,5],\n        [3,0,0,0,0,0,8,6],\n        [2,1,8,7,6,5,4,3]\n      ],\n      \"output\": [\n        [7,8,1,2,3,4,5,6],\n        [2,8,0,0,0,0,0,7],\n        [1,0,8,0,0,0,0,8],\n        [8,0,0,8,0,0,0,1],\n        [7,0,0,0,8,0,0,2],\n        [6,0,0,0,0,8,0,3],\n        [5,0,0,0,0,0,8,4],\n        [4,3,2,1,8,7,6,5]\n      ],\n      \"code\": \"def rotate_border(grid,k=2):\\n    n=len(grid)\\n    b=[]\\n    b+=grid[0]\\n    for i in range(1,n-1): b.append(grid[i][n-1])\\n    b+=grid[n-1][::-1]\\n    for i in range(n-2,0,-1): b.append(grid[i][0])\\n    k%=len(b)\\n    b=b[-k:]+b[:-k]\\n    res=[row[:] for row in grid]\\n    idx=0\\n    for j in range(n): res[0][j]=b[idx]; idx+=1\\n    for i in range(1,n-1): res[i][n-1]=b[idx]; idx+=1\\n    for j in range(n-1,-1,-1): res[n-1][j]=b[idx]; idx+=1\\n    for i in range(n-2,0,-1): res[i][0]=b[idx]; idx+=1\\n    return res\\n\\ngrid = [\\n  [1,2,3,4,5,6,7,8],\\n  [8,8,0,0,0,0,0,1],\\n  [7,0,8,0,0,0,0,2],\\n  [6,0,0,8,0,0,0,3],\\n  [5,0,0,0,8,0,0,4],\\n  [4,0,0,0,0,8,0,5],\\n  [3,0,0,0,0,0,8,6],\\n  [2,1,8,7,6,5,4,3]\\n]\\nprint(rotate_border(grid,2))\"\n    },\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8],\n        [8,0,0,0,0,0,0,1],\n        [7,0,5,5,5,5,0,2],\n        [6,0,5,0,0,5,0,3],\n        [5,0,5,0,0,5,0,4],\n        [4,0,5,5,5,5,0,5],\n        [3,0,0,0,0,0,0,6],\n        [2,1,8,7,6,5,4,3]\n      ],\n      \"output\": [\n        [7,8,1,2,3,4,5,6],\n        [2,0,0,0,0,0,0,7],\n        [1,0,5,5,5,5,0,8],\n        [8,0,5,0,0,5,0,1],\n        [7,0,5,0,0,5,0,2],\n        [6,0,5,5,5,5,0,3],\n        [5,0,0,0,0,0,0,4],\n        [4,3,2,1,8,7,6,5]\n      ],\n      \"code\": \"def rotate_border(grid,k=2):\\n    n=len(grid)\\n    b=[]\\n    b+=grid[0]\\n    for i in range(1,n-1): b.append(grid[i][n-1])\\n    b+=grid[n-1][::-1]\\n    for i in range(n-2,0,-1): b.append(grid[i][0])\\n    k%=len(b)\\n    b=b[-k:]+b[:-k]\\n    res=[row[:] for row in grid]\\n    idx=0\\n    for j in range(n): res[0][j]=b[idx]; idx+=1\\n    for i in range(1,n-1): res[i][n-1]=b[idx]; idx+=1\\n    for j in range(n-1,-1,-1): res[n-1][j]=b[idx]; idx+=1\\n    for i in range(n-2,0,-1): res[i][0]=b[idx]; idx+=1\\n    return res\\n\\ngrid = [\\n  [1,2,3,4,5,6,7,8],\\n  [8,0,0,0,0,0,0,1],\\n  [7,0,5,5,5,5,0,2],\\n  [6,0,5,0,0,5,0,3],\\n  [5,0,5,0,0,5,0,4],\\n  [4,0,5,5,5,5,0,5],\\n  [3,0,0,0,0,0,0,6],\\n  [2,1,8,7,6,5,4,3]\\n]\\nprint(rotate_border(grid,2))\"\n    },\n    {\n      \"input\": [\n        [1,2,3,4,5,6,7,8],\n        [8,0,0,0,0,0,0,1],\n        [7,0,9,9,9,0,0,2],\n        [6,0,9,4,9,0,0,3],\n        [5,0,9,9,9,0,0,4],\n        [4,0,0,0,0,0,0,5],\n        [3,0,0,0,0,0,0,6],\n        [2,1,8,7,6,5,4,3]\n      ],\n      \"output\": [\n        [7,8,1,2,3,4,5,6],\n        [2,0,0,0,0,0,0,7],\n        [1,0,9,9,9,0,0,8],\n        [8,0,9,4,9,0,0,1],\n        [7,0,9,9,9,0,0,2],\n        [6,0,0,0,0,0,0,3],\n        [5,0,0,0,0,0,0,4],\n        [4,3,2,1,8,7,6,5]\n      ],\n      \"code\": \"def rotate_border(grid,k=2):\\n    n=len(grid)\\n    b=[]\\n    b+=grid[0]\\n    for i in range(1,n-1): b.append(grid[i][n-1])\\n    b+=grid[n-1][::-1]\\n    for i in range(n-2,0,-1): b.append(grid[i][0])\\n    k%=len(b)\\n    b=b[-k:]+b[:-k]\\n    res=[row[:] for row in grid]\\n    idx=0\\n    for j in range(n): res[0][j]=b[idx]; idx+=1\\n    for i in range(1,n-1): res[i][n-1]=b[idx]; idx+=1\\n    for j in range(n-1,-1,-1): res[n-1][j]=b[idx]; idx+=1\\n    for i in range(n-2,0,-1): res[i][0]=b[idx]; idx+=1\\n    return res\\n\\ngrid = [\\n  [1,2,3,4,5,6,7,8],\\n  [8,0,0,0,0,0,0,1],\\n  [7,0,9,9,9,0,0,2],\\n  [6,0,9,4,9,0,0,3],\\n  [5,0,9,9,9,0,0,4],\\n  [4,0,0,0,0,0,0,5],\\n  [3,0,0,0,0,0,0,6],\\n  [2,1,8,7,6,5,4,3]\\n]\\nprint(rotate_border(grid,2))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "e5a7693b-d5de-4efd-bdc2-ee557eb0642a.json",
    "uuid": "e5a7693b-d5de-4efd-bdc2-ee557eb0642a",
    "created": "2025-04-28 04:05:27",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,1,1,2,2,3,3,4,4,0],\n        [4,0,0,0,0,0,0,0,0,1],\n        [4,0,8,8,8,8,8,8,0,1],\n        [4,0,8,9,9,9,9,8,0,1],\n        [3,0,8,9,7,7,9,8,0,1],\n        [3,0,8,9,7,7,9,8,0,1],\n        [2,0,8,9,9,9,9,8,0,1],\n        [2,0,0,0,0,0,0,0,0,1],\n        [4,0,8,8,8,8,8,8,0,1],\n        [0,3,3,2,2,3,3,4,4,0]\n      ],\n      \"output\": [\n        [0,1,2,2,3,3,4,4,1,0],\n        [1,0,0,0,0,0,0,0,0,1],\n        [4,0,8,8,8,8,8,8,0,1],\n        [4,0,8,9,9,9,9,8,0,1],\n        [3,0,8,9,7,7,9,8,0,1],\n        [3,0,8,9,7,7,9,8,0,1],\n        [2,0,8,9,9,9,9,8,0,1],\n        [2,0,0,0,0,0,0,0,0,1],\n        [4,0,8,8,8,8,8,8,0,1],\n        [0,3,3,2,2,3,3,4,4,0]\n      ],\n      \"code\": \"grid = [\\n  [0,1,1,2,2,3,3,4,4,0],\\n  [4,0,0,0,0,0,0,0,0,1],\\n  [4,0,8,8,8,8,8,8,0,1],\\n  [4,0,8,9,9,9,9,8,0,1],\\n  [3,0,8,9,7,7,9,8,0,1],\\n  [3,0,8,9,7,7,9,8,0,1],\\n  [2,0,8,9,9,9,9,8,0,1],\\n  [2,0,0,0,0,0,0,0,0,1],\\n  [4,0,8,8,8,8,8,8,0,1],\\n  [0,3,3,2,2,3,3,4,4,0]\\n]\\n\\ndef shift_border_anticlockwise(grid):\\n    H, W = len(grid), len(grid[0])\\n    border_vals = []\\n    positions = []\\n    # top row\\n    for j in range(W):\\n        if grid[0][j] != 0:\\n            positions.append((0,j)); border_vals.append(grid[0][j])\\n    # right col\\n    for i in range(1, H):\\n        if grid[i][W-1] != 0:\\n            positions.append((i,W-1)); border_vals.append(grid[i][W-1])\\n    # bottom row\\n    for j in range(W-2, -1, -1):\\n        if grid[H-1][j] != 0:\\n            positions.append((H-1,j)); border_vals.append(grid[H-1][j])\\n    # left col\\n    for i in range(H-2, 0, -1):\\n        if grid[i][0] != 0:\\n            positions.append((i,0)); border_vals.append(grid[i][0])\\n    # shift anticlockwise by one\\n    new_vals = border_vals[1:] + border_vals[:1]\\n    for (i,j), v in zip(positions, new_vals):\\n        grid[i][j] = v\\n    return grid\\n\\nprint(shift_border_anticlockwise(grid))\"\n    },\n    {\n      \"input\": [\n        [0,6,6,7,7,6,6,0],\n        [8,0,5,5,5,5,0,9],\n        [8,0,5,9,9,5,0,9],\n        [8,0,5,9,7,5,0,9],\n        [8,0,5,7,7,5,0,9],\n        [8,0,5,5,5,5,0,9],\n        [9,0,8,8,8,8,0,6],\n        [0,3,3,4,4,3,3,0]\n      ],\n      \"output\": [\n        [0,6,7,7,6,6,9,0],\n        [6,0,5,5,5,5,0,9],\n        [8,0,5,9,9,5,0,9],\n        [8,0,5,9,7,5,0,9],\n        [8,0,5,7,7,5,0,9],\n        [8,0,5,5,5,5,0,9],\n        [6,0,8,8,8,8,0,6],\n        [0,9,3,3,4,4,3,0]\n      ],\n      \"code\": \"grid = [\\n  [0,6,6,7,7,6,6,0],\\n  [8,0,5,5,5,5,0,9],\\n  [8,0,5,9,9,5,0,9],\\n  [8,0,5,9,7,5,0,9],\\n  [8,0,5,7,7,5,0,9],\\n  [8,0,5,5,5,5,0,9],\\n  [9,0,8,8,8,8,0,6],\\n  [0,3,3,4,4,3,3,0]\\n]\\n\\n# same function as above\\ndef shift_border_anticlockwise(grid):\\n    H, W = len(grid), len(grid[0])\\n    border_vals = []\\n    positions = []\\n    for j in range(W):\\n        if grid[0][j] != 0:\\n            positions.append((0,j)); border_vals.append(grid[0][j])\\n    for i in range(1, H):\\n        if grid[i][W-1] != 0:\\n            positions.append((i,W-1)); border_vals.append(grid[i][W-1])\\n    for j in range(W-2, -1, -1):\\n        if grid[H-1][j] != 0:\\n            positions.append((H-1,j)); border_vals.append(grid[H-1][j])\\n    for i in range(H-2, 0, -1):\\n        if grid[i][0] != 0:\\n            positions.append((i,0)); border_vals.append(grid[i][0])\\n    new_vals = border_vals[1:] + border_vals[:1]\\n    for (i,j), v in zip(positions, new_vals):\\n        grid[i][j] = v\\n    return grid\\n\\nprint(shift_border_anticlockwise(grid))\"\n    },\n    {\n      \"input\": [\n        [0,2,2,3,3,2,2,3,0],\n        [4,0,6,6,6,6,6,0,5],\n        [4,0,7,8,9,8,7,0,5],\n        [4,0,8,9,9,9,8,0,5],\n        [3,0,9,9,7,9,9,0,2],\n        [4,0,8,9,9,9,8,0,5],\n        [4,0,7,8,9,8,7,0,5],\n        [4,0,6,6,6,6,6,0,5],\n        [0,3,3,2,2,3,3,2,0]\n      ],\n      \"output\": [\n        [0,2,3,3,2,2,3,5,0],\n        [2,0,6,6,6,6,6,0,5],\n        [4,0,7,8,9,8,7,0,5],\n        [4,0,8,9,9,9,8,0,5],\n        [4,0,9,9,7,9,9,0,5],\n        [3,0,8,9,9,9,8,0,5],\n        [4,0,7,8,9,8,7,0,5],\n        [4,0,6,6,6,6,6,0,2],\n        [0,4,3,3,2,2,3,3,0]\n      ],\n      \"code\": \"grid = [\\n  [0,2,2,3,3,2,2,3,0],\\n  [4,0,6,6,6,6,6,0,5],\\n  [4,0,7,8,9,8,7,0,5],\\n  [4,0,8,9,9,9,8,0,5],\\n  [3,0,9,9,7,9,9,0,2],\\n  [4,0,8,9,9,9,8,0,5],\\n  [4,0,7,8,9,8,7,0,5],\\n  [4,0,6,6,6,6,6,0,5],\\n  [0,3,3,2,2,3,3,2,0]\\n]\\n\\n# same function as above\\ndef shift_border_anticlockwise(grid):\\n    H, W = len(grid), len(grid[0])\\n    border_vals = []\\n    positions = []\\n    for j in range(W):\\n        if grid[0][j] != 0:\\n            positions.append((0,j)); border_vals.append(grid[0][j])\\n    for i in range(1, H):\\n        if grid[i][W-1] != 0:\\n            positions.append((i,W-1)); border_vals.append(grid[i][W-1])\\n    for j in range(W-2, -1, -1):\\n        if grid[H-1][j] != 0:\\n            positions.append((H-1,j)); border_vals.append(grid[H-1][j])\\n    for i in range(H-2, 0, -1):\\n        if grid[i][0] != 0:\\n            positions.append((i,0)); border_vals.append(grid[i][0])\\n    new_vals = border_vals[1:] + border_vals[:1]\\n    for (i,j), v in zip(positions, new_vals):\\n        grid[i][j] = v\\n    return grid\\n\\nprint(shift_border_anticlockwise(grid))\"\n    },\n    {\n      \"input\": [\n        [0,5,5,6,6,5,5,6,6,5,0],\n        [7,0,1,1,1,1,1,1,1,0,8],\n        [7,0,2,3,4,5,4,3,2,0,8],\n        [7,0,3,4,9,9,9,4,3,0,8],\n        [7,0,4,9,7,7,7,9,4,0,8],\n        [7,0,3,4,9,9,9,4,3,0,8],\n        [7,0,2,3,4,5,4,3,2,0,8],\n        [7,0,1,1,1,1,1,1,1,0,8],\n        [0,6,6,5,5,6,6,5,5,6,0]\n      ],\n      \"output\": [\n        [0,5,6,6,5,5,6,6,5,8,0],\n        [5,0,1,1,1,1,1,1,1,0,8],\n        [7,0,2,3,4,5,4,3,2,0,8],\n        [7,0,3,4,9,9,9,4,3,0,8],\n        [7,0,4,9,7,7,7,9,4,0,8],\n        [7,0,3,4,9,9,9,4,3,0,8],\n        [7,0,2,3,4,5,4,3,2,0,8],\n        [7,0,1,1,1,1,1,1,1,0,6],\n        [0,7,6,6,5,5,6,6,5,5,0]\n      ],\n      \"code\": \"grid = [\\n  [0,5,5,6,6,5,5,6,6,5,0],\\n  [7,0,1,1,1,1,1,1,1,0,8],\\n  [7,0,2,3,4,5,4,3,2,0,8],\\n  [7,0,3,4,9,9,9,4,3,0,8],\\n  [7,0,4,9,7,7,7,9,4,0,8],\\n  [7,0,3,4,9,9,9,4,3,0,8],\\n  [7,0,2,3,4,5,4,3,2,0,8],\\n  [7,0,1,1,1,1,1,1,1,0,8],\\n  [0,6,6,5,5,6,6,5,5,6,0]\\n]\\n\\n# same function as above\\ndef shift_border_anticlockwise(grid):\\n    H, W = len(grid), len(grid[0])\\n    border_vals = []\\n    positions = []\\n    for j in range(W):\\n        if grid[0][j] != 0:\\n            positions.append((0,j)); border_vals.append(grid[0][j])\\n    for i in range(1, H):\\n        if grid[i][W-1] != 0:\\n            positions.append((i,W-1)); border_vals.append(grid[i][W-1])\\n    for j in range(W-2, -1, -1):\\n        if grid[H-1][j] != 0:\\n            positions.append((H-1,j)); border_vals.append(grid[H-1][j])\\n    for i in range(H-2, 0, -1):\\n        if grid[i][0] != 0:\\n            positions.append((i,0)); border_vals.append(grid[i][0])\\n    new_vals = border_vals[1:] + border_vals[:1]\\n    for (i,j), v in zip(positions, new_vals):\\n        grid[i][j] = v\\n    return grid\\n\\nprint(shift_border_anticlockwise(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "fe10e5f8-01e2-4d9f-bf03-fd690900a68b.json",
    "uuid": "fe10e5f8-01e2-4d9f-bf03-fd690900a68b",
    "created": "2025-04-27 13:12:05",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,4,0],\n        [0,3,3,0,2,0,0,0,0],\n        [0,3,3,0,2,4,0,0,0],\n        [0,0,0,2,2,2,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,0,2,0,0,0,0],\n        [0,0,0,4,2,0,0,0,0],\n        [0,0,4,0,0,0,0,0,0],\n        [0,4,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,8,0],\n        [0,3,3,0,2,0,4,0,0],\n        [0,3,3,0,4,8,0,0,0],\n        [0,0,0,2,4,2,0,0,0],\n        [0,0,0,0,4,0,0,0,0],\n        [0,0,0,2,4,2,0,0,0],\n        [0,0,0,8,4,0,3,3,0],\n        [0,0,4,0,2,0,3,3,0],\n        [0,8,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    cx = h // 2\\n    cy = w // 2\\n    # start with original values\\n    out = [row[:] for row in grid]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v == 0:\\n                continue\\n            # compute 180° rotated position about center\\n            ri = 2*cx - i\\n            rj = 2*cy - j\\n            if 0 <= ri < h and 0 <= rj < w:\\n                # overlay and clamp at 9\\n                out[ri][rj] = min(9, out[ri][rj] + v)\\n    return out\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,3,0,0,0,0,0,0,0],\n        [0,0,3,0,2,0,0,0,0],\n        [0,0,0,3,2,0,0,0,0],\n        [0,0,2,2,2,2,2,0,0],\n        [0,0,0,0,2,3,0,0,0],\n        [0,0,0,0,2,0,3,0,0],\n        [0,0,0,0,2,0,0,3,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,6,0,0,2,0,0,0,0],\n        [0,0,6,0,4,0,0,0,0],\n        [0,0,0,6,4,0,0,0,0],\n        [0,0,4,4,4,4,4,0,0],\n        [0,0,0,0,4,6,0,0,0],\n        [0,0,0,0,4,0,6,0,0],\n        [0,0,0,0,2,0,0,6,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    h = len(grid)\\n    w = len(grid[0])\\n    cx = h // 2\\n    cy = w // 2\\n    out = [row[:] for row in grid]\\n    for i in range(h):\\n        for j in range(w):\\n            v = grid[i][j]\\n            if v == 0:\\n                continue\\n            ri = 2*cx - i\\n            rj = 2*cy - j\\n            if 0 <= ri < h and 0 <= rj < w:\\n                out[ri][rj] = min(9, out[ri][rj] + v)\\n    return out\\n\\n# Example usage:\\n# result = transform(input_matrix)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "16fd32ec-8522-4baf-a442-847ff8755dcf.json",
    "uuid": "16fd32ec-8522-4baf-a442-847ff8755dcf",
    "created": "2025-04-27 00:49:13",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,3,4,5,6,7,8,9,0],\n        [1,0,0,4,5,6,7,8,9,0,1],\n        [2,0,0,5,6,7,8,9,0,1,2],\n        [3,4,5,0,0,0,0,0,0,1,3],\n        [4,5,6,0,0,0,0,0,0,2,4],\n        [5,6,7,0,0,0,0,0,0,3,5],\n        [6,7,8,0,0,0,0,0,0,4,6],\n        [7,8,9,0,0,0,0,0,0,5,7],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"output\": [\n        [0,0,0,3,4,5,6,7,8,9,0],\n        [1,0,0,4,5,6,7,8,9,0,1],\n        [2,0,0,5,6,7,8,9,0,1,2],\n        [3,4,5,9,8,7,6,5,4,1,3],\n        [4,5,6,8,7,6,5,4,3,2,4],\n        [5,6,7,7,6,5,4,3,2,1,5],\n        [6,7,8,6,5,4,3,2,1,0,6],\n        [7,8,9,5,4,3,2,1,0,5,7],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2               # for 11×11 grid, center = 5\\n    radius = center - 1           # radius = 4\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            # if inside circle, apply 90° CCW rotation\\n            if (i-center)**2 + (j-center)**2 <= radius*radius:\\n                i0 = center - (j-center)\\n                j0 = center + (i-center)\\n                out[i][j] = grid[i0][j0]\\n    return out\\n\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,0,0,8,9,0,1,2],\n        [2,3,4,0,0,0,0,0,1,2,3],\n        [3,4,0,0,0,0,0,1,2,3,4],\n        [4,0,0,0,0,0,1,2,3,4,5],\n        [5,6,7,0,0,0,0,0,0,5,6],\n        [6,7,8,0,0,0,0,0,0,6,7],\n        [7,8,9,0,0,0,0,0,0,7,8],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"output\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,0,0,8,9,0,1,2],\n        [2,3,4,9,8,7,6,5,1,2,3],\n        [3,4,9,8,7,6,5,1,2,3,4],\n        [4,9,8,7,6,5,1,2,3,4,5],\n        [5,6,7,6,5,4,3,2,1,5,6],\n        [6,7,8,5,4,3,2,1,0,6,7],\n        [7,8,9,4,3,2,1,0,9,7,8],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2\\n    radius = center - 1\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            if (i-center)**2 + (j-center)**2 <= radius*radius:\\n                i0 = center - (j-center)\\n                j0 = center + (i-center)\\n                out[i][j] = grid[i0][j0]\\n    return out\\n\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,5,6,7,8,9,0,1],\n        [0,0,0,0,0,0,0,0,0,0,2],\n        [3,0,4,0,6,7,8,0,1,2,3],\n        [4,5,6,0,0,0,0,0,2,3,4],\n        [5,6,7,0,0,0,0,0,3,4,5],\n        [0,0,0,0,0,0,0,0,0,0,6],\n        [7,8,9,0,9,8,7,0,1,2,3],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"output\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,5,6,7,8,9,0,1],\n        [0,7,6,5,4,3,2,1,0,9,2],\n        [3,0,8,7,6,5,4,3,2,1,3],\n        [4,5,8,6,5,4,3,2,9,3,4],\n        [5,6,7,5,4,3,2,1,8,4,5],\n        [0,9,8,7,6,5,4,3,2,1,6],\n        [7,8,9,4,3,2,1,0,9,2,3],\n        [8,9,0,1,2,3,4,5,6,7,8],\n        [9,0,1,2,3,4,5,6,7,8,9],\n        [0,1,2,3,4,5,6,7,8,9,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2\\n    radius = center - 1\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            if (i-center)**2 + (j-center)**2 <= radius*radius:\\n                i0 = center - (j-center)\\n                j0 = center + (i-center)\\n                out[i][j] = grid[i0][j0]\\n    return out\\n\\n# result = transform(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,5,6,7,8,9,0,1],\n        [2,3,4,5,6,7,8,9,0,1,2],\n        [3,4,5,0,0,0,0,0,0,2,3],\n        [4,5,6,0,0,0,0,0,1,3,4],\n        [5,6,7,0,0,0,0,0,2,4,5],\n        [6,7,8,0,0,0,0,0,3,5,6],\n        [0,0,0,7,8,9,0,1,2,6,7],\n        [0,0,0,8,9,0,1,2,3,7,8],\n        [0,0,0,9,0,1,2,3,4,8,9],\n        [0,0,0,0,1,2,3,4,5,9,0]\n      ],\n      \"output\": [\n        [0,1,2,3,4,5,6,7,8,9,0],\n        [1,2,3,4,5,6,7,8,9,0,1],\n        [2,3,4,5,6,7,8,9,0,1,2],\n        [3,4,5,2,1,0,9,8,7,2,3],\n        [4,5,6,3,2,1,0,9,8,3,4],\n        [5,6,7,4,3,2,1,0,9,4,5],\n        [6,7,8,5,4,3,2,1,0,5,6],\n        [0,9,8,7,8,9,0,1,2,6,7],\n        [0,8,7,8,9,0,1,2,3,7,8],\n        [0,7,6,9,0,1,2,3,4,8,9],\n        [0,6,5,0,1,2,3,4,5,9,0]\n      ],\n      \"code\": \"def transform(grid):\\n    n = len(grid)\\n    center = n // 2\\n    radius = center - 1\\n    out = [row[:] for row in grid]\\n    for i in range(n):\\n        for j in range(n):\\n            if (i-center)**2 + (j-center)**2 <= radius*radius:\\n                i0 = center - (j-center)\\n                j0 = center + (i-center)\\n                out[i][j] = grid[i0][j0]\\n    return out\\n\\n# result = transform(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "2d966107-5454-4657-8ba3-e3839195da1d.json",
    "uuid": "2d966107-5454-4657-8ba3-e3839195da1d",
    "created": "2025-04-28 01:17:25",
    "description": "```json\n{\n  \"task\":[\n    {\n      \"input\":[\n        [1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0]\n      ],\n      \"output\":[\n        [0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1],\n        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]\n      ],\n      \"code\":\"def koch_fractal_bitmap(input_bitmap):\\n    # 한 행씩 처리하여 1-segment 이상의 행만 fractal로 변환\\n    H = len(input_bitmap)\\n    W = len(input_bitmap[0])\\n    output = []\\n    for row in input_bitmap:\\n        if any(cell==1 for cell in row):\\n            top = [0]*W\\n            bottom = [0]*W\\n            pos = -1\\n            for j, cell in enumerate(row):\\n                if cell==1:\\n                    # 세그먼트 시작이면 pos=0, 아니면 이전 +1\\n                    if j==0 or row[j-1]==0:\\n                        pos = 0\\n                    else:\\n                        pos += 1\\n                    top[j]    = 0 if pos==0 else 1\\n                    bottom[j] = 1 if pos%2==0 else 0\\n                else:\\n                    pos = -1\\n            output.append(top)\\n            output.append(bottom)\\n    return output\\n\\n# 예시 사용법:\\n# bmp = [[1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0]]\\n# print(koch_fractal_bitmap(bmp))\"\n    },\n    {\n      \"input\":[\n        [1,1,1,1,1],\n        [0,0,0,0,0],\n        [1,1,1,1,1]\n      ],\n      \"output\":[\n        [0,1,1,1,1,1,1,1,1,1,1],\n        [1,0,1,0,1,0,1,0,1,0,1],\n        [0,1,1,1,1,1,1,1,1,1,1],\n        [1,0,1,0,1,0,1,0,1,0,1]\n      ],\n      \"code\":\"def koch_fractal_bitmap(input_bitmap):\\n    H = len(input_bitmap)\\n    W = len(input_bitmap[0])\\n    output = []\\n    for row in input_bitmap:\\n        if any(cell==1 for cell in row):\\n            top = [0]*W\\n            bottom = [0]*W\\n            pos = -1\\n            for j, cell in enumerate(row):\\n                if cell==1:\\n                    if j==0 or row[j-1]==0:\\n                        pos = 0\\n                    else:\\n                        pos += 1\\n                    top[j]    = 0 if pos==0 else 1\\n                    bottom[j] = 1 if pos%2==0 else 0\\n                else:\\n                    pos = -1\\n            output.append(top)\\n            output.append(bottom)\\n    return output\"\n    },\n    {\n      \"input\":[\n        [0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0]\n      ],\n      \"output\":[\n        [0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1],\n        [0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]\n      ],\n      \"code\":\"def koch_fractal_bitmap(input_bitmap):\\n    H = len(input_bitmap)\\n    W = len(input_bitmap[0])\\n    output = []\\n    for row in input_bitmap:\\n        if any(cell==1 for cell in row):\\n            top = [0]*W\\n            bottom = [0]*W\\n            pos = -1\\n            for j, cell in enumerate(row):\\n                if cell==1:\\n                    if j==0 or row[j-1]==0:\\n                        pos = 0\\n                    else:\\n                        pos += 1\\n                    top[j]    = 0 if pos==0 else 1\\n                    bottom[j] = 1 if pos%2==0 else 0\\n                else:\\n                    pos = -1\\n            output.append(top)\\n            output.append(bottom)\\n    return output\"\n    },\n    {\n      \"input\":[\n        [1,1,1,1,1,1,1],\n        [0,0,0,0,0,0,0],\n        [1,1,1,1,1,1,1]\n      ],\n      \"output\":[\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],\n        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]\n      ],\n      \"code\":\"def koch_fractal_bitmap(input_bitmap):\\n    H = len(input_bitmap)\\n    W = len(input_bitmap[0])\\n    output = []\\n    for row in input_bitmap:\\n        if any(cell==1 for cell in row):\\n            top = [0]*W\\n            bottom = [0]*W\\n            pos = -1\\n            for j, cell in enumerate(row):\\n                if cell==1:\\n                    if j==0 or row[j-1]==0:\\n                        pos = 0\\n                    else:\\n                        pos += 1\\n                    top[j]    = 0 if pos==0 else 1\\n                    bottom[j] = 1 if pos%2==0 else 0\\n                else:\\n                    pos = -1\\n            output.append(top)\\n            output.append(bottom)\\n    return output\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "4c4eebb2-fd09-4571-b73a-ef2b38f84954.json",
    "uuid": "4c4eebb2-fd09-4571-b73a-ef2b38f84954",
    "created": "2025-04-27 18:37:16",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,1,0,0,0],\n        [0,0,1,1,1,0,0],\n        [0,1,1,1,1,1,0],\n        [0,0,1,1,1,0,0],\n        [0,0,0,1,0,0,0],\n        [0,0,0,0,0,0,0],\n        [4,4,4,4,4,4,4]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,2,0,2,0,2,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,1,1,1,1,1,0,0,0],\n        [0,0,0,0,1,1,1,0,0,0,0],\n        [0,0,0,2,0,1,0,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    H = len(grid)\\n    W = len(grid[0])\\n    # 1) 찾기: floor 행과 객체(1) 셀 목록\\n    floor_row = next(r for r in range(H) if any(cell==4 for cell in grid[r]))\\n    cells = [(r,c) for r in range(H) for c in range(W) if grid[r][c]==1]\\n    # 2) 객체 경계\\n    min_r = min(r for r,c in cells)\\n    max_r = max(r for r,c in cells)\\n    min_c = min(c for r,c in cells)\\n    max_c = max(c for r,c in cells)\\n    # 3) 낙하 거리 d\\n    d = floor_row - max_r\\n    # 4) 출력 크기\\n    newH = H + 2*d\\n    newW = W + 2*d\\n    out = [[0]*newW for _ in range(newH)]\\n    # 5) 객체 평행이동\\n    for r,c in cells:\\n        out[r + d][c + d] = 1\\n    # 6) 중심 좌표\\n    center_r = (min_r + max_r)//2 + d\\n    center_c = (min_c + max_c)//2 + d\\n    # 7) 8방향 궤도 표시\\n    offs = [( d,0),(-d,0),(0, d),(0,-d),( d, d),( d,-d),(-d, d),(-d,-d)]\\n    for dr,dc in offs:\\n        rr,cc = center_r+dr, center_c+dc\\n        if 0 <= rr < newH and 0 <= cc < newW and out[rr][cc]==0:\\n            out[rr][cc] = 2\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [1,1,1,1,1,1,1,1,1],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,1,0,0,0,1,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0],\n        [4,4,4,4,4,4,4,4,4]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0,0,"
  },
  {
    "filename": "7b8f8e2c-35b5-4c8e-a9b2-b9c338f568ed.json",
    "uuid": "7b8f8e2c-35b5-4c8e-a9b2-b9c338f568ed",
    "created": "2025-04-27 07:04:08",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,1,2,1,0,0,0,0],\n        [0,0,0,1,0,2,0,1,0,0,0],\n        [0,0,2,2,2,2,2,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,3,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,2,2,2,2,0,0,0,0],\n        [0,2,2,2,2,2,2,2,0,0,0]\n      ],\n      \"code\": \"def transform(grid):\\n    # grid: list of lists of ints\\n    H, W = len(grid), len(grid[0])\\n    # 1) find tip of triangle (value=2) in the highest row\\n    tip_r = min(r for r in range(H) if 2 in grid[r])\\n    tip_c = grid[tip_r].index(2)\\n    # 2) count all 1's (balloons)\\n    count = sum(cell==1 for row in grid for cell in row)\\n    # 3) build output copy of grid\\n    out = [row[:] for row in grid]\\n    # 4) remove all 1's\\n    for r in range(H):\\n        for c in range(W):\\n            if out[r][c] == 1:\\n                out[r][c] = 0\\n    # 5) stack '3' starting one row above tip, upward\\n    r0 = tip_r - 1\\n    for i in range(count):\\n        out[r0 - i][tip_c] = 3\\n    return out\\n\\n# Example usage:\\n# grid = [ ... ]  # the input above\\n# print(transform(grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,6,2,6,0,0,0,0,0],\n        [0,0,0,6,0,2,0,6,0,0,0,0],\n        [0,0,0,0,6,6,6,6,0,0,0,0],\n        [0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,7,0,0,0,0,0],\n        [0,0,0,0,0,0,2,0,0,0,0,0],\n        [0,0,0,0,6,2,6,0,0,0,0,0],\n        [0,0,0,6,0,2,0,6,0,0,0,0],\n        [0,0,0,0,6,6,6,6,0,0,0,0],\n        [0,0,0,0,2,2,2,0,0,0,0,0],\n        [0,0,0,2,2,2,2,2,0,0,0,0],\n        [0,0,2,2,2,2,2,2,2,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def transform_rocket(grid):\\n    H, W = len(grid), len(grid[0])\\n    # find rocket nose tip (2) in highest row\\n    tip_r = min(r for r in range(H) if 2 in grid[r])\\n    tip_c = grid[tip_r].index(2)\\n    # count all fuel pods (6)\\n    count = sum(cell==6 for row in grid for cell in row)\\n    # copy and remove all 6's\\n    out = [row[:] for row in grid]\\n    for r in range(H):\\n        for c in range(W):\\n            if out[r][c] == 6:\\n                out[r][c] = 0\\n    # stack '7' above the tip\\n    r0 = tip_r - 1\\n    for i in range(count):\\n        out[r0 - i][tip_c] = 7\\n    return out\\n\\n# Example usage:\\n# grid = [ ... ]  # the rocket input above\\n# print(transform_rocket(grid))\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "de0d5397-cd7e-4b40-bb65-fb8669b2fbb2.json",
    "uuid": "de0d5397-cd7e-4b40-bb65-fb8669b2fbb2",
    "created": "2025-04-28 00:20:37",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9],\n        [0,0,1,0,0,0,0],\n        [0,0,1,1,0,0,0],\n        [0,0,0,1,1,0,0],\n        [0,0,0,0,1,1,0],\n        [0,0,0,0,0,1,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,1,1,0],\n        [0,0,0,1,1,0,0],\n        [0,0,1,1,0,0,0],\n        [0,1,1,0,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def rotate_ccw_task(grid):\\n    R, C = len(grid), len(grid[0])\\n    # 1) find minimal bbox of 1s\\n    r0, r1, c0, c1 = R, -1, C, -1\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 1:\\n                r0, r1 = min(r0, i), max(r1, i)\\n                c0, c1 = min(c0, j), max(c1, j)\\n    # 2) expand to square\\n    h, w = r1 - r0 + 1, c1 - c0 + 1\\n    s = max(h, w)\\n    dr, dc = s - h, s - w\\n    r0_new = max(0, min(r0 - dr//2, R - s))\\n    c0_new = max(0, min(c0 - dc//2, C - s))\\n    # 3) extract square region\\n    square = [[grid[r0_new + i][c0_new + j] for j in range(s)] for i in range(s)]\\n    # 4) rotate 90° CCW\\n    rotated = [[square[j][s - 1 - i] for j in range(s)] for i in range(s)]\\n    # 5) build output grid\\n    out = [row[:] for row in grid]\\n    for i in range(s):\\n        for j in range(s):\\n            out[r0_new + i][c0_new + j] = rotated[i][j]\\n    return out\\n\\n# Example usage:\\n# result = rotate_ccw_task(input_grid)\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9],\n        [0,1,0,0,0,0,0],\n        [0,1,0,0,0,0,0],\n        [0,1,0,0,0,0,0],\n        [0,1,0,0,0,0,0],\n        [0,1,1,1,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9],\n        [0,1,1,1,1,1,0],\n        [0,1,0,0,0,0,0],\n        [0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def rotate_ccw_task(grid):\\n    R, C = len(grid), len(grid[0])\\n    # 1) find minimal bbox of 1s\\n    r0, r1, c0, c1 = R, -1, C, -1\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 1:\\n                r0, r1 = min(r0, i), max(r1, i)\\n                c0, c1 = min(c0, j), max(c1, j)\\n    # 2) expand to square\\n    h, w = r1 - r0 + 1, c1 - c0 + 1\\n    s = max(h, w)\\n    dr, dc = s - h, s - w\\n    r0_new = max(0, min(r0 - dr//2, R - s))\\n    c0_new = max(0, min(c0 - dc//2, C - s))\\n    # 3) extract square region\\n    square = [[grid[r0_new + i][c0_new + j] for j in range(s)] for i in range(s)]\\n    # 4) rotate 90° CCW\\n    rotated = [[square[j][s - 1 - i] for j in range(s)] for i in range(s)]\\n    # 5) build output grid\\n    out = [row[:] for row in grid]\\n    for i in range(s):\\n        for j in range(s):\\n            out[r0_new + i][c0_new + j] = rotated[i][j]\\n    return out\\n\\n# Example usage:\\n# result = rotate_ccw_task(input_grid)\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9],\n        [0,0,1,1,1,0,0],\n        [0,0,1,0,0,0,0],\n        [0,0,1,0,0,0,0],\n        [0,0,1,0,0,0,0],\n        [0,0,1,1,1,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,0],\n        [0,1,0,0,0,0,0],\n        [0,1,0,0,0,0,0],\n        [0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def rotate_ccw_task(grid):\\n    R, C = len(grid), len(grid[0])\\n    # 1) find minimal bbox of 1s\\n    r0, r1, c0, c1 = R, -1, C, -1\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 1:\\n                r0, r1 = min(r0, i), max(r1, i)\\n                c0, c1 = min(c0, j), max(c1, j)\\n    # 2) expand to square\\n    h, w = r1 - r0 + 1, c1 - c0 + 1\\n    s = max(h, w)\\n    dr, dc = s - h, s - w\\n    r0_new = max(0, min(r0 - dr//2, R - s))\\n    c0_new = max(0, min(c0 - dc//2, C - s))\\n    # 3) extract square region\\n    square = [[grid[r0_new + i][c0_new + j] for j in range(s)] for i in range(s)]\\n    # 4) rotate 90° CCW\\n    rotated = [[square[j][s - 1 - i] for j in range(s)] for i in range(s)]\\n    # 5) build output grid\\n    out = [row[:] for row in grid]\\n    for i in range(s):\\n        for j in range(s):\\n            out[r0_new + i][c0_new + j] = rotated[i][j]\\n    return out\\n\\n# Example usage:\\n# result = rotate_ccw_task(input_grid)\"\n    },\n    {\n      \"input\": [\n        [9,9,9,9,9,9,9],\n        [0,0,1,1,1,0,0],\n        [0,0,1,0,0,0,0],\n        [0,0,1,1,1,0,0],\n        [0,0,0,0,1,0,0],\n        [0,0,1,1,1,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"output\": [\n        [9,9,9,9,9,9,9],\n        [0,0,0,0,0,0,0],\n        [0,1,0,1,1,1,0],\n        [0,1,0,1,0,1,0],\n        [0,1,1,1,0,0,0],\n        [0,0,0,0,0,0,0],\n        [9,9,9,9,9,9,9]\n      ],\n      \"code\": \"def rotate_ccw_task(grid):\\n    R, C = len(grid), len(grid[0])\\n    # 1) find minimal bbox of 1s\\n    r0, r1, c0, c1 = R, -1, C, -1\\n    for i in range(R):\\n        for j in range(C):\\n            if grid[i][j] == 1:\\n                r0, r1 = min(r0, i), max(r1, i)\\n                c0, c1 = min(c0, j), max(c1, j)\\n    # 2) expand to square\\n    h, w = r1 - r0 + 1, c1 - c0 + 1\\n    s = max(h, w)\\n    dr, dc = s - h, s - w\\n    r0_new = max(0, min(r0 - dr//2, R - s))\\n    c0_new = max(0, min(c0 - dc//2, C - s))\\n    # 3) extract square region\\n    square = [[grid[r0_new + i][c0_new + j] for j in range(s)] for i in range(s)]\\n    # 4) rotate 90° CCW\\n    rotated = [[square[j][s - 1 - i] for j in range(s)] for i in range(s)]\\n    # 5) build output grid\\n    out = [row[:] for row in grid]\\n    for i in range(s):\\n        for j in range(s):\\n            out[r0_new + i][c0_new + j] = rotated[i][j]\\n    return out\\n\\n# Example usage:\\n# result = rotate_ccw_task(input_grid)\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "bc77a3a9-1840-4b21-8b1f-36674302231a.json",
    "uuid": "bc77a3a9-1840-4b21-8b1f-36674302231a",
    "created": "2025-04-27 20:09:17",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,2,2,3,0,0,1,0],\n        [0,1,2,0,3,3,0,1,0],\n        [0,1,0,4,5,0,0,1,0],\n        [0,1,4,4,0,5,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,0,0,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [1,0,0,3,0,5,0,1,0],\n        [1,0,3,3,5,0,0,1,0],\n        [0,1,2,0,4,4,1,0,0],\n        [0,1,2,2,0,4,1,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,0,0,1,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(input_grid):\\n    # copy\\n    m = [row[:] for row in input_grid]\\n    R, C = len(m), len(m[0])\\n    # find horizontal grid lines (rows with many 1s)\\n    hrs = [i for i in range(R) if sum(1 for v in m[i] if v==1) > C//2]\\n    r1, r2 = hrs[0], hrs[-1]\\n    # find vertical grid lines (cols with many 1s)\\n    vcs = [j for j in range(C) if sum(m[i][j]==1 for i in range(R)) > R//2]\\n    c1, c2 = vcs[0], vcs[-1]\\n    # helper to get the two middle indices of a sorted list\\n    mid2 = lambda lst: [lst[len(lst)//2-1], lst[len(lst)//2]]\\n    # distort: move the two middle cells outward\\n    # top line -> up\\n    cols_top = [j for j in range(C) if m[r1][j]==1]\\n    for j in mid2(cols_top): m[r1][j], m[r1-1][j] = 0, 1\\n    # bottom line -> down\\n    cols_bot = [j for j in range(C) if m[r2][j]==1]\\n    for j in mid2(cols_bot): m[r2][j], m[r2+1][j] = 0, 1\\n    # left line -> left\\n    rows_le = [i for i in range(R) if m[i][c1]==1]\\n    for i in mid2(rows_le): m[i][c1], m[i][c1-1] = 0, 1\\n    # right line -> right\\n    rows_ri = [i for i in range(R) if m[i][c2]==1]\\n    for i in mid2(rows_ri): m[i][c2], m[i][c2+1] = 0, 1\\n    # rotate CCW 90°: new[i][j] = old[j][C-1-i]\\n    out = [[0]*R for _ in range(C)]\\n    for i in range(R):\\n        for j in range(C):\\n            out[C-1-j][i] = m[i][j]\\n    return out\\n\\n# Example usage:\\n# print(transform(input_grid))\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,2,2,3,3,0,1,0],\n        [0,1,2,2,0,0,0,1,0],\n        [0,1,4,0,0,0,0,1,0],\n        [0,1,4,0,0,6,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,0,0,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [1,0,3,0,0,6,0,1,0],\n        [1,0,3,0,0,0,0,1,0],\n        [0,1,2,2,0,0,1,0,0],\n        [0,1,2,2,4,4,1,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,0,0,1,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(input_grid):\\n    m = [row[:] for row in input_grid]\\n    R, C = len(m), len(m[0])\\n    hrs = [i for i in range(R) if sum(1 for v in m[i] if v==1) > C//2]\\n    r1, r2 = hrs[0], hrs[-1]\\n    vcs = [j for j in range(C) if sum(m[i][j]==1 for i in range(R)) > R//2]\\n    c1, c2 = vcs[0], vcs[-1]\\n    mid2 = lambda lst: [lst[len(lst)//2-1], lst[len(lst)//2]]\\n    cols_top = [j for j in range(C) if m[r1][j]==1]\\n    for j in mid2(cols_top): m[r1][j], m[r1-1][j] = 0, 1\\n    cols_bot = [j for j in range(C) if m[r2][j]==1]\\n    for j in mid2(cols_bot): m[r2][j], m[r2+1][j] = 0, 1\\n    rows_le = [i for i in range(R) if m[i][c1]==1]\\n    for i in mid2(rows_le): m[i][c1], m[i][c1-1] = 0, 1\\n    rows_ri = [i for i in range(R) if m[i][c2]==1]\\n    for i in mid2(rows_ri): m[i][c2], m[i][c2+1] = 0, 1\\n    out = [[0]*R for _ in range(C)]\\n    for i in range(R):\\n        for j in range(C):\\n            out[C-1-j][i] = m[i][j]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,6,0,7,7,0,1,0],\n        [0,1,0,6,7,7,0,1,0],\n        [0,1,8,0,9,9,0,1,0],\n        [0,1,8,8,0,9,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,0,0,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,1,0,0,0,0,1,0,0],\n        [1,0,7,7,9,9,0,1,0],\n        [1,0,7,7,9,0,0,1,0],\n        [0,1,0,6,0,8,1,0,0],\n        [0,1,6,0,8,8,1,0,0],\n        [0,1,1,0,0,1,1,0,0],\n        [0,0,0,1,1,0,0,0,0]\n      ],\n      \"code\": \"def transform(input_grid):\\n    m = [row[:] for row in input_grid]\\n    R, C = len(m), len(m[0])\\n    hrs = [i for i in range(R) if sum(1 for v in m[i] if v==1) > C//2]\\n    r1, r2 = hrs[0], hrs[-1]\\n    vcs = [j for j in range(C) if sum(m[i][j]==1 for i in range(R)) > R//2]\\n    c1, c2 = vcs[0], vcs[-1]\\n    mid2 = lambda lst: [lst[len(lst)//2-1], lst[len(lst)//2]]\\n    cols_top = [j for j in range(C) if m[r1][j]==1]\\n    for j in mid2(cols_top): m[r1][j], m[r1-1][j] = 0, 1\\n    cols_bot = [j for j in range(C) if m[r2][j]==1]\\n    for j in mid2(cols_bot): m[r2][j], m[r2+1][j] = 0, 1\\n    rows_le = [i for i in range(R) if m[i][c1]==1]\\n    for i in mid2(rows_le): m[i][c1], m[i][c1-1] = 0, 1\\n    rows_ri = [i for i in range(R) if m[i][c2]==1]\\n    for i in mid2(rows_ri): m[i][c2], m[i][c2+1] = 0, 1\\n    out = [[0]*R for _ in range(C)]\\n    for i in range(R):\\n        for j in range(C):\\n            out[C-1-j][i] = m[i][j]\\n    return out\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,1,0,2,0,3,0,1,0],\n        [0,1,2,0,0,0,3,1,0],\n        [0,1,4,0,0,5,5,1,0],\n        [0,1,4,0,0,0,0,1,0],\n        [0,1,1,1,1,1,1,1,0],\n        [0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,1,1,1,0,0,0],\n        [0,1,1,0,0,0,1,0,0],\n        [0,1,0,3,5,0,1,0,0],\n        [1,0,3,0,5,0,0,1,0],\n        [1,0,0,0,0,0,0,1,0],\n        [0,1,2,0,0,0,1,0,0],\n        [0,1,0,2,4,4,1,0,0],\n        [0,1,1,0,0,0,1,0,0],\n        [0,0,0,1,1,1,0,0,0]\n      ],\n      \"code\": \"def transform(input_grid):\\n    m = [row[:] for row in input_grid]\\n    R, C = len(m), len(m[0])\\n    hrs = [i for i in range(R) if sum(1 for v in m[i] if v==1) > C//2]\\n    r1, r2 = hrs[0], hrs[-1]\\n    vcs = [j for j in range(C) if sum(m[i][j]==1 for i in range(R)) > R//2]\\n    c1, c2 = vcs[0], vcs[-1]\\n    mid2 = lambda lst: [lst[len(lst)//2-1], lst[len(lst)//2]]\\n    cols_top = [j for j in range(C) if m[r1][j]==1]\\n    for j in mid2(cols_top): m[r1][j], m[r1-1][j] = 0, 1\\n    cols_bot = [j for j in range(C) if m[r2][j]==1]\\n    for j in mid2(cols_bot): m[r2][j], m[r2+1][j] = 0, 1\\n    rows_le = [i for i in range(R) if m[i][c1]==1]\\n    for i in mid2(rows_le): m[i][c1], m[i][c1-1] = 0, 1\\n    rows_ri = [i for i in range(R) if m[i][c2]==1]\\n    for i in mid2(rows_ri): m[i][c2], m[i][c2+1] = 0, 1\\n    out = [[0]*R for _ in range(C)]\\n    for i in range(R):\\n        for j in range(C):\\n            out[C-1-j][i] = m[i][j]\\n    return out\"\n    }\n  ]\n}\n```"
  },
  {
    "filename": "a85ea111-bbba-4b27-851d-92953d32c5e5.json",
    "uuid": "a85ea111-bbba-4b27-851d-92953d32c5e5",
    "created": "2025-04-27 00:21:00",
    "description": "```json\n{\n  \"task\": [\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,4,4,4,0,5,5,5,0],\n        [0,4,4,4,4,4,5,5,5,5],\n        [2,1,3,1,2,6,9,6,9,6],\n        [3,2,1,2,3,9,6,9,6,9],\n        [1,3,2,3,1,6,9,6,9,6],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,3,2,3,1,6,9,6],\n        [0,0,3,2,1,2,3,9,6,9],\n        [0,0,2,1,3,1,2,6,9,6],\n        [0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0],\n        [2,1,3,1,2,6,9,6,9,6],\n        [3,2,1,2,3,9,6,9,6,9],\n        [1,3,2,3,1,6,9,6,9,6],\n        [0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def reflect_A(grid):\\n    # reflector rows 3–4, floor rows 5–7\\n    r0, r1, fr0, fr1 = 3, 4, 5, 7\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # erase reflector\\n    for r in range(r0, r1+1):\\n        for c in range(W):\\n            if grid[r][c] != 0:\\n                out[r][c] = 0\\n    # reflect floor rows upward\\n    for i in range(fr1-fr0+1):\\n        src = fr1 - i\\n        dst = r0 - 1 - i\\n        if dst >= 0:\\n            for c in range(W):\\n                out[dst][c] = grid[src][c]\\n    return out\\n\\n# Example usage:\\n# result = reflect_A(input_grid)\"\n    },\n    {\n      \"input\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,6,6,6,6,6,6,6,6,0,0],\n        [0,0,6,6,6,6,6,6,6,6,0,0],\n        [0,0,6,6,6,6,6,6,6,6,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,4,3,2,1,2,3,4,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"output\": [\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,4,3,2,1,2,3,4,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,4,3,2,1,2,3,4,0,0,0],\n        [0,0,1,2,3,4,3,2,1,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0],\n        [0,0,0,0,0,0,0,0,0,0,0,0]\n      ],\n      \"code\": \"def reflect_B(grid):\\n    # reflector rows 4–6, floor rows 8–10\\n    r0, r1, fr0, fr1 = 4, 6, 8, 10\\n    H, W = len(grid), len(grid[0])\\n    out = [row[:] for row in grid]\\n    # erase reflector\\n    for r in range(r0, r1+1):\\n        for c in range(W):\\n            if grid[r][c] != 0:\\n                out[r][c] = 0\\n    # reflect floor rows upward\\n    for i in range(fr1-fr0+1):\\n        src = fr1 - i\\n        dst = r0 - 1 - i\\n        if dst >= 0:\\n            for c in range(W):\\n                out[dst][c] = grid[src][c]\\n    return out\\n\\n# Example usage:\\n# result = reflect_B(input_grid)\"\n    }\n  ]\n}\n```"
  }
]